// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 6BobAUw5T3TCqT8ypcszbG
// Component: ykzmq18_kRphNj
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { CmsQueryRepeater } from "@plasmicpkgs/plasmic-cms"; // plasmic-import: 8N9-WfZSaq/codeComponent
import { CmsRowImage } from "@plasmicpkgs/plasmic-cms"; // plasmic-import: dj_Vc2QmFA/codeComponent
import { ContentStackFetcher } from "@plasmicpkgs/plasmic-contentstack"; // plasmic-import: CXh6zJo5Lcp/codeComponent
import { ContentStackField } from "@plasmicpkgs/plasmic-contentstack"; // plasmic-import: 4n_wKQ7yxp_/codeComponent
import { CmsRowField } from "@plasmicpkgs/plasmic-cms"; // plasmic-import: w6HdOz-Pcn/codeComponent

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_fountain_fm_css from "../fountain_fm/plasmic_fountain_fm.module.css"; // plasmic-import: q7mc6yKyK23FBh7x1aGwnG/projectcss
import projectcss from "./plasmic_copy_of_fountain_listen_to_earn.module.css"; // plasmic-import: 6BobAUw5T3TCqT8ypcszbG/projectcss
import sty from "./PlasmicAllPosts.module.css"; // plasmic-import: ykzmq18_kRphNj/css

export type PlasmicAllPosts__VariantMembers = {};

export type PlasmicAllPosts__VariantsArgs = {};
type VariantPropType = keyof PlasmicAllPosts__VariantsArgs;
export const PlasmicAllPosts__VariantProps = new Array<VariantPropType>();

export type PlasmicAllPosts__ArgsType = {};
type ArgPropType = keyof PlasmicAllPosts__ArgsType;
export const PlasmicAllPosts__ArgProps = new Array<ArgPropType>();

export type PlasmicAllPosts__OverridesType = {
  root?: p.Flex<"div">;
  cmsDataLoader?: p.Flex<typeof CmsQueryRepeater>;
  cmsEntryImage?: p.Flex<typeof CmsRowImage>;
  img?: p.Flex<typeof p.PlasmicImg>;
  contentStackFetcher?: p.Flex<typeof ContentStackFetcher>;
};

export interface DefaultAllPostsProps {
  className?: string;
}

export const defaultAllPosts__Args: Partial<PlasmicAllPosts__ArgsType> = {};

function PlasmicAllPosts__RenderFunc(props: {
  variants: PlasmicAllPosts__VariantsArgs;
  args: PlasmicAllPosts__ArgsType;
  overrides: PlasmicAllPosts__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const args = Object.assign({}, defaultAllPosts__Args, props.args);
  const $props = args;
  const $ctx = ph.useDataEnv?.() || {};

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_fountain_fm_css.plasmic_tokens,
        sty.root
      )}
    >
      <div className={classNames(projectcss.all, sty.freeBox__gD9Ow)}>
        <CmsQueryRepeater
          data-plasmic-name={"cmsDataLoader"}
          data-plasmic-override={overrides.cmsDataLoader}
          className={classNames("__wab_instance", sty.cmsDataLoader)}
          desc={true}
          emptyMessage={
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__onz84
              )}
            >
              {"No matching published entries found."}
            </div>
          }
          forceEmptyState={false}
          forceLoadingState={false}
          limit={undefined}
          loadingMessage={
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__kYNtB
              )}
            >
              {"Loading..."}
            </div>
          }
          noLayout={false}
          orderBy={"date" as const}
          useDraft={false}
        >
          <div className={classNames(projectcss.all, sty.freeBox__fa4O)}>
            <CmsRowImage
              data-plasmic-name={"cmsEntryImage"}
              data-plasmic-override={overrides.cmsEntryImage}
              className={classNames("__wab_instance", sty.cmsEntryImage)}
              srcProp={"src" as const}
            >
              <p.PlasmicImg
                data-plasmic-name={"img"}
                data-plasmic-override={overrides.img}
                alt={"" as const}
                className={classNames(sty.img)}
                displayHeight={"223px" as const}
                displayMaxHeight={"none" as const}
                displayMaxWidth={"none" as const}
                displayMinHeight={"0" as const}
                displayMinWidth={"0" as const}
                displayWidth={"100%" as const}
                src={
                  "https://studio.plasmic.app/static/img/placeholder-full.png" as const
                }
              />

              <ContentStackFetcher
                data-plasmic-name={"contentStackFetcher"}
                data-plasmic-override={overrides.contentStackFetcher}
                className={classNames(
                  "__wab_instance",
                  sty.contentStackFetcher
                )}
                noLayout={false}
              >
                <div className={classNames(projectcss.all, sty.freeBox__rJ8V)}>
                  <ContentStackField
                    className={classNames(
                      "__wab_instance",
                      sty.contentStackField__wf3Tj
                    )}
                  />
                </div>
              </ContentStackFetcher>

              <div className={classNames(projectcss.all, sty.freeBox__nbPUy)}>
                <CmsRowField
                  className={classNames(
                    "__wab_instance",
                    sty.cmsEntryField__om6Fh
                  )}
                />

                <CmsRowField
                  className={classNames(
                    "__wab_instance",
                    sty.cmsEntryField__axc5L
                  )}
                  dateFormat={"MMMM D, YYYY" as const}
                  field={"date" as const}
                />

                <CmsRowField
                  className={classNames(
                    "__wab_instance",
                    sty.cmsEntryField__wn1Hl
                  )}
                  field={"postDescription" as const}
                />

                {true ? (
                  <CmsRowField
                    className={classNames(
                      "__wab_instance",
                      sty.cmsEntryField__mrf9N
                    )}
                    field={"url" as const}
                  />
                ) : null}
              </div>
            </CmsRowImage>
          </div>
        </CmsQueryRepeater>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "cmsDataLoader",
    "cmsEntryImage",
    "img",
    "contentStackFetcher"
  ],
  cmsDataLoader: [
    "cmsDataLoader",
    "cmsEntryImage",
    "img",
    "contentStackFetcher"
  ],
  cmsEntryImage: ["cmsEntryImage", "img", "contentStackFetcher"],
  img: ["img"],
  contentStackFetcher: ["contentStackFetcher"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  cmsDataLoader: typeof CmsQueryRepeater;
  cmsEntryImage: typeof CmsRowImage;
  img: typeof p.PlasmicImg;
  contentStackFetcher: typeof ContentStackFetcher;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicAllPosts__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicAllPosts__VariantsArgs;
    args?: PlasmicAllPosts__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicAllPosts__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicAllPosts__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicAllPosts__ArgProps,
      internalVariantPropNames: PlasmicAllPosts__VariantProps
    });

    return PlasmicAllPosts__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicAllPosts";
  } else {
    func.displayName = `PlasmicAllPosts.${nodeName}`;
  }
  return func;
}

export const PlasmicAllPosts = Object.assign(
  // Top-level PlasmicAllPosts renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    cmsDataLoader: makeNodeComponent("cmsDataLoader"),
    cmsEntryImage: makeNodeComponent("cmsEntryImage"),
    img: makeNodeComponent("img"),
    contentStackFetcher: makeNodeComponent("contentStackFetcher"),

    // Metadata about props expected for PlasmicAllPosts
    internalVariantProps: PlasmicAllPosts__VariantProps,
    internalArgProps: PlasmicAllPosts__ArgProps
  }
);

export default PlasmicAllPosts;
/* prettier-ignore-end */
