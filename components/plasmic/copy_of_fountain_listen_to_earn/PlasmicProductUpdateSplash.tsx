// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 6BobAUw5T3TCqT8ypcszbG
// Component: mEPgjQ2KArZRv
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import { useScreenVariants as useScreenVariantsuXvTXvy0VuZNuyJ } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: UXvTXvy0VuZNuyJ/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_fountain_fm_css from "../fountain_fm/plasmic_fountain_fm.module.css"; // plasmic-import: q7mc6yKyK23FBh7x1aGwnG/projectcss
import projectcss from "./plasmic_copy_of_fountain_listen_to_earn.module.css"; // plasmic-import: 6BobAUw5T3TCqT8ypcszbG/projectcss
import sty from "./PlasmicProductUpdateSplash.module.css"; // plasmic-import: mEPgjQ2KArZRv/css

import Icon16Icon from "./icons/PlasmicIcon__Icon16"; // plasmic-import: cF5YAR91eQ2yTs/icon

export type PlasmicProductUpdateSplash__VariantMembers = {};

export type PlasmicProductUpdateSplash__VariantsArgs = {};
type VariantPropType = keyof PlasmicProductUpdateSplash__VariantsArgs;
export const PlasmicProductUpdateSplash__VariantProps =
  new Array<VariantPropType>();

export type PlasmicProductUpdateSplash__ArgsType = {};
type ArgPropType = keyof PlasmicProductUpdateSplash__ArgsType;
export const PlasmicProductUpdateSplash__ArgProps = new Array<ArgPropType>();

export type PlasmicProductUpdateSplash__OverridesType = {
  root?: p.Flex<"section">;
  foreground?: p.Flex<"div">;
  h3?: p.Flex<"h3">;
};

export interface DefaultProductUpdateSplashProps {
  className?: string;
}

export const defaultProductUpdateSplash__Args: Partial<PlasmicProductUpdateSplash__ArgsType> =
  {};

function PlasmicProductUpdateSplash__RenderFunc(props: {
  variants: PlasmicProductUpdateSplash__VariantsArgs;
  args: PlasmicProductUpdateSplash__ArgsType;
  overrides: PlasmicProductUpdateSplash__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const args = Object.assign({}, defaultProductUpdateSplash__Args, props.args);
  const $props = args;
  const $ctx = ph.useDataEnv?.() || {};

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsuXvTXvy0VuZNuyJ()
  });

  return (
    <p.Stack
      as={"section"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_fountain_fm_css.plasmic_tokens,
        sty.root
      )}
    >
      <p.Stack
        as={"div"}
        data-plasmic-name={"foreground"}
        data-plasmic-override={overrides.foreground}
        hasGap={true}
        className={classNames(projectcss.all, sty.foreground)}
      >
        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__lmzqd)}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__eui4Y
            )}
          >
            {"Product Updates"}
          </div>

          <h3
            data-plasmic-name={"h3"}
            data-plasmic-override={overrides.h3}
            className={classNames(
              projectcss.all,
              projectcss.h3,
              projectcss.__wab_text,
              sty.h3
            )}
          >
            {"Fountain 0.3.7 - Podcaster Wallet & Improved Search"}
          </h3>

          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__dCdfI
            )}
          >
            <React.Fragment>
              <React.Fragment>
                {"Fountain 0.3.7 is now live on "}
              </React.Fragment>
              <span
                className={"plasmic_default__all plasmic_default__span"}
                style={{ textDecorationLine: "underline" }}
              >
                {"iOS"}
              </span>
              <React.Fragment>{" and "}</React.Fragment>
              <span
                className={"plasmic_default__all plasmic_default__span"}
                style={{ textDecorationLine: "underline" }}
              >
                {"Android"}
              </span>
              <React.Fragment>{"!"}</React.Fragment>
            </React.Fragment>
          </div>

          {(
            hasVariant(globalVariants, "screen", "mobileOnly") ? true : false
          ) ? (
            <p.PlasmicImg
              alt={""}
              className={classNames(sty.img__mSdB)}
              displayHeight={"auto" as const}
              displayMaxHeight={"none" as const}
              displayMaxWidth={"100%" as const}
              displayMinHeight={"0" as const}
              displayMinWidth={"0" as const}
              displayWidth={"auto" as const}
              loading={"lazy" as const}
              src={{
                src: "/plasmic/copy_of_fountain_listen_to_earn/images/image12.png",
                fullWidth: 1080,
                fullHeight: 1080,
                aspectRatio: undefined
              }}
            />
          ) : null}

          <div className={classNames(projectcss.all, sty.freeBox__nip)}>
            <h5
              className={classNames(
                projectcss.all,
                projectcss.h5,
                projectcss.__wab_text,
                sty.h5__xXz0M
              )}
            >
              {"Claim your podcast and see your engagement analytics "}
            </h5>

            <Icon16Icon
              className={classNames(projectcss.all, sty.svg__j6Gmq)}
              role={"img"}
            />
          </div>

          <div className={classNames(projectcss.all, sty.freeBox__pZeXx)}>
            <h5
              className={classNames(
                projectcss.all,
                projectcss.h5,
                projectcss.__wab_text,
                sty.h5___9V7Xo
              )}
            >
              {"Search for people, clips, playlists and hashtags"}
            </h5>

            <Icon16Icon
              className={classNames(projectcss.all, sty.svg__tpy3D)}
              role={"img"}
            />
          </div>
        </p.Stack>

        <div className={classNames(projectcss.all, sty.freeBox__snG4E)}>
          {(
            hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
          ) ? (
            <p.PlasmicImg
              alt={""}
              className={classNames(sty.img___54UVj)}
              displayHeight={"auto" as const}
              displayMaxHeight={"none" as const}
              displayMaxWidth={"100%" as const}
              displayMinHeight={"0" as const}
              displayMinWidth={"0" as const}
              displayWidth={"auto" as const}
              loading={"lazy" as const}
              src={{
                src: "/plasmic/copy_of_fountain_listen_to_earn/images/image12.png",
                fullWidth: 1080,
                fullHeight: 1080,
                aspectRatio: undefined
              }}
            />
          ) : null}
        </div>
      </p.Stack>
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "foreground", "h3"],
  foreground: ["foreground", "h3"],
  h3: ["h3"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "section";
  foreground: "div";
  h3: "h3";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicProductUpdateSplash__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicProductUpdateSplash__VariantsArgs;
    args?: PlasmicProductUpdateSplash__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicProductUpdateSplash__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicProductUpdateSplash__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicProductUpdateSplash__ArgProps,
      internalVariantPropNames: PlasmicProductUpdateSplash__VariantProps
    });

    return PlasmicProductUpdateSplash__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicProductUpdateSplash";
  } else {
    func.displayName = `PlasmicProductUpdateSplash.${nodeName}`;
  }
  return func;
}

export const PlasmicProductUpdateSplash = Object.assign(
  // Top-level PlasmicProductUpdateSplash renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    foreground: makeNodeComponent("foreground"),
    h3: makeNodeComponent("h3"),

    // Metadata about props expected for PlasmicProductUpdateSplash
    internalVariantProps: PlasmicProductUpdateSplash__VariantProps,
    internalArgProps: PlasmicProductUpdateSplash__ArgProps
  }
);

export default PlasmicProductUpdateSplash;
/* prettier-ignore-end */
