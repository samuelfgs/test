// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 6BobAUw5T3TCqT8ypcszbG
// Component: 6W2pMJXjhbLvrV
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { CmsQueryRepeater } from "@plasmicpkgs/plasmic-cms"; // plasmic-import: 8N9-WfZSaq/codeComponent
import { CmsRowImage } from "@plasmicpkgs/plasmic-cms"; // plasmic-import: dj_Vc2QmFA/codeComponent
import { CmsRowField } from "@plasmicpkgs/plasmic-cms"; // plasmic-import: w6HdOz-Pcn/codeComponent

import { useScreenVariants as useScreenVariantsuXvTXvy0VuZNuyJ } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: UXvTXvy0VuZNuyJ/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_fountain_fm_css from "../fountain_fm/plasmic_fountain_fm.module.css"; // plasmic-import: q7mc6yKyK23FBh7x1aGwnG/projectcss
import projectcss from "./plasmic_copy_of_fountain_listen_to_earn.module.css"; // plasmic-import: 6BobAUw5T3TCqT8ypcszbG/projectcss
import sty from "./PlasmicLatestNews.module.css"; // plasmic-import: 6W2pMJXjhbLvrV/css

export type PlasmicLatestNews__VariantMembers = {};

export type PlasmicLatestNews__VariantsArgs = {};
type VariantPropType = keyof PlasmicLatestNews__VariantsArgs;
export const PlasmicLatestNews__VariantProps = new Array<VariantPropType>();

export type PlasmicLatestNews__ArgsType = {};
type ArgPropType = keyof PlasmicLatestNews__ArgsType;
export const PlasmicLatestNews__ArgProps = new Array<ArgPropType>();

export type PlasmicLatestNews__OverridesType = {
  root?: p.Flex<"div">;
  h3?: p.Flex<"h3">;
  cmsDataLoader?: p.Flex<typeof CmsQueryRepeater>;
  cmsEntryImage?: p.Flex<typeof CmsRowImage>;
  img?: p.Flex<typeof p.PlasmicImg>;
};

export interface DefaultLatestNewsProps {
  className?: string;
}

export const defaultLatestNews__Args: Partial<PlasmicLatestNews__ArgsType> = {};

function PlasmicLatestNews__RenderFunc(props: {
  variants: PlasmicLatestNews__VariantsArgs;
  args: PlasmicLatestNews__ArgsType;
  overrides: PlasmicLatestNews__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const args = Object.assign({}, defaultLatestNews__Args, props.args);
  const $props = args;
  const $ctx = ph.useDataEnv?.() || {};

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsuXvTXvy0VuZNuyJ()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_fountain_fm_css.plasmic_tokens,
        sty.root
      )}
    >
      <div className={classNames(projectcss.all, sty.freeBox__ni2B8)}>
        <h3
          data-plasmic-name={"h3"}
          data-plasmic-override={overrides.h3}
          className={classNames(
            projectcss.all,
            projectcss.h3,
            projectcss.__wab_text,
            sty.h3
          )}
        >
          {hasVariant(globalVariants, "screen", "mobileOnly")
            ? "Latest news"
            : "Latest news"}
        </h3>
      </div>

      <div className={classNames(projectcss.all, sty.freeBox__no4Lx)}>
        <CmsQueryRepeater
          data-plasmic-name={"cmsDataLoader"}
          data-plasmic-override={overrides.cmsDataLoader}
          className={classNames("__wab_instance", sty.cmsDataLoader)}
          desc={true}
          emptyMessage={
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__rjPf6
              )}
            >
              {"No matching published entries found."}
            </div>
          }
          filterField={"news" as const}
          filterValue={"true" as const}
          forceEmptyState={false}
          forceLoadingState={false}
          limit={3 as const}
          loadingMessage={
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__iDxwq
              )}
            >
              {"Loading..."}
            </div>
          }
          noLayout={false}
          orderBy={"date" as const}
          useDraft={false}
        >
          <div className={classNames(projectcss.all, sty.freeBox__vcPcL)}>
            <CmsRowImage
              data-plasmic-name={"cmsEntryImage"}
              data-plasmic-override={overrides.cmsEntryImage}
              className={classNames("__wab_instance", sty.cmsEntryImage)}
              srcProp={"src" as const}
            >
              <p.PlasmicImg
                data-plasmic-name={"img"}
                data-plasmic-override={overrides.img}
                alt={"" as const}
                className={classNames(sty.img)}
                displayHeight={"223px" as const}
                displayMaxHeight={"none" as const}
                displayMaxWidth={"none" as const}
                displayMinHeight={"0" as const}
                displayMinWidth={"0" as const}
                displayWidth={"100%" as const}
                src={
                  "https://studio.plasmic.app/static/img/placeholder-full.png" as const
                }
              />

              <div className={classNames(projectcss.all, sty.freeBox__nbPUy)}>
                <CmsRowField
                  className={classNames(
                    "__wab_instance",
                    sty.cmsEntryField___3C5Hd
                  )}
                />

                <CmsRowField
                  className={classNames(
                    "__wab_instance",
                    sty.cmsEntryField___1OJoW
                  )}
                  dateFormat={"MMMM D, YYYY" as const}
                  field={"date" as const}
                />

                <CmsRowField
                  className={classNames(
                    "__wab_instance",
                    sty.cmsEntryField__oFEhp
                  )}
                  field={"postDescription" as const}
                />

                {true ? (
                  <CmsRowField
                    className={classNames(
                      "__wab_instance",
                      sty.cmsEntryField__th62N
                    )}
                    field={"url" as const}
                  />
                ) : null}
              </div>
            </CmsRowImage>
          </div>
        </CmsQueryRepeater>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "h3", "cmsDataLoader", "cmsEntryImage", "img"],
  h3: ["h3"],
  cmsDataLoader: ["cmsDataLoader", "cmsEntryImage", "img"],
  cmsEntryImage: ["cmsEntryImage", "img"],
  img: ["img"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  h3: "h3";
  cmsDataLoader: typeof CmsQueryRepeater;
  cmsEntryImage: typeof CmsRowImage;
  img: typeof p.PlasmicImg;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicLatestNews__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicLatestNews__VariantsArgs;
    args?: PlasmicLatestNews__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicLatestNews__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicLatestNews__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicLatestNews__ArgProps,
      internalVariantPropNames: PlasmicLatestNews__VariantProps
    });

    return PlasmicLatestNews__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicLatestNews";
  } else {
    func.displayName = `PlasmicLatestNews.${nodeName}`;
  }
  return func;
}

export const PlasmicLatestNews = Object.assign(
  // Top-level PlasmicLatestNews renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    h3: makeNodeComponent("h3"),
    cmsDataLoader: makeNodeComponent("cmsDataLoader"),
    cmsEntryImage: makeNodeComponent("cmsEntryImage"),
    img: makeNodeComponent("img"),

    // Metadata about props expected for PlasmicLatestNews
    internalVariantProps: PlasmicLatestNews__VariantProps,
    internalArgProps: PlasmicLatestNews__ArgProps
  }
);

export default PlasmicLatestNews;
/* prettier-ignore-end */
