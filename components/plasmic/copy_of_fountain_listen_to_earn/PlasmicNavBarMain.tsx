// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 6BobAUw5T3TCqT8ypcszbG
// Component: _KtOQQClRSGbvP
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { NavigationBar } from "@plasmicpkgs/plasmic-nav"; // plasmic-import: jGx9tiKJoex/codeComponent
import Button from "../../Button"; // plasmic-import: KhbeBVaAisx47/component

import { useScreenVariants as useScreenVariantsuXvTXvy0VuZNuyJ } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: UXvTXvy0VuZNuyJ/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_fountain_fm_css from "../fountain_fm/plasmic_fountain_fm.module.css"; // plasmic-import: q7mc6yKyK23FBh7x1aGwnG/projectcss
import projectcss from "./plasmic_copy_of_fountain_listen_to_earn.module.css"; // plasmic-import: 6BobAUw5T3TCqT8ypcszbG/projectcss
import sty from "./PlasmicNavBarMain.module.css"; // plasmic-import: _KtOQQClRSGbvP/css

import XSvgrepoComsvgIcon from "./icons/PlasmicIcon__XSvgrepoComsvg"; // plasmic-import: 7vapdQmBVGZhZD/icon
import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: S2Divheo_3CFcy/icon

export type PlasmicNavBarMain__VariantMembers = {
  unnamedVariant: "unnamedVariant";
};

export type PlasmicNavBarMain__VariantsArgs = {
  unnamedVariant?: SingleBooleanChoiceArg<"unnamedVariant">;
};

type VariantPropType = keyof PlasmicNavBarMain__VariantsArgs;
export const PlasmicNavBarMain__VariantProps = new Array<VariantPropType>(
  "unnamedVariant"
);

export type PlasmicNavBarMain__ArgsType = {};
type ArgPropType = keyof PlasmicNavBarMain__ArgsType;
export const PlasmicNavBarMain__ArgProps = new Array<ArgPropType>();

export type PlasmicNavBarMain__OverridesType = {
  root?: p.Flex<typeof NavigationBar>;
  svg?: p.Flex<"svg">;
  button?: p.Flex<typeof Button>;
};

export interface DefaultNavBarMainProps {
  unnamedVariant?: SingleBooleanChoiceArg<"unnamedVariant">;
  className?: string;
}

export const defaultNavBarMain__Args: Partial<PlasmicNavBarMain__ArgsType> = {};

function PlasmicNavBarMain__RenderFunc(props: {
  variants: PlasmicNavBarMain__VariantsArgs;
  args: PlasmicNavBarMain__ArgsType;
  overrides: PlasmicNavBarMain__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const args = Object.assign({}, defaultNavBarMain__Args, props.args);
  const $props = args;
  const $ctx = ph.useDataEnv?.() || {};

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsuXvTXvy0VuZNuyJ()
  });

  return (
    (hasVariant(globalVariants, "screen", "mobileOnly") ? true : true) ? (
      <NavigationBar
        data-plasmic-name={"root"}
        data-plasmic-override={overrides.root}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        brand={
          <p.PlasmicLink
            className={classNames(
              projectcss.all,
              projectcss.a,
              sty.link__paOZv
            )}
            component={Link}
            href={"/" as const}
            platform={"nextjs"}
          >
            <p.PlasmicImg
              alt={""}
              className={classNames(sty.img__mGAv)}
              displayHeight={"40px" as const}
              displayMaxHeight={"none" as const}
              displayMaxWidth={"none" as const}
              displayMinHeight={"0" as const}
              displayMinWidth={"0" as const}
              displayWidth={
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? ("auto" as const)
                  : ("auto" as const)
              }
              src={{
                src: "/plasmic/copy_of_fountain_listen_to_earn/images/image41.png",
                fullWidth: 1245,
                fullHeight: 309,
                aspectRatio: undefined
              }}
            />
          </p.PlasmicLink>
        }
        className={classNames("__wab_instance", sty.root)}
        closeButton={
          <React.Fragment>
            {(
              hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
            ) ? (
              <p.PlasmicImg
                alt={""}
                className={classNames(sty.img__pzKpJ)}
                displayHeight={"auto" as const}
                displayMaxHeight={"none" as const}
                displayMaxWidth={"none" as const}
                displayMinHeight={"0" as const}
                displayMinWidth={"0" as const}
                displayWidth={"auto" as const}
                src={"https://static1.plasmic.app/close.svg" as const}
              />
            ) : null}
            {(
              hasVariant(globalVariants, "screen", "mobileOnly") ? true : false
            ) ? (
              <p.PlasmicImg
                alt={""}
                className={classNames(sty.img__ml5Zn)}
                displayHeight={
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? ("28px" as const)
                    : ("28px" as const)
                }
                displayMaxHeight={"none" as const}
                displayMaxWidth={
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? ("100%" as const)
                    : ("100%" as const)
                }
                displayMinHeight={"0" as const}
                displayMinWidth={"0" as const}
                displayWidth={
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? ("39px" as const)
                    : ("39px" as const)
                }
                loading={
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? ("lazy" as const)
                    : ("lazy" as const)
                }
                src={
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? {
                        src: "/plasmic/copy_of_fountain_listen_to_earn/images/icons8Menu48Png.png",
                        fullWidth: 48,
                        fullHeight: 48,
                        aspectRatio: undefined
                      }
                    : {
                        src: "/plasmic/copy_of_fountain_listen_to_earn/images/image36.png",
                        fullWidth: 768,
                        fullHeight: 768,
                        aspectRatio: undefined
                      }
                }
              />
            ) : null}
            {(
              hasVariant(globalVariants, "screen", "mobileOnly") ? true : false
            ) ? (
              <XSvgrepoComsvgIcon
                data-plasmic-name={"svg"}
                data-plasmic-override={overrides.svg}
                className={classNames(projectcss.all, sty.svg)}
                role={"img"}
              />
            ) : null}
          </React.Fragment>
        }
        forceOpenMenu={
          hasVariant(globalVariants, "screen", "mobileOnly") ? false : false
        }
        itemsGap={10 as const}
        menuItems={
          <React.Fragment>
            <p.PlasmicLink
              className={classNames(
                projectcss.all,
                projectcss.a,
                sty.link__keVLx
              )}
              component={Link}
              href={"/podcasters" as const}
              platform={"nextjs"}
            >
              {(
                hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
              ) ? (
                <h5
                  className={classNames(
                    projectcss.all,
                    projectcss.h5,
                    projectcss.__wab_text,
                    sty.h5__klP7T
                  )}
                >
                  {hasVariant(globalVariants, "screen", "mobileOnly")
                    ? "Features"
                    : "Features"}
                </h5>
              ) : null}

              <p.PlasmicLink
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  sty.link___24Qp1
                )}
                component={Link}
                href={"/podcasters" as const}
                platform={"nextjs"}
              >
                {(
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? true
                    : true
                ) ? (
                  <h5
                    className={classNames(
                      projectcss.all,
                      projectcss.h5,
                      projectcss.__wab_text,
                      sty.h5__rOhhe
                    )}
                  >
                    {hasVariant(globalVariants, "screen", "mobileOnly")
                      ? "Podcaster Wallet"
                      : "Podcasters"}
                  </h5>
                ) : null}
              </p.PlasmicLink>

              <p.PlasmicLink
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  sty.link__m7Hix
                )}
                component={Link}
                platform={"nextjs"}
              >
                {(
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? true
                    : true
                ) ? (
                  <h5
                    className={classNames(
                      projectcss.all,
                      projectcss.h5,
                      projectcss.__wab_text,
                      sty.h5__eNyVi
                    )}
                  >
                    {hasVariant(globalVariants, "screen", "mobileOnly")
                      ? "Podcaster Wallet"
                      : "FAQs"}
                  </h5>
                ) : null}
              </p.PlasmicLink>

              <p.PlasmicLink
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  sty.link__mfNan
                )}
                component={Link}
                href={"https://explore.fountain.fm/" as const}
                platform={"nextjs"}
              >
                {(
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? true
                    : true
                ) ? (
                  <h5
                    className={classNames(
                      projectcss.all,
                      projectcss.h5,
                      projectcss.__wab_text,
                      sty.h5__qkWbg
                    )}
                  >
                    {hasVariant(globalVariants, "screen", "mobileOnly")
                      ? "Podcaster Wallet"
                      : "Blog"}
                  </h5>
                ) : null}
              </p.PlasmicLink>
            </p.PlasmicLink>

            {(
              hasVariant(globalVariants, "screen", "mobileOnly") ? true : false
            ) ? (
              <h5
                className={classNames(
                  projectcss.all,
                  projectcss.h5,
                  projectcss.__wab_text,
                  sty.h5__pmAgE
                )}
              >
                {hasVariant(globalVariants, "screen", "mobileOnly")
                  ? "Features"
                  : "Podcaster Wallet"}
              </h5>
            ) : null}
            {(
              hasVariant(globalVariants, "screen", "mobileOnly") ? true : false
            ) ? (
              <h5
                className={classNames(
                  projectcss.all,
                  projectcss.h5,
                  projectcss.__wab_text,
                  sty.h5__yuqso
                )}
              >
                {hasVariant(globalVariants, "screen", "mobileOnly")
                  ? "Podcasters"
                  : "Podcaster Wallet"}
              </h5>
            ) : null}
            {(
              hasVariant(globalVariants, "screen", "mobileOnly") ? true : false
            ) ? (
              <h5
                className={classNames(
                  projectcss.all,
                  projectcss.h5,
                  projectcss.__wab_text,
                  sty.h5__toTbv
                )}
              >
                {hasVariant(globalVariants, "screen", "mobileOnly")
                  ? "FAQs"
                  : "Podcaster Wallet"}
              </h5>
            ) : null}
            {(
              hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
            ) ? (
              <Button
                data-plasmic-name={"button"}
                data-plasmic-override={overrides.button}
                className={classNames("__wab_instance", sty.button)}
                color={"softSand" as const}
                shape={"rounded" as const}
                showEndIcon={true}
              >
                {(
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? true
                    : true
                ) ? (
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__dqvO
                    )}
                  >
                    {hasVariant(globalVariants, "screen", "mobileOnly") ? (
                      "Get Fountain"
                    ) : (
                      <React.Fragment>
                        <React.Fragment>{""}</React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ color: "#000000" }}
                        >
                          {"Join Fountain"}
                        </span>
                        <React.Fragment>{""}</React.Fragment>
                      </React.Fragment>
                    )}
                  </div>
                ) : null}
              </Button>
            ) : null}
            {(
              hasVariant(globalVariants, "screen", "mobileOnly") ? true : false
            ) ? (
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__rQmSa
                )}
              >
                {hasVariant(globalVariants, "screen", "mobileOnly")
                  ? "Get Fountain"
                  : "Get Fountain"}
              </div>
            ) : null}
          </React.Fragment>
        }
        openButton={
          <React.Fragment>
            {(
              hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
            ) ? (
              <p.PlasmicImg
                alt={""}
                className={classNames(sty.img__n7Uj)}
                displayHeight={"auto" as const}
                displayMaxHeight={"none" as const}
                displayMaxWidth={"none" as const}
                displayMinHeight={"0" as const}
                displayMinWidth={"0" as const}
                displayWidth={"auto" as const}
                src={"https://static1.plasmic.app/menu.svg" as const}
              />
            ) : null}
            {(
              hasVariant(globalVariants, "screen", "mobileOnly") ? true : false
            ) ? (
              <p.PlasmicImg
                alt={""}
                className={classNames(sty.img__pbNh)}
                displayHeight={
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? ("28px" as const)
                    : ("28px" as const)
                }
                displayMaxHeight={"none" as const}
                displayMaxWidth={
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? ("100%" as const)
                    : ("100%" as const)
                }
                displayMinHeight={"0" as const}
                displayMinWidth={"0" as const}
                displayWidth={
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? ("39px" as const)
                    : ("39px" as const)
                }
                loading={
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? ("lazy" as const)
                    : ("lazy" as const)
                }
                src={
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? {
                        src: "/plasmic/copy_of_fountain_listen_to_earn/images/image36.png",
                        fullWidth: 768,
                        fullHeight: 768,
                        aspectRatio: undefined
                      }
                    : {
                        src: "/plasmic/copy_of_fountain_listen_to_earn/images/image36.png",
                        fullWidth: 768,
                        fullHeight: 768,
                        aspectRatio: undefined
                      }
                }
              />
            ) : null}
            {(
              hasVariant(globalVariants, "screen", "mobileOnly") ? true : false
            ) ? (
              <p.PlasmicImg
                alt={""}
                className={classNames(sty.img__q0G0E)}
                displayHeight={
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? ("28px" as const)
                    : ("28px" as const)
                }
                displayMaxHeight={"none" as const}
                displayMaxWidth={
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? ("100%" as const)
                    : ("100%" as const)
                }
                displayMinHeight={"0" as const}
                displayMinWidth={"0" as const}
                displayWidth={
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? ("39px" as const)
                    : ("39px" as const)
                }
                loading={
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? ("lazy" as const)
                    : ("lazy" as const)
                }
                src={
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? {
                        src: "/plasmic/copy_of_fountain_listen_to_earn/images/icons8Menu48Png.png",
                        fullWidth: 48,
                        fullHeight: 48,
                        aspectRatio: undefined
                      }
                    : {
                        src: "/plasmic/copy_of_fountain_listen_to_earn/images/image36.png",
                        fullWidth: 768,
                        fullHeight: 768,
                        aspectRatio: undefined
                      }
                }
              />
            ) : null}
          </React.Fragment>
        }
        responsiveBreakpoint={768 as const}
      />
    ) : null
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "svg", "button"],
  svg: ["svg"],
  button: ["button"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: typeof NavigationBar;
  svg: "svg";
  button: typeof Button;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicNavBarMain__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicNavBarMain__VariantsArgs;
    args?: PlasmicNavBarMain__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicNavBarMain__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicNavBarMain__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicNavBarMain__ArgProps,
      internalVariantPropNames: PlasmicNavBarMain__VariantProps
    });

    return PlasmicNavBarMain__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicNavBarMain";
  } else {
    func.displayName = `PlasmicNavBarMain.${nodeName}`;
  }
  return func;
}

export const PlasmicNavBarMain = Object.assign(
  // Top-level PlasmicNavBarMain renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    svg: makeNodeComponent("svg"),
    button: makeNodeComponent("button"),

    // Metadata about props expected for PlasmicNavBarMain
    internalVariantProps: PlasmicNavBarMain__VariantProps,
    internalArgProps: PlasmicNavBarMain__ArgProps
  }
);

export default PlasmicNavBarMain;
/* prettier-ignore-end */
