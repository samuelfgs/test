// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 6BobAUw5T3TCqT8ypcszbG
// Component: 7JTiGas0Jk-_sl
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import BlogPosts from "../../BlogPosts"; // plasmic-import: n3aIYan7r0SEV/component
import Navbar from "../../Navbar"; // plasmic-import: uTDo8cXNPa_B1XC/component
import CantFindWhatYoureLookingFor from "../../CantFindWhatYoureLookingFor"; // plasmic-import: krEvZIR-QOuhWpu/component
import Footer from "../../Footer"; // plasmic-import: nmBaA0odzpiNWE/component
import { Reveal } from "@plasmicpkgs/react-awesome-reveal"; // plasmic-import: R6s1FdhksG/codeComponent

import { useScreenVariants as useScreenVariantsuXvTXvy0VuZNuyJ } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: UXvTXvy0VuZNuyJ/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_fountain_fm_css from "../fountain_fm/plasmic_fountain_fm.module.css"; // plasmic-import: q7mc6yKyK23FBh7x1aGwnG/projectcss
import projectcss from "./plasmic_copy_of_fountain_listen_to_earn.module.css"; // plasmic-import: 6BobAUw5T3TCqT8ypcszbG/projectcss
import sty from "./PlasmicFaqValueForValue.module.css"; // plasmic-import: 7JTiGas0Jk-_sl/css

import Icon8Icon from "./icons/PlasmicIcon__Icon8"; // plasmic-import: a-uf39TcX85gUT/icon

export type PlasmicFaqValueForValue__VariantMembers = {};

export type PlasmicFaqValueForValue__VariantsArgs = {};
type VariantPropType = keyof PlasmicFaqValueForValue__VariantsArgs;
export const PlasmicFaqValueForValue__VariantProps =
  new Array<VariantPropType>();

export type PlasmicFaqValueForValue__ArgsType = {};
type ArgPropType = keyof PlasmicFaqValueForValue__ArgsType;
export const PlasmicFaqValueForValue__ArgProps = new Array<ArgPropType>();

export type PlasmicFaqValueForValue__OverridesType = {
  root?: p.Flex<"div">;
  foreground9?: p.Flex<"div">;
  foreground8?: p.Flex<"div">;
  section?: p.Flex<"section">;
  foreground?: p.Flex<"div">;
  blogPosts?: p.Flex<typeof BlogPosts>;
  navbar?: p.Flex<typeof Navbar>;
  h2?: p.Flex<"h2">;
  cantFindWhatYoureLookingFor?: p.Flex<typeof CantFindWhatYoureLookingFor>;
  footer?: p.Flex<typeof Footer>;
  reveal?: p.Flex<typeof Reveal>;
};

export interface DefaultFaqValueForValueProps {}

export const defaultFaqValueForValue__Args: Partial<PlasmicFaqValueForValue__ArgsType> =
  {};

function PlasmicFaqValueForValue__RenderFunc(props: {
  variants: PlasmicFaqValueForValue__VariantsArgs;
  args: PlasmicFaqValueForValue__ArgsType;
  overrides: PlasmicFaqValueForValue__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const args = Object.assign({}, defaultFaqValueForValue__Args, props.args);
  const $props = args;
  const $ctx = ph.useDataEnv?.() || {};

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsuXvTXvy0VuZNuyJ()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{"FAQ Item"}</title>
        <meta key="og:title" property="og:title" content={"FAQ Item"} />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        {true ? (
          <p.Stack
            as={"div"}
            data-plasmic-name={"root"}
            data-plasmic-override={overrides.root}
            data-plasmic-root={true}
            data-plasmic-for-node={forNode}
            hasGap={true}
            className={classNames(
              projectcss.all,
              projectcss.root_reset,
              projectcss.plasmic_default_styles,
              projectcss.plasmic_mixins,
              projectcss.plasmic_tokens,
              plasmic_fountain_fm_css.plasmic_tokens,
              sty.root
            )}
          >
            {true ? (
              <div className={classNames(projectcss.all, sty.freeBox__oqxiv)}>
                {(
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? true
                    : false
                ) ? (
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__qTbvJ)}
                  >
                    <p.Stack
                      as={"div"}
                      data-plasmic-name={"foreground9"}
                      data-plasmic-override={overrides.foreground9}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.foreground9)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__uANhB
                        )}
                      >
                        {"What you can do on Fountain"}
                      </div>
                    </p.Stack>

                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___1PGee
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__lU96O
                        )}
                      >
                        <p.PlasmicImg
                          alt={""}
                          className={classNames(sty.img__qoDyV)}
                          displayHeight={"60px" as const}
                          displayMaxHeight={"none" as const}
                          displayMaxWidth={"100%" as const}
                          displayMinHeight={"0" as const}
                          displayMinWidth={"0" as const}
                          displayWidth={"auto" as const}
                          loading={"lazy" as const}
                          src={{
                            src: "/plasmic/copy_of_fountain_listen_to_earn/images/image43.png",
                            fullWidth: 200,
                            fullHeight: 200,
                            aspectRatio: undefined
                          }}
                        />
                      </div>

                      {false ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__eNDz
                          )}
                        >
                          <Icon8Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__ozVQw
                            )}
                            role={"img"}
                          />
                        </div>
                      ) : null}

                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__tYlyj
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___4ECrh
                          )}
                        >
                          {"EARN"}
                        </div>

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__aZ1Pr
                          )}
                        >
                          {"Get paid to listen to podcasts"}
                        </div>
                      </p.Stack>
                    </p.Stack>

                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__aYD5)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__ekaKy
                        )}
                      >
                        <p.PlasmicImg
                          alt={""}
                          className={classNames(sty.img__x2PEj)}
                          displayHeight={"60px" as const}
                          displayMaxHeight={"none" as const}
                          displayMaxWidth={"100%" as const}
                          displayMinHeight={"0" as const}
                          displayMinWidth={"0" as const}
                          displayWidth={"auto" as const}
                          loading={"lazy" as const}
                          src={{
                            src: "/plasmic/copy_of_fountain_listen_to_earn/images/image44.png",
                            fullWidth: 200,
                            fullHeight: 200,
                            aspectRatio: undefined
                          }}
                        />
                      </div>

                      {false ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__tt0Uq
                          )}
                        >
                          <Icon8Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__vdVuc
                            )}
                            role={"img"}
                          />
                        </div>
                      ) : null}

                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__j7Ni2
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__dr62K
                          )}
                        >
                          {"SUPPORT"}
                        </div>

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__vo3Qs
                          )}
                        >
                          {"Give back to podcasts you love"}
                        </div>
                      </p.Stack>
                    </p.Stack>

                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___9UslN
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__il5Dk
                        )}
                      >
                        <p.PlasmicImg
                          alt={""}
                          className={classNames(sty.img__wDFjD)}
                          displayHeight={"60px" as const}
                          displayMaxHeight={"none" as const}
                          displayMaxWidth={"100%" as const}
                          displayMinHeight={"0" as const}
                          displayMinWidth={"0" as const}
                          displayWidth={"auto" as const}
                          loading={"lazy" as const}
                          src={{
                            src: "/plasmic/copy_of_fountain_listen_to_earn/images/image45.png",
                            fullWidth: 200,
                            fullHeight: 200,
                            aspectRatio: undefined
                          }}
                        />
                      </div>

                      {false ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__tpGyQ
                          )}
                        >
                          <Icon8Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__a1QT
                            )}
                            role={"img"}
                          />
                        </div>
                      ) : null}

                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__dRPx6
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__rIOhy
                          )}
                        >
                          {"SHARE"}
                        </div>

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___6Shtb
                          )}
                        >
                          {"Share podcasts with friends"}
                        </div>
                      </p.Stack>
                    </p.Stack>
                  </p.Stack>
                ) : null}
                {true ? (
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__d9Xci)}
                  >
                    <p.Stack
                      as={"div"}
                      data-plasmic-name={"foreground8"}
                      data-plasmic-override={overrides.foreground8}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.foreground8)}
                    >
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__lqNlS
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox___4Jlx
                          )}
                        >
                          <p.PlasmicImg
                            alt={""}
                            className={classNames(sty.img__zxrAg)}
                            displayHeight={"56px" as const}
                            displayMaxHeight={"none" as const}
                            displayMaxWidth={"none" as const}
                            displayMinHeight={"0" as const}
                            displayMinWidth={"0" as const}
                            displayWidth={"56px" as const}
                            src={
                              "https://emojipedia-us.s3.dualstack.us-west-1.amazonaws.com/thumbs/144/twitter/281/red-apple_1f34e.png" as const
                            }
                          />
                        </div>

                        {false ? (
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__lv5Jy
                            )}
                          >
                            <Icon8Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg__rhWqr
                              )}
                              role={"img"}
                            />
                          </div>
                        ) : null}

                        <p.Stack
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox___1SIhX
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__sfxXn
                            )}
                          >
                            {"EARN"}
                          </div>

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__pxIlL
                            )}
                          >
                            {"Get paid to listen to podcasts"}
                          </div>
                        </p.Stack>
                      </p.Stack>

                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__lWKhO
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__cIlek
                          )}
                        >
                          <p.PlasmicImg
                            alt={""}
                            className={classNames(sty.img__zewHg)}
                            displayHeight={"56px" as const}
                            displayMaxHeight={"none" as const}
                            displayMaxWidth={"none" as const}
                            displayMinHeight={"0" as const}
                            displayMinWidth={"0" as const}
                            displayWidth={"56px" as const}
                            src={
                              "https://emojipedia-us.s3.dualstack.us-west-1.amazonaws.com/thumbs/144/twitter/281/banana_1f34c.png" as const
                            }
                          />
                        </div>

                        {false ? (
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__nxQf5
                            )}
                          >
                            <Icon8Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg___2OlE6
                              )}
                              role={"img"}
                            />
                          </div>
                        ) : null}

                        <p.Stack
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox___76Waw
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__e3C1M
                            )}
                          >
                            {"SUPPORT"}
                          </div>

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__q1CFv
                            )}
                          >
                            {"Give back to podcasts you love"}
                          </div>
                        </p.Stack>
                      </p.Stack>

                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__xBHbO
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__v85OU
                          )}
                        >
                          <p.PlasmicImg
                            alt={""}
                            className={classNames(sty.img___3Vsoh)}
                            displayHeight={"56px" as const}
                            displayMaxHeight={"none" as const}
                            displayMaxWidth={"none" as const}
                            displayMinHeight={"0" as const}
                            displayMinWidth={"0" as const}
                            displayWidth={"56px" as const}
                            src={
                              "https://emojipedia-us.s3.dualstack.us-west-1.amazonaws.com/thumbs/144/twitter/281/cherries_1f352.png" as const
                            }
                          />
                        </div>

                        {false ? (
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__pCkSq
                            )}
                          >
                            <Icon8Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg__x8FoP
                              )}
                              role={"img"}
                            />
                          </div>
                        ) : null}

                        <p.Stack
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__rrBrw
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__isNs4
                            )}
                          >
                            {"SHARE"}
                          </div>

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__uoSp
                            )}
                          >
                            {"Share podcasts with others"}
                          </div>
                        </p.Stack>
                      </p.Stack>
                    </p.Stack>
                  </p.Stack>
                ) : null}
                {true ? (
                  <section
                    data-plasmic-name={"section"}
                    data-plasmic-override={overrides.section}
                    className={classNames(projectcss.all, sty.section)}
                  >
                    <p.Stack
                      as={"div"}
                      data-plasmic-name={"foreground"}
                      data-plasmic-override={overrides.foreground}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.foreground)}
                    >
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__z0N4D
                        )}
                      >
                        <p.Stack
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__dU7Md
                          )}
                        >
                          <p.Stack
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__kwE2U
                            )}
                          >
                            {false ? (
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox___6Bxe8
                                )}
                              >
                                <Icon8Icon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__rTlqf
                                  )}
                                  role={"img"}
                                />
                              </div>
                            ) : null}

                            <p.Stack
                              as={"div"}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__sbwsP
                              )}
                            >
                              <p.PlasmicImg
                                alt={""}
                                className={classNames(sty.img__ug7Rf)}
                                displayHeight={"auto" as const}
                                displayMaxHeight={"none" as const}
                                displayMaxWidth={"100%" as const}
                                displayMinHeight={"0" as const}
                                displayMinWidth={"0" as const}
                                displayWidth={"auto" as const}
                                loading={"lazy" as const}
                                src={{
                                  src: "/plasmic/copy_of_fountain_listen_to_earn/images/image25.jpeg",
                                  fullWidth: 200,
                                  fullHeight: 200,
                                  aspectRatio: undefined
                                }}
                              />

                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__pxrFa
                                )}
                              >
                                {"Earn"}
                              </div>

                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__huoBe
                                )}
                              >
                                {"Get paid to listen to podcasts"}
                              </div>
                            </p.Stack>
                          </p.Stack>

                          <p.Stack
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__uNUzW
                            )}
                          >
                            {false ? (
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__t5UZq
                                )}
                              >
                                <Icon8Icon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__fbG8
                                  )}
                                  role={"img"}
                                />
                              </div>
                            ) : null}

                            <p.Stack
                              as={"div"}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__oKVfI
                              )}
                            >
                              <p.PlasmicImg
                                alt={""}
                                className={classNames(sty.img__bxtlT)}
                                displayHeight={"223px" as const}
                                displayMaxHeight={"none" as const}
                                displayMaxWidth={
                                  hasVariant(
                                    globalVariants,
                                    "screen",
                                    "mobileOnly"
                                  )
                                    ? ("100%" as const)
                                    : ("100%" as const)
                                }
                                displayMinHeight={"0" as const}
                                displayMinWidth={"0" as const}
                                displayWidth={"auto" as const}
                                loading={
                                  hasVariant(
                                    globalVariants,
                                    "screen",
                                    "mobileOnly"
                                  )
                                    ? ("lazy" as const)
                                    : ("lazy" as const)
                                }
                                src={
                                  hasVariant(
                                    globalVariants,
                                    "screen",
                                    "mobileOnly"
                                  )
                                    ? {
                                        src: "/plasmic/copy_of_fountain_listen_to_earn/images/image26.jpeg",
                                        fullWidth: 200,
                                        fullHeight: 200,
                                        aspectRatio: undefined
                                      }
                                    : {
                                        src: "/plasmic/copy_of_fountain_listen_to_earn/images/image26.jpeg",
                                        fullWidth: 200,
                                        fullHeight: 200,
                                        aspectRatio: undefined
                                      }
                                }
                              />

                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__dUrVq
                                )}
                              >
                                {"Support"}
                              </div>

                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__etWyI
                                )}
                              >
                                {"Give back to podcasts you love"}
                              </div>
                            </p.Stack>
                          </p.Stack>

                          <p.Stack
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox___4LPOh
                            )}
                          >
                            {false ? (
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox___4DKwF
                                )}
                              >
                                <Icon8Icon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__v5Fq
                                  )}
                                  role={"img"}
                                />
                              </div>
                            ) : null}

                            <p.Stack
                              as={"div"}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__guYd7
                              )}
                            >
                              <p.PlasmicImg
                                alt={""}
                                className={classNames(sty.img__tl4TF)}
                                displayHeight={"222px" as const}
                                displayMaxHeight={"none" as const}
                                displayMaxWidth={"100%" as const}
                                displayMinHeight={"0" as const}
                                displayMinWidth={"0" as const}
                                displayWidth={"auto" as const}
                                loading={"lazy" as const}
                                src={{
                                  src: "/plasmic/copy_of_fountain_listen_to_earn/images/image27.jpeg",
                                  fullWidth: 200,
                                  fullHeight: 200,
                                  aspectRatio: undefined
                                }}
                              />

                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__jgaqs
                                )}
                              >
                                {"Share"}
                              </div>

                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text___0QUrr
                                )}
                              >
                                {"Share podcasts with others"}
                              </div>
                            </p.Stack>
                          </p.Stack>
                        </p.Stack>
                      </p.Stack>
                    </p.Stack>
                  </section>
                ) : null}
              </div>
            ) : null}
            {true ? (
              <BlogPosts
                data-plasmic-name={"blogPosts"}
                data-plasmic-override={overrides.blogPosts}
                className={classNames("__wab_instance", sty.blogPosts)}
              />
            ) : null}

            <Navbar
              data-plasmic-name={"navbar"}
              data-plasmic-override={overrides.navbar}
              className={classNames("__wab_instance", sty.navbar)}
            />

            <div className={classNames(projectcss.all, sty.freeBox___0R0Jr)}>
              {true ? (
                <div className={classNames(projectcss.all, sty.freeBox__bC9O)}>
                  <p.PlasmicLink
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      sty.link__jSMus
                    )}
                    component={Link}
                    href={"/faqs" as const}
                    platform={"nextjs"}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__pynri
                      )}
                    >
                      {"< FAQ"}
                    </div>
                  </p.PlasmicLink>

                  <div
                    className={classNames(projectcss.all, sty.freeBox__uA8R)}
                  >
                    <h2
                      data-plasmic-name={"h2"}
                      data-plasmic-override={overrides.h2}
                      className={classNames(
                        projectcss.all,
                        projectcss.h2,
                        projectcss.__wab_text,
                        sty.h2
                      )}
                    >
                      {"What is Value for Value?"}
                    </h2>

                    <h6
                      className={classNames(
                        projectcss.all,
                        projectcss.h6,
                        projectcss.__wab_text,
                        sty.h6__x3AYg
                      )}
                    >
                      {
                        "The Value for Value model was conceived by Adam Curry and John C. Dvorak. It is built on the premise that content should free and available to everyone. If the audience gets value from the content, they can choose to send some value back to the creator - depending on how much it is worth to them.\n\nValue for Value is just one of many features of Podcasting 2.0 - a movement spearheaded by Podcast Index to protect, extend and serve the open, independent podcasting ecosystem. We are product to partner with Podcast Index to deliver new features that improve the podcasting experience for listeners - and for the creators themselves."
                      }
                    </h6>

                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___9Vucc
                      )}
                    >
                      <h6
                        className={classNames(
                          projectcss.all,
                          projectcss.h6,
                          projectcss.__wab_text,
                          sty.h6__qNA2
                        )}
                      >
                        <React.Fragment>
                          <React.Fragment>{""}</React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{ color: "#000000", fontWeight: 700 }}
                          >
                            {"Next"}
                          </span>
                          <React.Fragment>{""}</React.Fragment>
                        </React.Fragment>
                      </h6>

                      <p.PlasmicLink
                        className={classNames(
                          projectcss.all,
                          projectcss.a,
                          sty.link__hfLb7
                        )}
                        component={Link}
                        href={"/faqs/support-podcast" as const}
                        platform={"nextjs"}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__xJWgC
                          )}
                        >
                          {"How do I support a podcast?"}
                        </div>
                      </p.PlasmicLink>
                    </div>
                  </div>
                </div>
              ) : null}
            </div>

            <CantFindWhatYoureLookingFor
              data-plasmic-name={"cantFindWhatYoureLookingFor"}
              data-plasmic-override={overrides.cantFindWhatYoureLookingFor}
              className={classNames(
                "__wab_instance",
                sty.cantFindWhatYoureLookingFor
              )}
            />

            <Footer
              data-plasmic-name={"footer"}
              data-plasmic-override={overrides.footer}
              className={classNames("__wab_instance", sty.footer)}
            />

            {true ? (
              <Reveal
                data-plasmic-name={"reveal"}
                data-plasmic-override={overrides.reveal}
                className={classNames("__wab_instance", sty.reveal)}
                triggerOnce={true}
              >
                {true ? (
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__pjVby)}
                    displayHeight={"auto" as const}
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"none" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"auto" as const}
                    src={"https://placekitten.com/300/200" as const}
                  />
                ) : null}
              </Reveal>
            ) : null}
          </p.Stack>
        ) : null}
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "foreground9",
    "foreground8",
    "section",
    "foreground",
    "blogPosts",
    "navbar",
    "h2",
    "cantFindWhatYoureLookingFor",
    "footer",
    "reveal"
  ],
  foreground9: ["foreground9"],
  foreground8: ["foreground8"],
  section: ["section", "foreground"],
  foreground: ["foreground"],
  blogPosts: ["blogPosts"],
  navbar: ["navbar"],
  h2: ["h2"],
  cantFindWhatYoureLookingFor: ["cantFindWhatYoureLookingFor"],
  footer: ["footer"],
  reveal: ["reveal"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  foreground9: "div";
  foreground8: "div";
  section: "section";
  foreground: "div";
  blogPosts: typeof BlogPosts;
  navbar: typeof Navbar;
  h2: "h2";
  cantFindWhatYoureLookingFor: typeof CantFindWhatYoureLookingFor;
  footer: typeof Footer;
  reveal: typeof Reveal;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicFaqValueForValue__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicFaqValueForValue__VariantsArgs;
    args?: PlasmicFaqValueForValue__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicFaqValueForValue__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicFaqValueForValue__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicFaqValueForValue__ArgProps,
      internalVariantPropNames: PlasmicFaqValueForValue__VariantProps
    });

    return PlasmicFaqValueForValue__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicFaqValueForValue";
  } else {
    func.displayName = `PlasmicFaqValueForValue.${nodeName}`;
  }
  return func;
}

export const PlasmicFaqValueForValue = Object.assign(
  // Top-level PlasmicFaqValueForValue renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    foreground9: makeNodeComponent("foreground9"),
    foreground8: makeNodeComponent("foreground8"),
    section: makeNodeComponent("section"),
    foreground: makeNodeComponent("foreground"),
    blogPosts: makeNodeComponent("blogPosts"),
    navbar: makeNodeComponent("navbar"),
    h2: makeNodeComponent("h2"),
    cantFindWhatYoureLookingFor: makeNodeComponent(
      "cantFindWhatYoureLookingFor"
    ),
    footer: makeNodeComponent("footer"),
    reveal: makeNodeComponent("reveal"),

    // Metadata about props expected for PlasmicFaqValueForValue
    internalVariantProps: PlasmicFaqValueForValue__VariantProps,
    internalArgProps: PlasmicFaqValueForValue__ArgProps
  }
);

export default PlasmicFaqValueForValue;
/* prettier-ignore-end */
