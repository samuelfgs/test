// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 6BobAUw5T3TCqT8ypcszbG
// Component: gZFQK6Q0v0VHZf
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import BlogPosts from "../../BlogPosts"; // plasmic-import: n3aIYan7r0SEV/component
import Navbar from "../../Navbar"; // plasmic-import: uTDo8cXNPa_B1XC/component
import Button from "../../Button"; // plasmic-import: KhbeBVaAisx47/component
import Footer from "../../Footer"; // plasmic-import: nmBaA0odzpiNWE/component
import { Reveal } from "@plasmicpkgs/react-awesome-reveal"; // plasmic-import: R6s1FdhksG/codeComponent

import { useScreenVariants as useScreenVariantsuXvTXvy0VuZNuyJ } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: UXvTXvy0VuZNuyJ/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_fountain_fm_css from "../fountain_fm/plasmic_fountain_fm.module.css"; // plasmic-import: q7mc6yKyK23FBh7x1aGwnG/projectcss
import projectcss from "./plasmic_copy_of_fountain_listen_to_earn.module.css"; // plasmic-import: 6BobAUw5T3TCqT8ypcszbG/projectcss
import sty from "./Plasmic_5JoinFountain.module.css"; // plasmic-import: gZFQK6Q0v0VHZf/css

import Icon8Icon from "./icons/PlasmicIcon__Icon8"; // plasmic-import: a-uf39TcX85gUT/icon
import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: S2Divheo_3CFcy/icon
import Icon16Icon from "./icons/PlasmicIcon__Icon16"; // plasmic-import: cF5YAR91eQ2yTs/icon

export type Plasmic_5JoinFountain__VariantMembers = {};

export type Plasmic_5JoinFountain__VariantsArgs = {};
type VariantPropType = keyof Plasmic_5JoinFountain__VariantsArgs;
export const Plasmic_5JoinFountain__VariantProps = new Array<VariantPropType>();

export type Plasmic_5JoinFountain__ArgsType = {};
type ArgPropType = keyof Plasmic_5JoinFountain__ArgsType;
export const Plasmic_5JoinFountain__ArgProps = new Array<ArgPropType>();

export type Plasmic_5JoinFountain__OverridesType = {
  root?: p.Flex<"div">;
  foreground9?: p.Flex<"div">;
  foreground8?: p.Flex<"div">;
  foreground?: p.Flex<"div">;
  blogPosts?: p.Flex<typeof BlogPosts>;
  navbar?: p.Flex<typeof Navbar>;
  foreground2?: p.Flex<"div">;
  h3?: p.Flex<"h3">;
  button?: p.Flex<typeof Button>;
  foreground3?: p.Flex<"div">;
  foreground4?: p.Flex<"div">;
  footer?: p.Flex<typeof Footer>;
  reveal?: p.Flex<typeof Reveal>;
};

export interface Default_5JoinFountainProps {}

export const default_5JoinFountain__Args: Partial<Plasmic_5JoinFountain__ArgsType> =
  {};

function Plasmic_5JoinFountain__RenderFunc(props: {
  variants: Plasmic_5JoinFountain__VariantsArgs;
  args: Plasmic_5JoinFountain__ArgsType;
  overrides: Plasmic_5JoinFountain__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const args = Object.assign({}, default_5JoinFountain__Args, props.args);
  const $props = args;
  const $ctx = ph.useDataEnv?.() || {};

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsuXvTXvy0VuZNuyJ()
  });

  return (
    <React.Fragment>
      {}

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        {true ? (
          <p.Stack
            as={"div"}
            data-plasmic-name={"root"}
            data-plasmic-override={overrides.root}
            data-plasmic-root={true}
            data-plasmic-for-node={forNode}
            hasGap={true}
            className={classNames(
              projectcss.all,
              projectcss.root_reset,
              projectcss.plasmic_default_styles,
              projectcss.plasmic_mixins,
              projectcss.plasmic_tokens,
              plasmic_fountain_fm_css.plasmic_tokens,
              sty.root
            )}
          >
            <div className={classNames(projectcss.all, sty.freeBox___3ZvSm)}>
              {(
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? true
                  : false
              ) ? (
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox___7PTx0)}
                >
                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"foreground9"}
                    data-plasmic-override={overrides.foreground9}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.foreground9)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___5TI9
                      )}
                    >
                      {"What you can do on Fountain"}
                    </div>
                  </p.Stack>

                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__vsJH)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__fL9Lm)}
                    >
                      <p.PlasmicImg
                        alt={""}
                        className={classNames(sty.img__j8JXn)}
                        displayHeight={"60px" as const}
                        displayMaxHeight={"none" as const}
                        displayMaxWidth={"100%" as const}
                        displayMinHeight={"0" as const}
                        displayMinWidth={"0" as const}
                        displayWidth={"auto" as const}
                        loading={"lazy" as const}
                        src={{
                          src: "/plasmic/copy_of_fountain_listen_to_earn/images/image43.png",
                          fullWidth: 200,
                          fullHeight: 200,
                          aspectRatio: undefined
                        }}
                      />
                    </div>

                    {false ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__ioPuD
                        )}
                      >
                        <Icon8Icon
                          className={classNames(projectcss.all, sty.svg__r1Squ)}
                          role={"img"}
                        />
                      </div>
                    ) : null}

                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__idm56)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__b3XRs
                        )}
                      >
                        {"EARN"}
                      </div>

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__vxuW
                        )}
                      >
                        {"Get paid to listen to podcasts"}
                      </div>
                    </p.Stack>
                  </p.Stack>

                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__inrdi)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__ybkxz)}
                    >
                      <p.PlasmicImg
                        alt={""}
                        className={classNames(sty.img__j9NgQ)}
                        displayHeight={"60px" as const}
                        displayMaxHeight={"none" as const}
                        displayMaxWidth={"100%" as const}
                        displayMinHeight={"0" as const}
                        displayMinWidth={"0" as const}
                        displayWidth={"auto" as const}
                        loading={"lazy" as const}
                        src={{
                          src: "/plasmic/copy_of_fountain_listen_to_earn/images/image44.png",
                          fullWidth: 200,
                          fullHeight: 200,
                          aspectRatio: undefined
                        }}
                      />
                    </div>

                    {false ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__g6RW
                        )}
                      >
                        <Icon8Icon
                          className={classNames(projectcss.all, sty.svg__wRGxj)}
                          role={"img"}
                        />
                      </div>
                    ) : null}

                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___4Oacx
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__t3345
                        )}
                      >
                        {"SUPPORT"}
                      </div>

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__axcnr
                        )}
                      >
                        {"Give back to podcasts you love"}
                      </div>
                    </p.Stack>
                  </p.Stack>

                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__x0Loj)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___7Ymog
                      )}
                    >
                      <p.PlasmicImg
                        alt={""}
                        className={classNames(sty.img__cDX)}
                        displayHeight={"60px" as const}
                        displayMaxHeight={"none" as const}
                        displayMaxWidth={"100%" as const}
                        displayMinHeight={"0" as const}
                        displayMinWidth={"0" as const}
                        displayWidth={"auto" as const}
                        loading={"lazy" as const}
                        src={{
                          src: "/plasmic/copy_of_fountain_listen_to_earn/images/image45.png",
                          fullWidth: 200,
                          fullHeight: 200,
                          aspectRatio: undefined
                        }}
                      />
                    </div>

                    {false ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__n6FkN
                        )}
                      >
                        <Icon8Icon
                          className={classNames(projectcss.all, sty.svg__on3Vs)}
                          role={"img"}
                        />
                      </div>
                    ) : null}

                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___9XWvT
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__kEwIj
                        )}
                      >
                        {"SHARE"}
                      </div>

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__bsRqj
                        )}
                      >
                        {"Share podcasts with friends"}
                      </div>
                    </p.Stack>
                  </p.Stack>
                </p.Stack>
              ) : null}
              {true ? (
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox___9K8Wv)}
                >
                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"foreground8"}
                    data-plasmic-override={overrides.foreground8}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.foreground8)}
                  >
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__nNfuL)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__wHyJb
                        )}
                      >
                        <p.PlasmicImg
                          alt={""}
                          className={classNames(sty.img__p71T4)}
                          displayHeight={"56px" as const}
                          displayMaxHeight={"none" as const}
                          displayMaxWidth={"none" as const}
                          displayMinHeight={"0" as const}
                          displayMinWidth={"0" as const}
                          displayWidth={"56px" as const}
                          src={
                            "https://emojipedia-us.s3.dualstack.us-west-1.amazonaws.com/thumbs/144/twitter/281/red-apple_1f34e.png" as const
                          }
                        />
                      </div>

                      {false ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__w6G5T
                          )}
                        >
                          <Icon8Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__aXtrp
                            )}
                            role={"img"}
                          />
                        </div>
                      ) : null}

                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___9UQaN
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__p06Ib
                          )}
                        >
                          {"EARN"}
                        </div>

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__fqqNb
                          )}
                        >
                          {"Get paid to listen to podcasts"}
                        </div>
                      </p.Stack>
                    </p.Stack>

                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__lj5Eu)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__jZxKn
                        )}
                      >
                        <p.PlasmicImg
                          alt={""}
                          className={classNames(sty.img__kkWyl)}
                          displayHeight={"56px" as const}
                          displayMaxHeight={"none" as const}
                          displayMaxWidth={"none" as const}
                          displayMinHeight={"0" as const}
                          displayMinWidth={"0" as const}
                          displayWidth={"56px" as const}
                          src={
                            "https://emojipedia-us.s3.dualstack.us-west-1.amazonaws.com/thumbs/144/twitter/281/banana_1f34c.png" as const
                          }
                        />
                      </div>

                      {false ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__es2K8
                          )}
                        >
                          <Icon8Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__aCm3Q
                            )}
                            role={"img"}
                          />
                        </div>
                      ) : null}

                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__jJlf
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__ijQ5Z
                          )}
                        >
                          {"SUPPORT"}
                        </div>

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__kUx
                          )}
                        >
                          {"Give back to podcasts you love"}
                        </div>
                      </p.Stack>
                    </p.Stack>

                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___32Yws
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__iDb4V
                        )}
                      >
                        <p.PlasmicImg
                          alt={""}
                          className={classNames(sty.img__d3I4)}
                          displayHeight={"56px" as const}
                          displayMaxHeight={"none" as const}
                          displayMaxWidth={"none" as const}
                          displayMinHeight={"0" as const}
                          displayMinWidth={"0" as const}
                          displayWidth={"56px" as const}
                          src={
                            "https://emojipedia-us.s3.dualstack.us-west-1.amazonaws.com/thumbs/144/twitter/281/cherries_1f352.png" as const
                          }
                        />
                      </div>

                      {false ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__p6RdA
                          )}
                        >
                          <Icon8Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg___4NJCs
                            )}
                            role={"img"}
                          />
                        </div>
                      ) : null}

                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__wwTXj
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__w1Dq1
                          )}
                        >
                          {"SHARE"}
                        </div>

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__sNdb
                          )}
                        >
                          {"Share podcasts with others"}
                        </div>
                      </p.Stack>
                    </p.Stack>
                  </p.Stack>
                </p.Stack>
              ) : null}
              {true ? (
                <section
                  className={classNames(projectcss.all, sty.section__kleTx)}
                >
                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"foreground"}
                    data-plasmic-override={overrides.foreground}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.foreground)}
                  >
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__cORxr)}
                    >
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__nZp1
                        )}
                      >
                        <p.Stack
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__k5Ch
                          )}
                        >
                          {false ? (
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__vPoY
                              )}
                            >
                              <Icon8Icon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__b7E5L
                                )}
                                role={"img"}
                              />
                            </div>
                          ) : null}

                          <p.Stack
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox___5Eugq
                            )}
                          >
                            <p.PlasmicImg
                              alt={""}
                              className={classNames(sty.img__zieh)}
                              displayHeight={"auto" as const}
                              displayMaxHeight={"none" as const}
                              displayMaxWidth={"100%" as const}
                              displayMinHeight={"0" as const}
                              displayMinWidth={"0" as const}
                              displayWidth={"auto" as const}
                              loading={"lazy" as const}
                              src={{
                                src: "/plasmic/copy_of_fountain_listen_to_earn/images/image25.jpeg",
                                fullWidth: 200,
                                fullHeight: 200,
                                aspectRatio: undefined
                              }}
                            />

                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__mubiW
                              )}
                            >
                              {"Earn"}
                            </div>

                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__zXPbd
                              )}
                            >
                              {"Get paid to listen to podcasts"}
                            </div>
                          </p.Stack>
                        </p.Stack>

                        <p.Stack
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__svHnf
                          )}
                        >
                          {false ? (
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__nhIqu
                              )}
                            >
                              <Icon8Icon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__dyNuL
                                )}
                                role={"img"}
                              />
                            </div>
                          ) : null}

                          <p.Stack
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__bsn4G
                            )}
                          >
                            <p.PlasmicImg
                              alt={""}
                              className={classNames(sty.img__eXgCm)}
                              displayHeight={"223px" as const}
                              displayMaxHeight={"none" as const}
                              displayMaxWidth={
                                hasVariant(
                                  globalVariants,
                                  "screen",
                                  "mobileOnly"
                                )
                                  ? ("100%" as const)
                                  : ("100%" as const)
                              }
                              displayMinHeight={"0" as const}
                              displayMinWidth={"0" as const}
                              displayWidth={"auto" as const}
                              loading={
                                hasVariant(
                                  globalVariants,
                                  "screen",
                                  "mobileOnly"
                                )
                                  ? ("lazy" as const)
                                  : ("lazy" as const)
                              }
                              src={
                                hasVariant(
                                  globalVariants,
                                  "screen",
                                  "mobileOnly"
                                )
                                  ? {
                                      src: "/plasmic/copy_of_fountain_listen_to_earn/images/image26.jpeg",
                                      fullWidth: 200,
                                      fullHeight: 200,
                                      aspectRatio: undefined
                                    }
                                  : {
                                      src: "/plasmic/copy_of_fountain_listen_to_earn/images/image26.jpeg",
                                      fullWidth: 200,
                                      fullHeight: 200,
                                      aspectRatio: undefined
                                    }
                              }
                            />

                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__pmXF
                              )}
                            >
                              {"Support"}
                            </div>

                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__eyzfe
                              )}
                            >
                              {"Give back to podcasts you love"}
                            </div>
                          </p.Stack>
                        </p.Stack>

                        <p.Stack
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__jXmte
                          )}
                        >
                          {false ? (
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__tcWrx
                              )}
                            >
                              <Icon8Icon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__eyQic
                                )}
                                role={"img"}
                              />
                            </div>
                          ) : null}

                          <p.Stack
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__xixq
                            )}
                          >
                            <p.PlasmicImg
                              alt={""}
                              className={classNames(sty.img__be7Uz)}
                              displayHeight={"222px" as const}
                              displayMaxHeight={"none" as const}
                              displayMaxWidth={"100%" as const}
                              displayMinHeight={"0" as const}
                              displayMinWidth={"0" as const}
                              displayWidth={"auto" as const}
                              loading={"lazy" as const}
                              src={{
                                src: "/plasmic/copy_of_fountain_listen_to_earn/images/image27.jpeg",
                                fullWidth: 200,
                                fullHeight: 200,
                                aspectRatio: undefined
                              }}
                            />

                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__h3S7U
                              )}
                            >
                              {"Share"}
                            </div>

                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__jurA8
                              )}
                            >
                              {"Share podcasts with others"}
                            </div>
                          </p.Stack>
                        </p.Stack>
                      </p.Stack>
                    </p.Stack>
                  </p.Stack>
                </section>
              ) : null}
            </div>

            {true ? (
              <BlogPosts
                data-plasmic-name={"blogPosts"}
                data-plasmic-override={overrides.blogPosts}
                className={classNames("__wab_instance", sty.blogPosts)}
              />
            ) : null}

            <Navbar
              data-plasmic-name={"navbar"}
              data-plasmic-override={overrides.navbar}
              className={classNames("__wab_instance", sty.navbar)}
            />

            <div className={classNames(projectcss.all, sty.freeBox__t9NMh)}>
              {true ? (
                <p.Stack
                  as={"section"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.section__oeN)}
                >
                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"foreground2"}
                    data-plasmic-override={overrides.foreground2}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.foreground2)}
                  >
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__kj1Br)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___3IJ3N
                        )}
                      >
                        {"Podcaster Wallet"}
                      </div>

                      <h3
                        data-plasmic-name={"h3"}
                        data-plasmic-override={overrides.h3}
                        className={classNames(
                          projectcss.all,
                          projectcss.h3,
                          projectcss.__wab_text,
                          sty.h3
                        )}
                      >
                        {"Earning Bitcoin made easy for every podcaster\n"}
                      </h3>

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__ultp5
                        )}
                      >
                        {
                          "Getting your show on the Lightning Network and seeing all the data should be easy. However, no simple user-friendly solutions exist for podcasters today. That's why we're launching the Podcaster Wallet.\n\netc."
                        }
                      </div>

                      <Button
                        data-plasmic-name={"button"}
                        data-plasmic-override={overrides.button}
                        className={classNames("__wab_instance", sty.button)}
                        shape={"rounded" as const}
                        showEndIcon={true}
                      >
                        {"Get started"}
                      </Button>
                    </p.Stack>

                    <div
                      className={classNames(projectcss.all, sty.freeBox__wZtcF)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__anzfe
                        )}
                      >
                        <h5
                          className={classNames(
                            projectcss.all,
                            projectcss.h5,
                            projectcss.__wab_text,
                            sty.h5__t2LXt
                          )}
                        >
                          {"Join the Lightning Network in the Fountain app"}
                        </h5>

                        <Icon16Icon
                          className={classNames(projectcss.all, sty.svg__dsA)}
                          role={"img"}
                        />
                      </div>

                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__igAeR
                        )}
                      >
                        <h5
                          className={classNames(
                            projectcss.all,
                            projectcss.h5,
                            projectcss.__wab_text,
                            sty.h5__nvRh
                          )}
                        >
                          {"See your show's earnings and supporters"}
                        </h5>

                        <Icon16Icon
                          className={classNames(projectcss.all, sty.svg__iqVxh)}
                          role={"img"}
                        />
                      </div>

                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__gww4G
                        )}
                      >
                        <h5
                          className={classNames(
                            projectcss.all,
                            projectcss.h5,
                            projectcss.__wab_text,
                            sty.h5__gOOn
                          )}
                        >
                          {"Read and reply to messages from all apps"}
                        </h5>

                        <Icon16Icon
                          className={classNames(projectcss.all, sty.svg__opMdV)}
                          role={"img"}
                        />
                      </div>

                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__npTsd
                        )}
                      >
                        <h5
                          className={classNames(
                            projectcss.all,
                            projectcss.h5,
                            projectcss.__wab_text,
                            sty.h5__ebain
                          )}
                        >
                          {"Split your earnings with other users"}
                        </h5>

                        <Icon16Icon
                          className={classNames(projectcss.all, sty.svg__iYmG)}
                          role={"img"}
                        />
                      </div>
                    </div>
                  </p.Stack>
                </p.Stack>
              ) : null}

              <div className={classNames(projectcss.all, sty.freeBox__s7Bdk)}>
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__n9Ysb)}
                >
                  {(
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? true
                      : true
                  ) ? (
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__rUged)}
                    >
                      <p.Stack
                        as={"div"}
                        data-plasmic-name={"foreground3"}
                        data-plasmic-override={overrides.foreground3}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.foreground3)}
                      >
                        <h2
                          className={classNames(
                            projectcss.all,
                            projectcss.h2,
                            projectcss.__wab_text,
                            sty.h2__wMz6S
                          )}
                        >
                          {"Get the Fountain Podcasts app"}
                        </h2>

                        <h5
                          className={classNames(
                            projectcss.all,
                            projectcss.h5,
                            projectcss.__wab_text,
                            sty.h5__w4MjZ
                          )}
                        >
                          {
                            "Fountain is a more rewarding way to enjoy podcasts. \nDownload the Fountain Podcasts app now on iOS or Android."
                          }
                        </h5>

                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__rjkck
                          )}
                        >
                          <p.PlasmicLink
                            className={classNames(
                              projectcss.all,
                              projectcss.a,
                              sty.link__hvYPl
                            )}
                            component={Link}
                            href={
                              "https://apps.apple.com/gb/app/fountain-podcasts/id1576394424" as const
                            }
                            platform={"nextjs"}
                            target={"_blank" as const}
                          >
                            <p.PlasmicImg
                              alt={""}
                              className={classNames(sty.img__drU)}
                              displayHeight={"auto" as const}
                              displayMaxHeight={"none" as const}
                              displayMaxWidth={"100%" as const}
                              displayMinHeight={"0" as const}
                              displayMinWidth={"0" as const}
                              displayWidth={"auto" as const}
                              loading={"lazy" as const}
                              src={{
                                src: "/plasmic/copy_of_fountain_listen_to_earn/images/image48.webp",
                                fullWidth: 216,
                                fullHeight: 64,
                                aspectRatio: undefined
                              }}
                            />
                          </p.PlasmicLink>

                          <p.PlasmicLink
                            className={classNames(
                              projectcss.all,
                              projectcss.a,
                              sty.link___8Ramp
                            )}
                            component={Link}
                            href={
                              "https://play.google.com/store/apps/details?id=fm.fountain.apps" as const
                            }
                            platform={"nextjs"}
                            target={"_blank" as const}
                          >
                            <p.PlasmicImg
                              alt={""}
                              className={classNames(sty.img__vwP8A)}
                              displayHeight={"auto" as const}
                              displayMaxHeight={"none" as const}
                              displayMaxWidth={"100%" as const}
                              displayMinHeight={"0" as const}
                              displayMinWidth={"0" as const}
                              displayWidth={"auto" as const}
                              loading={"lazy" as const}
                              src={{
                                src: "/plasmic/copy_of_fountain_listen_to_earn/images/image49.webp",
                                fullWidth: 216,
                                fullHeight: 64,
                                aspectRatio: undefined
                              }}
                            />
                          </p.PlasmicLink>
                        </div>
                      </p.Stack>
                    </p.Stack>
                  ) : null}
                  {(
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? true
                      : false
                  ) ? (
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__lJ53U)}
                    >
                      <p.Stack
                        as={"div"}
                        data-plasmic-name={"foreground4"}
                        data-plasmic-override={overrides.foreground4}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.foreground4)}
                      >
                        <h2
                          className={classNames(
                            projectcss.all,
                            projectcss.h2,
                            projectcss.__wab_text,
                            sty.h2__r0VuM
                          )}
                        >
                          {"Get the Fountain Podcasts app"}
                        </h2>

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__kYuDq
                          )}
                        >
                          {
                            "Fountain is a more rewarding way to enjoy podcasts. Available now on iOS or Android."
                          }
                        </div>

                        {(
                          hasVariant(globalVariants, "screen", "mobileOnly")
                            ? true
                            : false
                        ) ? (
                          <p.PlasmicImg
                            alt={""}
                            className={classNames(sty.img__xhu9D)}
                            displayHeight={"77px" as const}
                            displayMaxHeight={"none" as const}
                            displayMaxWidth={"100%" as const}
                            displayMinHeight={"0" as const}
                            displayMinWidth={"0" as const}
                            displayWidth={"225px" as const}
                            loading={"lazy" as const}
                            src={{
                              src: "/plasmic/copy_of_fountain_listen_to_earn/images/image39.png",
                              fullWidth: 1920,
                              fullHeight: 670,
                              aspectRatio: undefined
                            }}
                          />
                        ) : null}
                        {(
                          hasVariant(globalVariants, "screen", "mobileOnly")
                            ? true
                            : false
                        ) ? (
                          <p.PlasmicImg
                            alt={""}
                            className={classNames(sty.img__jNal4)}
                            displayHeight={"77px" as const}
                            displayMaxHeight={"none" as const}
                            displayMaxWidth={"100%" as const}
                            displayMinHeight={"0" as const}
                            displayMinWidth={"0" as const}
                            displayWidth={"225px" as const}
                            loading={"lazy" as const}
                            src={{
                              src: "/plasmic/copy_of_fountain_listen_to_earn/images/image38.png",
                              fullWidth: 1920,
                              fullHeight: 670,
                              aspectRatio: undefined
                            }}
                          />
                        ) : null}
                      </p.Stack>
                    </p.Stack>
                  ) : null}
                </p.Stack>
              </div>
            </div>

            <Footer
              data-plasmic-name={"footer"}
              data-plasmic-override={overrides.footer}
              className={classNames("__wab_instance", sty.footer)}
            />

            <Reveal
              data-plasmic-name={"reveal"}
              data-plasmic-override={overrides.reveal}
              className={classNames("__wab_instance", sty.reveal)}
              triggerOnce={true}
            >
              {true ? (
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__c3L6B)}
                  displayHeight={"auto" as const}
                  displayMaxHeight={"none" as const}
                  displayMaxWidth={"none" as const}
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0" as const}
                  displayWidth={"auto" as const}
                  src={"https://placekitten.com/300/200" as const}
                />
              ) : null}
            </Reveal>
          </p.Stack>
        ) : null}
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "foreground9",
    "foreground8",
    "foreground",
    "blogPosts",
    "navbar",
    "foreground2",
    "h3",
    "button",
    "foreground3",
    "foreground4",
    "footer",
    "reveal"
  ],
  foreground9: ["foreground9"],
  foreground8: ["foreground8"],
  foreground: ["foreground"],
  blogPosts: ["blogPosts"],
  navbar: ["navbar"],
  foreground2: ["foreground2", "h3", "button"],
  h3: ["h3"],
  button: ["button"],
  foreground3: ["foreground3"],
  foreground4: ["foreground4"],
  footer: ["footer"],
  reveal: ["reveal"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  foreground9: "div";
  foreground8: "div";
  foreground: "div";
  blogPosts: typeof BlogPosts;
  navbar: typeof Navbar;
  foreground2: "div";
  h3: "h3";
  button: typeof Button;
  foreground3: "div";
  foreground4: "div";
  footer: typeof Footer;
  reveal: typeof Reveal;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  Plasmic_5JoinFountain__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: Plasmic_5JoinFountain__VariantsArgs;
    args?: Plasmic_5JoinFountain__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<Plasmic_5JoinFountain__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<Plasmic_5JoinFountain__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: Plasmic_5JoinFountain__ArgProps,
      internalVariantPropNames: Plasmic_5JoinFountain__VariantProps
    });

    return Plasmic_5JoinFountain__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "Plasmic_5JoinFountain";
  } else {
    func.displayName = `Plasmic_5JoinFountain.${nodeName}`;
  }
  return func;
}

export const Plasmic_5JoinFountain = Object.assign(
  // Top-level Plasmic_5JoinFountain renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    foreground9: makeNodeComponent("foreground9"),
    foreground8: makeNodeComponent("foreground8"),
    foreground: makeNodeComponent("foreground"),
    blogPosts: makeNodeComponent("blogPosts"),
    navbar: makeNodeComponent("navbar"),
    foreground2: makeNodeComponent("foreground2"),
    h3: makeNodeComponent("h3"),
    button: makeNodeComponent("button"),
    foreground3: makeNodeComponent("foreground3"),
    foreground4: makeNodeComponent("foreground4"),
    footer: makeNodeComponent("footer"),
    reveal: makeNodeComponent("reveal"),

    // Metadata about props expected for Plasmic_5JoinFountain
    internalVariantProps: Plasmic_5JoinFountain__VariantProps,
    internalArgProps: Plasmic_5JoinFountain__ArgProps
  }
);

export default Plasmic_5JoinFountain;
/* prettier-ignore-end */
