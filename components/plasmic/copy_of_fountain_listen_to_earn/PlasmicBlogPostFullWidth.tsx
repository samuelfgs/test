// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 6BobAUw5T3TCqT8ypcszbG
// Component: up3jpsxU0IGZQ
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Button from "../../Button"; // plasmic-import: KhbeBVaAisx47/component

import { useScreenVariants as useScreenVariantsuXvTXvy0VuZNuyJ } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: UXvTXvy0VuZNuyJ/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_fountain_fm_css from "../fountain_fm/plasmic_fountain_fm.module.css"; // plasmic-import: q7mc6yKyK23FBh7x1aGwnG/projectcss
import projectcss from "./plasmic_copy_of_fountain_listen_to_earn.module.css"; // plasmic-import: 6BobAUw5T3TCqT8ypcszbG/projectcss
import sty from "./PlasmicBlogPostFullWidth.module.css"; // plasmic-import: up3jpsxU0IGZQ/css

import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: S2Divheo_3CFcy/icon

export type PlasmicBlogPostFullWidth__VariantMembers = {};

export type PlasmicBlogPostFullWidth__VariantsArgs = {};
type VariantPropType = keyof PlasmicBlogPostFullWidth__VariantsArgs;
export const PlasmicBlogPostFullWidth__VariantProps =
  new Array<VariantPropType>();

export type PlasmicBlogPostFullWidth__ArgsType = {};
type ArgPropType = keyof PlasmicBlogPostFullWidth__ArgsType;
export const PlasmicBlogPostFullWidth__ArgProps = new Array<ArgPropType>();

export type PlasmicBlogPostFullWidth__OverridesType = {
  root?: p.Flex<"div">;
  img?: p.Flex<typeof p.PlasmicImg>;
  h4?: p.Flex<"h4">;
  button?: p.Flex<typeof Button>;
};

export interface DefaultBlogPostFullWidthProps {
  className?: string;
}

export const defaultBlogPostFullWidth__Args: Partial<PlasmicBlogPostFullWidth__ArgsType> =
  {};

function PlasmicBlogPostFullWidth__RenderFunc(props: {
  variants: PlasmicBlogPostFullWidth__VariantsArgs;
  args: PlasmicBlogPostFullWidth__ArgsType;
  overrides: PlasmicBlogPostFullWidth__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const args = Object.assign({}, defaultBlogPostFullWidth__Args, props.args);
  const $props = args;
  const $ctx = ph.useDataEnv?.() || {};

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsuXvTXvy0VuZNuyJ()
  });

  return (
    (hasVariant(globalVariants, "screen", "mobileOnly") ? true : true) ? (
      <div
        data-plasmic-name={"root"}
        data-plasmic-override={overrides.root}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        className={classNames(
          projectcss.all,
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          projectcss.plasmic_tokens,
          plasmic_fountain_fm_css.plasmic_tokens,
          sty.root
        )}
      >
        <div className={classNames(projectcss.all, sty.freeBox__pF9I)}>
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.columns__rr1Ok)}
          >
            <div className={classNames(projectcss.all, sty.column__aeNqk)}>
              <div className={classNames(projectcss.all, sty.columns__qaw3S)}>
                <div className={classNames(projectcss.all, sty.column___3A8Wx)}>
                  <p.PlasmicImg
                    data-plasmic-name={"img"}
                    data-plasmic-override={overrides.img}
                    alt={""}
                    className={classNames(sty.img)}
                    displayHeight={"auto" as const}
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"100%" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"auto" as const}
                    loading={"lazy" as const}
                    src={{
                      src: "/plasmic/copy_of_fountain_listen_to_earn/images/_737616735287Webp2.webp",
                      fullWidth: 1920,
                      fullHeight: 1280,
                      aspectRatio: undefined
                    }}
                  />
                </div>

                <div className={classNames(projectcss.all, sty.column__nOtbV)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__kKCfA)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__lW0ON
                      )}
                    >
                      {"Product"}
                    </div>

                    <h4
                      data-plasmic-name={"h4"}
                      data-plasmic-override={overrides.h4}
                      className={classNames(
                        projectcss.all,
                        projectcss.h4,
                        projectcss.__wab_text,
                        sty.h4
                      )}
                    >
                      {hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "Activating cross-app Lightning Comments for your podcast"
                        : "Activating cross-app Lightning Comments for your podcast"}
                    </h4>

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__j1LJf
                      )}
                    >
                      {"Friday 25th March 2020"}
                    </div>

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__vF6Ya
                      )}
                    >
                      {
                        "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor ..."
                      }
                    </div>

                    <Button
                      data-plasmic-name={"button"}
                      data-plasmic-override={overrides.button}
                      className={classNames("__wab_instance", sty.button)}
                      shape={"rounded" as const}
                      showEndIcon={true}
                    >
                      {"Read post"}
                    </Button>
                  </div>
                </div>
              </div>
            </div>
          </p.Stack>
        </div>
      </div>
    ) : null
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "img", "h4", "button"],
  img: ["img"],
  h4: ["h4"],
  button: ["button"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  img: typeof p.PlasmicImg;
  h4: "h4";
  button: typeof Button;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicBlogPostFullWidth__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicBlogPostFullWidth__VariantsArgs;
    args?: PlasmicBlogPostFullWidth__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicBlogPostFullWidth__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicBlogPostFullWidth__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicBlogPostFullWidth__ArgProps,
      internalVariantPropNames: PlasmicBlogPostFullWidth__VariantProps
    });

    return PlasmicBlogPostFullWidth__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicBlogPostFullWidth";
  } else {
    func.displayName = `PlasmicBlogPostFullWidth.${nodeName}`;
  }
  return func;
}

export const PlasmicBlogPostFullWidth = Object.assign(
  // Top-level PlasmicBlogPostFullWidth renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    img: makeNodeComponent("img"),
    h4: makeNodeComponent("h4"),
    button: makeNodeComponent("button"),

    // Metadata about props expected for PlasmicBlogPostFullWidth
    internalVariantProps: PlasmicBlogPostFullWidth__VariantProps,
    internalArgProps: PlasmicBlogPostFullWidth__ArgProps
  }
);

export default PlasmicBlogPostFullWidth;
/* prettier-ignore-end */
