// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 6BobAUw5T3TCqT8ypcszbG
// Component: n3aIYan7r0SEV
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Button from "../../Button"; // plasmic-import: KhbeBVaAisx47/component

import { useScreenVariants as useScreenVariantsuXvTXvy0VuZNuyJ } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: UXvTXvy0VuZNuyJ/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_fountain_fm_css from "../fountain_fm/plasmic_fountain_fm.module.css"; // plasmic-import: q7mc6yKyK23FBh7x1aGwnG/projectcss
import projectcss from "./plasmic_copy_of_fountain_listen_to_earn.module.css"; // plasmic-import: 6BobAUw5T3TCqT8ypcszbG/projectcss
import sty from "./PlasmicBlogPosts.module.css"; // plasmic-import: n3aIYan7r0SEV/css

import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: S2Divheo_3CFcy/icon

export type PlasmicBlogPosts__VariantMembers = {};

export type PlasmicBlogPosts__VariantsArgs = {};
type VariantPropType = keyof PlasmicBlogPosts__VariantsArgs;
export const PlasmicBlogPosts__VariantProps = new Array<VariantPropType>();

export type PlasmicBlogPosts__ArgsType = {};
type ArgPropType = keyof PlasmicBlogPosts__ArgsType;
export const PlasmicBlogPosts__ArgProps = new Array<ArgPropType>();

export type PlasmicBlogPosts__OverridesType = {
  root?: p.Flex<"section">;
  h2?: p.Flex<"h2">;
  httpsexplorefountainfmblogpodcasterGetStarted?: p.Flex<"a"> &
    Partial<LinkProps>;
};

export interface DefaultBlogPostsProps {
  className?: string;
}

export const defaultBlogPosts__Args: Partial<PlasmicBlogPosts__ArgsType> = {};

function PlasmicBlogPosts__RenderFunc(props: {
  variants: PlasmicBlogPosts__VariantsArgs;
  args: PlasmicBlogPosts__ArgsType;
  overrides: PlasmicBlogPosts__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const args = Object.assign({}, defaultBlogPosts__Args, props.args);
  const $props = args;
  const $ctx = ph.useDataEnv?.() || {};

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsuXvTXvy0VuZNuyJ()
  });

  return (
    true ? (
      <section
        data-plasmic-name={"root"}
        data-plasmic-override={overrides.root}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        className={classNames(
          projectcss.all,
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          projectcss.plasmic_tokens,
          plasmic_fountain_fm_css.plasmic_tokens,
          sty.root
        )}
      >
        <div className={classNames(projectcss.all, sty.column__zVpGh)}>
          <h2
            data-plasmic-name={"h2"}
            data-plasmic-override={overrides.h2}
            className={classNames(
              projectcss.all,
              projectcss.h2,
              projectcss.__wab_text,
              sty.h2
            )}
          >
            {hasVariant(globalVariants, "screen", "mobileOnly")
              ? "Recent posts"
              : "Recent posts"}
          </h2>

          <div className={classNames(projectcss.all, sty.columns__yocWc)}>
            <div className={classNames(projectcss.all, sty.column__o41Oy)}>
              <p.PlasmicLink
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  sty.link__bqUmc
                )}
                component={Link}
                href={
                  "https://explore.fountain.fm/blog/fountain-0-3-16" as const
                }
                platform={"nextjs"}
              >
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__o9U7)}
                  displayHeight={"100%" as const}
                  displayMaxHeight={"none" as const}
                  displayMaxWidth={"100%" as const}
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0" as const}
                  displayWidth={"100%" as const}
                  loading={"lazy" as const}
                  src={{
                    src: "/plasmic/copy_of_fountain_listen_to_earn/images/recent001Jpeg.jpeg",
                    fullWidth: 1920,
                    fullHeight: 1080,
                    aspectRatio: undefined
                  }}
                />
              </p.PlasmicLink>

              <div className={classNames(projectcss.all, sty.columns___8Xw7Z)}>
                <div className={classNames(projectcss.all, sty.column__zGde)}>
                  <p.PlasmicLink
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      sty.link__zoVmj
                    )}
                    component={Link}
                    href={
                      "https://explore.fountain.fm/blog/boosting-on-fountain-just-got-a-lot-more-exciting" as const
                    }
                    platform={"nextjs"}
                  >
                    <h4
                      className={classNames(
                        projectcss.all,
                        projectcss.h4,
                        projectcss.__wab_text,
                        sty.h4__r9YgS
                      )}
                    >
                      {hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "Fountain 0.4.1 - Listen to Earn & Fountain Promotions"
                        : "Fountain 0.4.1 - Listen to Earn & Fountain Promotions"}
                    </h4>
                  </p.PlasmicLink>

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__fHUv
                    )}
                  >
                    {"April 28, 2022"}
                  </div>

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__whX17
                    )}
                  >
                    {
                      "The update includes some exciting new features and UX upgrades that podcasters and listeners will love."
                    }
                  </div>

                  <p.PlasmicLink
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      sty.link__fuio
                    )}
                    component={Link}
                    href={
                      "https://explore.fountain.fm/blog/boosting-on-fountain-just-got-a-lot-more-exciting" as const
                    }
                    platform={"nextjs"}
                  >
                    <Button
                      className={classNames(
                        "__wab_instance",
                        sty.button__slafk
                      )}
                      color={"softSand" as const}
                      link={
                        "https://explore.fountain.fm/blog/fountain-0-3-16" as const
                      }
                      shape={"rounded" as const}
                      showEndIcon={true}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__gaqb0
                        )}
                      >
                        <React.Fragment>
                          <React.Fragment>{""}</React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{ color: "#000000" }}
                          >
                            {"Read more"}
                          </span>
                          <React.Fragment>{""}</React.Fragment>
                        </React.Fragment>
                      </div>
                    </Button>
                  </p.PlasmicLink>
                </div>
              </div>
            </div>

            <div className={classNames(projectcss.all, sty.column__mdCdZ)}>
              <p.PlasmicLink
                data-plasmic-name={
                  "httpsexplorefountainfmblogpodcasterGetStarted"
                }
                data-plasmic-override={
                  overrides.httpsexplorefountainfmblogpodcasterGetStarted
                }
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  sty.httpsexplorefountainfmblogpodcasterGetStarted
                )}
                component={Link}
                platform={"nextjs"}
              >
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__b8Upo)}
                  displayHeight={"100%" as const}
                  displayMaxHeight={"none" as const}
                  displayMaxWidth={"100%" as const}
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0" as const}
                  displayWidth={"100%" as const}
                  loading={"lazy" as const}
                  src={{
                    src: "/plasmic/copy_of_fountain_listen_to_earn/images/image54.webp",
                    fullWidth: 1080,
                    fullHeight: 608,
                    aspectRatio: undefined
                  }}
                />
              </p.PlasmicLink>

              <div className={classNames(projectcss.all, sty.columns__jXiGx)}>
                <div className={classNames(projectcss.all, sty.column__sPze2)}>
                  <p.PlasmicLink
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      sty.link__pwrek
                    )}
                    component={Link}
                    href={
                      "https://explore.fountain.fm/blog/podcaster-get-started" as const
                    }
                    platform={"nextjs"}
                  >
                    <h4
                      className={classNames(
                        projectcss.all,
                        projectcss.h4,
                        projectcss.__wab_text,
                        sty.h4__uvu0W
                      )}
                    >
                      {"Fountain 0.4.1 - Listen to Earn & Fountain Promotions"}
                    </h4>
                  </p.PlasmicLink>

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__kan3
                    )}
                  >
                    {"April 18, 2022"}
                  </div>

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__ym7Fa
                    )}
                  >
                    {
                      "Six steps every podcaster should follow to maximise their engagement and earnings - starting from scratch."
                    }
                  </div>

                  <p.PlasmicLink
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      sty.link__stsQs
                    )}
                    component={Link}
                    href={
                      "https://explore.fountain.fm/blog/podcaster-get-started" as const
                    }
                    platform={"nextjs"}
                  >
                    <Button
                      className={classNames(
                        "__wab_instance",
                        sty.button__pQvk2
                      )}
                      color={"softSand" as const}
                      shape={"rounded" as const}
                      showEndIcon={true}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__v89B4
                        )}
                      >
                        <React.Fragment>
                          <React.Fragment>{""}</React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{ color: "#000000" }}
                          >
                            {"Read more"}
                          </span>
                          <React.Fragment>{""}</React.Fragment>
                        </React.Fragment>
                      </div>
                    </Button>
                  </p.PlasmicLink>
                </div>
              </div>
            </div>

            <div className={classNames(projectcss.all, sty.column__tcIKv)}>
              <p.PlasmicLink
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  sty.link__jPpdo
                )}
                component={Link}
                href={
                  "https://explore.fountain.fm/blog/activating-cross-app-lightning-comments-for-your-podcast" as const
                }
                platform={"nextjs"}
              >
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img___1WcwW)}
                  displayHeight={"100%" as const}
                  displayMaxHeight={"none" as const}
                  displayMaxWidth={"100%" as const}
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0" as const}
                  displayWidth={"100%" as const}
                  loading={"lazy" as const}
                  src={{
                    src: "/plasmic/copy_of_fountain_listen_to_earn/images/_647749757986Webp.webp",
                    fullWidth: 1920,
                    fullHeight: 1080,
                    aspectRatio: undefined
                  }}
                />
              </p.PlasmicLink>

              <div className={classNames(projectcss.all, sty.columns__y1Sm1)}>
                <div className={classNames(projectcss.all, sty.column__tWhyW)}>
                  <p.PlasmicLink
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      sty.link__x9Z9
                    )}
                    component={Link}
                    href={
                      "https://explore.fountain.fm/blog/activating-cross-app-lightning-comments-for-your-podcast" as const
                    }
                    platform={"nextjs"}
                  >
                    <h4
                      className={classNames(
                        projectcss.all,
                        projectcss.h4,
                        projectcss.__wab_text,
                        sty.h4__ovW5
                      )}
                    >
                      {"Activating cross-app Boosts for your podcast"}
                    </h4>
                  </p.PlasmicLink>

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__aq4Rz
                    )}
                  >
                    {"March 17, 2022"}
                  </div>

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__qnwsD
                    )}
                  >
                    {
                      "With our Podcaster Wallet, you can now get Boosts sent from other Podcasting 2.0 apps to show in Fountain."
                    }
                  </div>

                  <p.PlasmicLink
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      sty.link___1WVag
                    )}
                    component={Link}
                    href={
                      "https://explore.fountain.fm/blog/activating-cross-app-lightning-comments-for-your-podcast" as const
                    }
                    platform={"nextjs"}
                  >
                    <Button
                      className={classNames(
                        "__wab_instance",
                        sty.button__ogezP
                      )}
                      color={"softSand" as const}
                      shape={"rounded" as const}
                      showEndIcon={true}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__bAecx
                        )}
                      >
                        <React.Fragment>
                          <React.Fragment>{""}</React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{ color: "#000000" }}
                          >
                            {"Read more"}
                          </span>
                          <React.Fragment>{""}</React.Fragment>
                        </React.Fragment>
                      </div>
                    </Button>
                  </p.PlasmicLink>
                </div>
              </div>
            </div>
          </div>

          <p.PlasmicLink
            className={classNames(
              projectcss.all,
              projectcss.a,
              sty.link__mxqmB
            )}
            component={Link}
            href={"https://explore.fountain.fm/" as const}
            platform={"nextjs"}
          >
            <Button
              className={classNames("__wab_instance", sty.button__h2DL)}
              shape={"rounded" as const}
              showEndIcon={true}
            >
              {"See all posts"}
            </Button>
          </p.PlasmicLink>
        </div>
      </section>
    ) : null
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "h2", "httpsexplorefountainfmblogpodcasterGetStarted"],
  h2: ["h2"],
  httpsexplorefountainfmblogpodcasterGetStarted: [
    "httpsexplorefountainfmblogpodcasterGetStarted"
  ]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "section";
  h2: "h2";
  httpsexplorefountainfmblogpodcasterGetStarted: "a";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicBlogPosts__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicBlogPosts__VariantsArgs;
    args?: PlasmicBlogPosts__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicBlogPosts__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicBlogPosts__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicBlogPosts__ArgProps,
      internalVariantPropNames: PlasmicBlogPosts__VariantProps
    });

    return PlasmicBlogPosts__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicBlogPosts";
  } else {
    func.displayName = `PlasmicBlogPosts.${nodeName}`;
  }
  return func;
}

export const PlasmicBlogPosts = Object.assign(
  // Top-level PlasmicBlogPosts renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    h2: makeNodeComponent("h2"),
    httpsexplorefountainfmblogpodcasterGetStarted: makeNodeComponent(
      "httpsexplorefountainfmblogpodcasterGetStarted"
    ),

    // Metadata about props expected for PlasmicBlogPosts
    internalVariantProps: PlasmicBlogPosts__VariantProps,
    internalArgProps: PlasmicBlogPosts__ArgProps
  }
);

export default PlasmicBlogPosts;
/* prettier-ignore-end */
