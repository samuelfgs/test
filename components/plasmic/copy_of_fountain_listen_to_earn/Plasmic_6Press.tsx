// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 6BobAUw5T3TCqT8ypcszbG
// Component: G2D08B3XpBvBIB
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Navbar from "../../Navbar"; // plasmic-import: uTDo8cXNPa_B1XC/component
import { Reveal } from "@plasmicpkgs/react-awesome-reveal"; // plasmic-import: R6s1FdhksG/codeComponent
import BlogPosts from "../../BlogPosts"; // plasmic-import: n3aIYan7r0SEV/component
import Footer from "../../Footer"; // plasmic-import: nmBaA0odzpiNWE/component

import { useScreenVariants as useScreenVariantsuXvTXvy0VuZNuyJ } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: UXvTXvy0VuZNuyJ/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_fountain_fm_css from "../fountain_fm/plasmic_fountain_fm.module.css"; // plasmic-import: q7mc6yKyK23FBh7x1aGwnG/projectcss
import projectcss from "./plasmic_copy_of_fountain_listen_to_earn.module.css"; // plasmic-import: 6BobAUw5T3TCqT8ypcszbG/projectcss
import sty from "./Plasmic_6Press.module.css"; // plasmic-import: G2D08B3XpBvBIB/css

import Icon8Icon from "./icons/PlasmicIcon__Icon8"; // plasmic-import: a-uf39TcX85gUT/icon
import DownloadSvgrepoComsvgIcon from "./icons/PlasmicIcon__DownloadSvgrepoComsvg"; // plasmic-import: H565GVSpg6jx1O/icon

export type Plasmic_6Press__VariantMembers = {};

export type Plasmic_6Press__VariantsArgs = {};
type VariantPropType = keyof Plasmic_6Press__VariantsArgs;
export const Plasmic_6Press__VariantProps = new Array<VariantPropType>();

export type Plasmic_6Press__ArgsType = {};
type ArgPropType = keyof Plasmic_6Press__ArgsType;
export const Plasmic_6Press__ArgProps = new Array<ArgPropType>();

export type Plasmic_6Press__OverridesType = {
  root?: p.Flex<"div">;
  navbar?: p.Flex<typeof Navbar>;
  foreground9?: p.Flex<"div">;
  foreground8?: p.Flex<"div">;
  section?: p.Flex<"section">;
  foreground?: p.Flex<"div">;
  link?: p.Flex<"a"> & Partial<LinkProps>;
  footer?: p.Flex<typeof Footer>;
};

export interface Default_6PressProps {}

export const default_6Press__Args: Partial<Plasmic_6Press__ArgsType> = {};

function Plasmic_6Press__RenderFunc(props: {
  variants: Plasmic_6Press__VariantsArgs;
  args: Plasmic_6Press__ArgsType;
  overrides: Plasmic_6Press__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const args = Object.assign({}, default_6Press__Args, props.args);
  const $props = args;
  const $ctx = ph.useDataEnv?.() || {};

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsuXvTXvy0VuZNuyJ()
  });

  return (
    <React.Fragment>
      {}

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        {true ? (
          <p.Stack
            as={"div"}
            data-plasmic-name={"root"}
            data-plasmic-override={overrides.root}
            data-plasmic-root={true}
            data-plasmic-for-node={forNode}
            hasGap={true}
            className={classNames(
              projectcss.all,
              projectcss.root_reset,
              projectcss.plasmic_default_styles,
              projectcss.plasmic_mixins,
              projectcss.plasmic_tokens,
              plasmic_fountain_fm_css.plasmic_tokens,
              sty.root
            )}
          >
            <div className={classNames(projectcss.all, sty.freeBox__kPoGo)}>
              <Navbar
                data-plasmic-name={"navbar"}
                data-plasmic-override={overrides.navbar}
                className={classNames("__wab_instance", sty.navbar)}
              />

              {(
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? true
                  : false
              ) ? (
                <div className={classNames(projectcss.all, sty.freeBox__yR7H4)}>
                  {(
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? true
                      : true
                  ) ? (
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___7HPRm
                      )}
                    >
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__mcLp3
                        )}
                      >
                        <Reveal
                          className={classNames(
                            "__wab_instance",
                            sty.reveal__qd8G
                          )}
                          triggerOnce={true}
                        >
                          <p.Stack
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__oWqD3
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__nGyjl
                              )}
                            >
                              {"PRESS and partnerships"}
                            </div>

                            <h1
                              className={classNames(
                                projectcss.all,
                                projectcss.h1,
                                projectcss.__wab_text,
                                sty.h1__qPpi9
                              )}
                            >
                              {"How to get in touch"}
                            </h1>
                          </p.Stack>
                        </Reveal>
                      </p.Stack>
                    </p.Stack>
                  ) : null}
                </div>
              ) : null}
              {(
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? true
                  : false
              ) ? (
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__pZ5Ze)}
                >
                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"foreground9"}
                    data-plasmic-override={overrides.foreground9}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.foreground9)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__gZv0D
                      )}
                    >
                      {"What you can do on Fountain"}
                    </div>
                  </p.Stack>

                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__abgeS)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___1UrMh
                      )}
                    >
                      <p.PlasmicImg
                        alt={""}
                        className={classNames(sty.img__pjs7K)}
                        displayHeight={"60px" as const}
                        displayMaxHeight={"none" as const}
                        displayMaxWidth={"100%" as const}
                        displayMinHeight={"0" as const}
                        displayMinWidth={"0" as const}
                        displayWidth={"auto" as const}
                        loading={"lazy" as const}
                        src={{
                          src: "/plasmic/copy_of_fountain_listen_to_earn/images/image43.png",
                          fullWidth: 200,
                          fullHeight: 200,
                          aspectRatio: undefined
                        }}
                      />
                    </div>

                    {false ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___8M1Qw
                        )}
                      >
                        <Icon8Icon
                          className={classNames(projectcss.all, sty.svg__gfuKd)}
                          role={"img"}
                        />
                      </div>
                    ) : null}

                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__hsar2)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__j0Klt
                        )}
                      >
                        {"EARN"}
                      </div>

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___6NWbS
                        )}
                      >
                        {"Get paid to listen to podcasts"}
                      </div>
                    </p.Stack>
                  </p.Stack>

                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__tgo0T)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__taqMg)}
                    >
                      <p.PlasmicImg
                        alt={""}
                        className={classNames(sty.img___0EUs3)}
                        displayHeight={"60px" as const}
                        displayMaxHeight={"none" as const}
                        displayMaxWidth={"100%" as const}
                        displayMinHeight={"0" as const}
                        displayMinWidth={"0" as const}
                        displayWidth={"auto" as const}
                        loading={"lazy" as const}
                        src={{
                          src: "/plasmic/copy_of_fountain_listen_to_earn/images/image44.png",
                          fullWidth: 200,
                          fullHeight: 200,
                          aspectRatio: undefined
                        }}
                      />
                    </div>

                    {false ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___2X7Y
                        )}
                      >
                        <Icon8Icon
                          className={classNames(projectcss.all, sty.svg__wInSz)}
                          role={"img"}
                        />
                      </div>
                    ) : null}

                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__npu0S)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__inhx7
                        )}
                      >
                        {"SUPPORT"}
                      </div>

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__lG2YQ
                        )}
                      >
                        {"Give back to podcasts you love"}
                      </div>
                    </p.Stack>
                  </p.Stack>

                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox___4XDb)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___2JBBo
                      )}
                    >
                      <p.PlasmicImg
                        alt={""}
                        className={classNames(sty.img__b6Cqj)}
                        displayHeight={"60px" as const}
                        displayMaxHeight={"none" as const}
                        displayMaxWidth={"100%" as const}
                        displayMinHeight={"0" as const}
                        displayMinWidth={"0" as const}
                        displayWidth={"auto" as const}
                        loading={"lazy" as const}
                        src={{
                          src: "/plasmic/copy_of_fountain_listen_to_earn/images/image45.png",
                          fullWidth: 200,
                          fullHeight: 200,
                          aspectRatio: undefined
                        }}
                      />
                    </div>

                    {false ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__bQjQh
                        )}
                      >
                        <Icon8Icon
                          className={classNames(projectcss.all, sty.svg__yv0Hm)}
                          role={"img"}
                        />
                      </div>
                    ) : null}

                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__lgSoc)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__eImIc
                        )}
                      >
                        {"SHARE"}
                      </div>

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__naKtn
                        )}
                      >
                        {"Share podcasts with friends"}
                      </div>
                    </p.Stack>
                  </p.Stack>
                </p.Stack>
              ) : null}
              {true ? (
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__i5NB)}
                >
                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"foreground8"}
                    data-plasmic-override={overrides.foreground8}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.foreground8)}
                  >
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__ql08E)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__xYpL
                        )}
                      >
                        <p.PlasmicImg
                          alt={""}
                          className={classNames(sty.img__xkCgh)}
                          displayHeight={"56px" as const}
                          displayMaxHeight={"none" as const}
                          displayMaxWidth={"none" as const}
                          displayMinHeight={"0" as const}
                          displayMinWidth={"0" as const}
                          displayWidth={"56px" as const}
                          src={
                            "https://emojipedia-us.s3.dualstack.us-west-1.amazonaws.com/thumbs/144/twitter/281/red-apple_1f34e.png" as const
                          }
                        />
                      </div>

                      {false ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__qcWzE
                          )}
                        >
                          <Icon8Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__o1BlE
                            )}
                            role={"img"}
                          />
                        </div>
                      ) : null}

                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__aFb5F
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__wfPOw
                          )}
                        >
                          {"EARN"}
                        </div>

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__ra7Lu
                          )}
                        >
                          {"Get paid to listen to podcasts"}
                        </div>
                      </p.Stack>
                    </p.Stack>

                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___5ChSo
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__gsOx7
                        )}
                      >
                        <p.PlasmicImg
                          alt={""}
                          className={classNames(sty.img___5U8MN)}
                          displayHeight={"56px" as const}
                          displayMaxHeight={"none" as const}
                          displayMaxWidth={"none" as const}
                          displayMinHeight={"0" as const}
                          displayMinWidth={"0" as const}
                          displayWidth={"56px" as const}
                          src={
                            "https://emojipedia-us.s3.dualstack.us-west-1.amazonaws.com/thumbs/144/twitter/281/banana_1f34c.png" as const
                          }
                        />
                      </div>

                      {false ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__d9Ua8
                          )}
                        >
                          <Icon8Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__xGceg
                            )}
                            role={"img"}
                          />
                        </div>
                      ) : null}

                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__dXttW
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___51EjP
                          )}
                        >
                          {"SUPPORT"}
                        </div>

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__du6Vk
                          )}
                        >
                          {"Give back to podcasts you love"}
                        </div>
                      </p.Stack>
                    </p.Stack>

                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__n2Zqc)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___8MtWj
                        )}
                      >
                        <p.PlasmicImg
                          alt={""}
                          className={classNames(sty.img__qwax)}
                          displayHeight={"56px" as const}
                          displayMaxHeight={"none" as const}
                          displayMaxWidth={"none" as const}
                          displayMinHeight={"0" as const}
                          displayMinWidth={"0" as const}
                          displayWidth={"56px" as const}
                          src={
                            "https://emojipedia-us.s3.dualstack.us-west-1.amazonaws.com/thumbs/144/twitter/281/cherries_1f352.png" as const
                          }
                        />
                      </div>

                      {false ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__wzCre
                          )}
                        >
                          <Icon8Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__p9I6Y
                            )}
                            role={"img"}
                          />
                        </div>
                      ) : null}

                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___6FQa6
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__lzeBq
                          )}
                        >
                          {"SHARE"}
                        </div>

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__xheIx
                          )}
                        >
                          {"Share podcasts with others"}
                        </div>
                      </p.Stack>
                    </p.Stack>
                  </p.Stack>
                </p.Stack>
              ) : null}
              {true ? (
                <section
                  data-plasmic-name={"section"}
                  data-plasmic-override={overrides.section}
                  className={classNames(projectcss.all, sty.section)}
                >
                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"foreground"}
                    data-plasmic-override={overrides.foreground}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.foreground)}
                  >
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__boMrM)}
                    >
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.freeBox__fct)}
                      >
                        <p.Stack
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__b85VY
                          )}
                        >
                          {false ? (
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__z3Rw
                              )}
                            >
                              <Icon8Icon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__xBz1W
                                )}
                                role={"img"}
                              />
                            </div>
                          ) : null}

                          <p.Stack
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__oa2Yf
                            )}
                          >
                            <p.PlasmicImg
                              alt={""}
                              className={classNames(sty.img___1AoOv)}
                              displayHeight={"auto" as const}
                              displayMaxHeight={"none" as const}
                              displayMaxWidth={"100%" as const}
                              displayMinHeight={"0" as const}
                              displayMinWidth={"0" as const}
                              displayWidth={"auto" as const}
                              loading={"lazy" as const}
                              src={{
                                src: "/plasmic/copy_of_fountain_listen_to_earn/images/image25.jpeg",
                                fullWidth: 200,
                                fullHeight: 200,
                                aspectRatio: undefined
                              }}
                            />

                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__toTl
                              )}
                            >
                              {"Earn"}
                            </div>

                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__kErNv
                              )}
                            >
                              {"Get paid to listen to podcasts"}
                            </div>
                          </p.Stack>
                        </p.Stack>

                        <p.Stack
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__yD8Pz
                          )}
                        >
                          {false ? (
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__utW3L
                              )}
                            >
                              <Icon8Icon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__rgASx
                                )}
                                role={"img"}
                              />
                            </div>
                          ) : null}

                          <p.Stack
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__diQUx
                            )}
                          >
                            <p.PlasmicImg
                              alt={""}
                              className={classNames(sty.img__cLd4V)}
                              displayHeight={"223px" as const}
                              displayMaxHeight={"none" as const}
                              displayMaxWidth={
                                hasVariant(
                                  globalVariants,
                                  "screen",
                                  "mobileOnly"
                                )
                                  ? ("100%" as const)
                                  : ("100%" as const)
                              }
                              displayMinHeight={"0" as const}
                              displayMinWidth={"0" as const}
                              displayWidth={"auto" as const}
                              loading={
                                hasVariant(
                                  globalVariants,
                                  "screen",
                                  "mobileOnly"
                                )
                                  ? ("lazy" as const)
                                  : ("lazy" as const)
                              }
                              src={
                                hasVariant(
                                  globalVariants,
                                  "screen",
                                  "mobileOnly"
                                )
                                  ? {
                                      src: "/plasmic/copy_of_fountain_listen_to_earn/images/image26.jpeg",
                                      fullWidth: 200,
                                      fullHeight: 200,
                                      aspectRatio: undefined
                                    }
                                  : {
                                      src: "/plasmic/copy_of_fountain_listen_to_earn/images/image26.jpeg",
                                      fullWidth: 200,
                                      fullHeight: 200,
                                      aspectRatio: undefined
                                    }
                              }
                            />

                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__a3FeL
                              )}
                            >
                              {"Support"}
                            </div>

                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__frEo
                              )}
                            >
                              {"Give back to podcasts you love"}
                            </div>
                          </p.Stack>
                        </p.Stack>

                        <p.Stack
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__cKHW
                          )}
                        >
                          {false ? (
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__s4AnW
                              )}
                            >
                              <Icon8Icon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__qD95D
                                )}
                                role={"img"}
                              />
                            </div>
                          ) : null}

                          <p.Stack
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__iM9YB
                            )}
                          >
                            <p.PlasmicImg
                              alt={""}
                              className={classNames(sty.img__fqThy)}
                              displayHeight={"222px" as const}
                              displayMaxHeight={"none" as const}
                              displayMaxWidth={"100%" as const}
                              displayMinHeight={"0" as const}
                              displayMinWidth={"0" as const}
                              displayWidth={"auto" as const}
                              loading={"lazy" as const}
                              src={{
                                src: "/plasmic/copy_of_fountain_listen_to_earn/images/image27.jpeg",
                                fullWidth: 200,
                                fullHeight: 200,
                                aspectRatio: undefined
                              }}
                            />

                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__baIdq
                              )}
                            >
                              {"Share"}
                            </div>

                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__fpsQp
                              )}
                            >
                              {"Share podcasts with others"}
                            </div>
                          </p.Stack>
                        </p.Stack>
                      </p.Stack>
                    </p.Stack>
                  </p.Stack>
                </section>
              ) : null}
              {(
                hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
              ) ? (
                <div
                  className={classNames(projectcss.all, sty.freeBox___57Zix)}
                >
                  {(
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? true
                      : true
                  ) ? (
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__tcDga)}
                    >
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__eLtpa
                        )}
                      >
                        <p.Stack
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__k6Ihj
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___6LK9R
                            )}
                          >
                            {"PRESS and partnerships"}
                          </div>

                          <h1
                            className={classNames(
                              projectcss.all,
                              projectcss.h1,
                              projectcss.__wab_text,
                              sty.h1___6P217
                            )}
                          >
                            {"How to get in touch"}
                          </h1>
                        </p.Stack>
                      </p.Stack>
                    </p.Stack>
                  ) : null}
                </div>
              ) : null}
            </div>

            {(
              hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
            ) ? (
              <div className={classNames(projectcss.all, sty.freeBox__nKDq4)}>
                {(
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? true
                    : true
                ) ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__uiyFp)}
                  >
                    {(
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? true
                        : true
                    ) ? (
                      <h3
                        className={classNames(
                          projectcss.all,
                          projectcss.h3,
                          projectcss.__wab_text,
                          sty.h3__iAjOh
                        )}
                      >
                        {hasVariant(globalVariants, "screen", "mobileOnly")
                          ? "Recent posts"
                          : "Contact us"}
                      </h3>
                    ) : null}
                    {(
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? true
                        : true
                    ) ? (
                      <h6
                        className={classNames(
                          projectcss.all,
                          projectcss.h6,
                          projectcss.__wab_text,
                          sty.h6__otHJi
                        )}
                      >
                        {hasVariant(globalVariants, "screen", "mobileOnly") ? (
                          "Recent posts"
                        ) : (
                          <React.Fragment>
                            <React.Fragment>{""}</React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ textDecorationLine: "underline" }}
                            >
                              {"Press Inquiries"}
                            </span>
                            <React.Fragment>
                              {"\npress@fountain.fm\n\n"}
                            </React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ textDecorationLine: "underline" }}
                            >
                              {"Partnership Enquiries"}
                            </span>
                            <React.Fragment>
                              {"\npartnerships@fountain.fm\n\n"}
                            </React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ textDecorationLine: "underline" }}
                            >
                              {"Advertising Enquiries"}
                            </span>
                            <React.Fragment>
                              {"\nadvertising@fountain.fm"}
                            </React.Fragment>
                          </React.Fragment>
                        )}
                      </h6>
                    ) : null}
                  </div>
                ) : null}
                {(
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? true
                    : false
                ) ? (
                  <h3
                    className={classNames(
                      projectcss.all,
                      projectcss.h3,
                      projectcss.__wab_text,
                      sty.h3__izMfd
                    )}
                  >
                    {hasVariant(globalVariants, "screen", "mobileOnly")
                      ? "Contact us"
                      : "Contact us"}
                  </h3>
                ) : null}
                {(
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? true
                    : false
                ) ? (
                  <h6
                    className={classNames(
                      projectcss.all,
                      projectcss.h6,
                      projectcss.__wab_text,
                      sty.h6__ycmDv
                    )}
                  >
                    {hasVariant(globalVariants, "screen", "mobileOnly") ? (
                      <React.Fragment>
                        <React.Fragment>{""}</React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ textDecorationLine: "underline" }}
                        >
                          {"Press Inquiries"}
                        </span>
                        <React.Fragment>
                          {"\npress@fountain.fm\n\n"}
                        </React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ textDecorationLine: "underline" }}
                        >
                          {"Partnership Enquiries"}
                        </span>
                        <React.Fragment>
                          {"\npartnerships@fountain.fm\n\n"}
                        </React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ textDecorationLine: "underline" }}
                        >
                          {"Advertising Enquiries"}
                        </span>
                        <React.Fragment>
                          {"\nadvertising@fountain.fm"}
                        </React.Fragment>
                      </React.Fragment>
                    ) : (
                      <React.Fragment>
                        <React.Fragment>{""}</React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ textDecorationLine: "underline" }}
                        >
                          {"Press Inquiries"}
                        </span>
                        <React.Fragment>
                          {"\npress@fountain.fm\n\n"}
                        </React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ textDecorationLine: "underline" }}
                        >
                          {"Partnership Enquiries"}
                        </span>
                        <React.Fragment>
                          {"\npartnerships@fountain.fm\n\n"}
                        </React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ textDecorationLine: "underline" }}
                        >
                          {"Advertising Enquiries"}
                        </span>
                        <React.Fragment>
                          {"\nadvertising@fountain.fm\n"}
                        </React.Fragment>
                      </React.Fragment>
                    )}
                  </h6>
                ) : null}
              </div>
            ) : null}
            {(
              hasVariant(globalVariants, "screen", "mobileOnly") ? true : false
            ) ? (
              <div className={classNames(projectcss.all, sty.freeBox__h5Ct)}>
                {(
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? true
                    : true
                ) ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__rsEcC)}
                  >
                    {(
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? true
                        : true
                    ) ? (
                      <h3
                        className={classNames(
                          projectcss.all,
                          projectcss.h3,
                          projectcss.__wab_text,
                          sty.h3___2AufB
                        )}
                      >
                        {hasVariant(globalVariants, "screen", "mobileOnly")
                          ? "Recent posts"
                          : "Contact us"}
                      </h3>
                    ) : null}
                    {(
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? true
                        : true
                    ) ? (
                      <h6
                        className={classNames(
                          projectcss.all,
                          projectcss.h6,
                          projectcss.__wab_text,
                          sty.h6__ga6Ex
                        )}
                      >
                        {hasVariant(globalVariants, "screen", "mobileOnly") ? (
                          "Recent posts"
                        ) : (
                          <React.Fragment>
                            <React.Fragment>{""}</React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ textDecorationLine: "underline" }}
                            >
                              {"Press Inquiries"}
                            </span>
                            <React.Fragment>
                              {"\npress@fountain.fm\n\n"}
                            </React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ textDecorationLine: "underline" }}
                            >
                              {"Partnership Enquiries"}
                            </span>
                            <React.Fragment>
                              {"\npartnerships@fountain.fm\n\n"}
                            </React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ textDecorationLine: "underline" }}
                            >
                              {"Advertising Enquiries"}
                            </span>
                            <React.Fragment>
                              {"\nadvertising@fountain.fm\n"}
                            </React.Fragment>
                          </React.Fragment>
                        )}
                      </h6>
                    ) : null}
                  </div>
                ) : null}
                {(
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? true
                    : false
                ) ? (
                  <h3
                    className={classNames(
                      projectcss.all,
                      projectcss.h3,
                      projectcss.__wab_text,
                      sty.h3__mC2Lp
                    )}
                  >
                    {hasVariant(globalVariants, "screen", "mobileOnly")
                      ? "Contact us"
                      : "Contact us"}
                  </h3>
                ) : null}
                {(
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? true
                    : false
                ) ? (
                  <h6
                    className={classNames(
                      projectcss.all,
                      projectcss.h6,
                      projectcss.__wab_text,
                      sty.h6__tPe6J
                    )}
                  >
                    {hasVariant(globalVariants, "screen", "mobileOnly") ? (
                      <React.Fragment>
                        <React.Fragment>{""}</React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ textDecorationLine: "underline" }}
                        >
                          {"Press Inquiries"}
                        </span>
                        <React.Fragment>
                          {"\npress@fountain.fm\n\n"}
                        </React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ textDecorationLine: "underline" }}
                        >
                          {"Partnership Enquiries"}
                        </span>
                        <React.Fragment>
                          {"\npartnerships@fountain.fm\n\n"}
                        </React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ textDecorationLine: "underline" }}
                        >
                          {"Advertising Enquiries"}
                        </span>
                        <React.Fragment>
                          {"\nadvertising@fountain.fm"}
                        </React.Fragment>
                      </React.Fragment>
                    ) : (
                      <React.Fragment>
                        <React.Fragment>{""}</React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ textDecorationLine: "underline" }}
                        >
                          {"Press Inquiries"}
                        </span>
                        <React.Fragment>
                          {"\npress@fountain.fm\n\n"}
                        </React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ textDecorationLine: "underline" }}
                        >
                          {"Partnership Enquiries"}
                        </span>
                        <React.Fragment>
                          {"\npartnerships@fountain.fm\n\n"}
                        </React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ textDecorationLine: "underline" }}
                        >
                          {"Advertising Enquiries"}
                        </span>
                        <React.Fragment>
                          {"\nadvertising@fountain.fm\n"}
                        </React.Fragment>
                      </React.Fragment>
                    )}
                  </h6>
                ) : null}
              </div>
            ) : null}
            {(
              hasVariant(globalVariants, "screen", "mobileOnly") ? true : false
            ) ? (
              <div className={classNames(projectcss.all, sty.freeBox__vtgdj)}>
                {(
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? true
                    : true
                ) ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__eiVHj)}
                  >
                    {(
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? true
                        : true
                    ) ? (
                      <h3
                        className={classNames(
                          projectcss.all,
                          projectcss.h3,
                          projectcss.__wab_text,
                          sty.h3__kqppN
                        )}
                      >
                        {hasVariant(globalVariants, "screen", "mobileOnly")
                          ? "Recent posts"
                          : "Contact us"}
                      </h3>
                    ) : null}
                    {(
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? true
                        : true
                    ) ? (
                      <h6
                        className={classNames(
                          projectcss.all,
                          projectcss.h6,
                          projectcss.__wab_text,
                          sty.h6___2K81G
                        )}
                      >
                        {hasVariant(globalVariants, "screen", "mobileOnly") ? (
                          "Recent posts"
                        ) : (
                          <React.Fragment>
                            <React.Fragment>{""}</React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ textDecorationLine: "underline" }}
                            >
                              {"Press Inquiries"}
                            </span>
                            <React.Fragment>
                              {"\npress@fountain.fm\n\n"}
                            </React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ textDecorationLine: "underline" }}
                            >
                              {"Partnership Enquiries"}
                            </span>
                            <React.Fragment>
                              {"\npartnerships@fountain.fm\n\n"}
                            </React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ textDecorationLine: "underline" }}
                            >
                              {"Advertising Enquiries"}
                            </span>
                            <React.Fragment>
                              {"\nadvertising@fountain.fm\n"}
                            </React.Fragment>
                          </React.Fragment>
                        )}
                      </h6>
                    ) : null}
                  </div>
                ) : null}
                {(
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? true
                    : false
                ) ? (
                  <h3
                    className={classNames(
                      projectcss.all,
                      projectcss.h3,
                      projectcss.__wab_text,
                      sty.h3__ukodA
                    )}
                  >
                    {hasVariant(globalVariants, "screen", "mobileOnly")
                      ? "Press images"
                      : "Contact us"}
                  </h3>
                ) : null}

                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__z0Hjy)}
                  displayHeight={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? ("210px" as const)
                      : ("auto" as const)
                  }
                  displayMaxHeight={"none" as const}
                  displayMaxWidth={"100%" as const}
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0" as const}
                  displayWidth={"563px" as const}
                  loading={"lazy" as const}
                  src={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? {
                          src: "/plasmic/copy_of_fountain_listen_to_earn/images/wmn001Png.png",
                          fullWidth: 1920,
                          fullHeight: 1080,
                          aspectRatio: undefined
                        }
                      : {
                          src: "/plasmic/copy_of_fountain_listen_to_earn/images/fountainWordmark001Jpeg.jpeg",
                          fullWidth: 1920,
                          fullHeight: 1080,
                          aspectRatio: undefined
                        }
                  }
                />

                <div
                  className={classNames(projectcss.all, sty.freeBox___0LvtN)}
                >
                  <h4
                    className={classNames(
                      projectcss.all,
                      projectcss.h4,
                      projectcss.__wab_text,
                      sty.h4__q5JWc
                    )}
                  >
                    {"Logo Marks"}
                  </h4>

                  <DownloadSvgrepoComsvgIcon
                    className={classNames(projectcss.all, sty.svg___7JxLa)}
                    role={"img"}
                  />
                </div>

                <div className={classNames(projectcss.all, sty.freeBox__yCpxz)}>
                  <h6
                    className={classNames(
                      projectcss.all,
                      projectcss.h6,
                      projectcss.__wab_text,
                      sty.h6__hl9Yn
                    )}
                  >
                    {"720 KB"}
                  </h6>
                </div>

                {(
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? true
                    : false
                ) ? (
                  <h6
                    className={classNames(
                      projectcss.all,
                      projectcss.h6,
                      projectcss.__wab_text,
                      sty.h6__rIez5
                    )}
                  >
                    {hasVariant(globalVariants, "screen", "mobileOnly") ? (
                      <React.Fragment>
                        <React.Fragment>{""}</React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ textDecorationLine: "underline" }}
                        >
                          {"Press Inquiries"}
                        </span>
                        <React.Fragment>
                          {"\npress@fountain.fm\n\n"}
                        </React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ textDecorationLine: "underline" }}
                        >
                          {"Partnership Enquiries"}
                        </span>
                        <React.Fragment>
                          {"\npartnerships@fountain.fm\n\n"}
                        </React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ textDecorationLine: "underline" }}
                        >
                          {"Advertising Enquiries"}
                        </span>
                        <React.Fragment>
                          {"\nadvertising@fountain.fm"}
                        </React.Fragment>
                      </React.Fragment>
                    ) : (
                      <React.Fragment>
                        <React.Fragment>{""}</React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ textDecorationLine: "underline" }}
                        >
                          {"Press Inquiries"}
                        </span>
                        <React.Fragment>
                          {"\npress@fountain.fm\n\n"}
                        </React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ textDecorationLine: "underline" }}
                        >
                          {"Partnership Enquiries"}
                        </span>
                        <React.Fragment>
                          {"\npartnerships@fountain.fm\n\n"}
                        </React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ textDecorationLine: "underline" }}
                        >
                          {"Advertising Enquiries"}
                        </span>
                        <React.Fragment>
                          {"\nadvertising@fountain.fm\n"}
                        </React.Fragment>
                      </React.Fragment>
                    )}
                  </h6>
                ) : null}
              </div>
            ) : null}
            {(
              hasVariant(globalVariants, "screen", "mobileOnly") ? true : false
            ) ? (
              <div className={classNames(projectcss.all, sty.freeBox___0Oapu)}>
                {(
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? true
                    : true
                ) ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox___16KcD)}
                  >
                    {(
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? true
                        : true
                    ) ? (
                      <h3
                        className={classNames(
                          projectcss.all,
                          projectcss.h3,
                          projectcss.__wab_text,
                          sty.h3__w1R8
                        )}
                      >
                        {hasVariant(globalVariants, "screen", "mobileOnly")
                          ? "Recent posts"
                          : "Contact us"}
                      </h3>
                    ) : null}
                    {(
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? true
                        : true
                    ) ? (
                      <h6
                        className={classNames(
                          projectcss.all,
                          projectcss.h6,
                          projectcss.__wab_text,
                          sty.h6__lkJzo
                        )}
                      >
                        {hasVariant(globalVariants, "screen", "mobileOnly") ? (
                          "Recent posts"
                        ) : (
                          <React.Fragment>
                            <React.Fragment>{""}</React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ textDecorationLine: "underline" }}
                            >
                              {"Press Inquiries"}
                            </span>
                            <React.Fragment>
                              {"\npress@fountain.fm\n\n"}
                            </React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ textDecorationLine: "underline" }}
                            >
                              {"Partnership Enquiries"}
                            </span>
                            <React.Fragment>
                              {"\npartnerships@fountain.fm\n\n"}
                            </React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ textDecorationLine: "underline" }}
                            >
                              {"Advertising Enquiries"}
                            </span>
                            <React.Fragment>
                              {"\nadvertising@fountain.fm\n"}
                            </React.Fragment>
                          </React.Fragment>
                        )}
                      </h6>
                    ) : null}
                  </div>
                ) : null}
                {(
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? true
                    : false
                ) ? (
                  <h3
                    className={classNames(
                      projectcss.all,
                      projectcss.h3,
                      projectcss.__wab_text,
                      sty.h3___0Oc8Q
                    )}
                  >
                    {hasVariant(globalVariants, "screen", "mobileOnly")
                      ? "Press images"
                      : "Contact us"}
                  </h3>
                ) : null}

                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__hAd5K)}
                  displayHeight={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? ("210px" as const)
                      : ("auto" as const)
                  }
                  displayMaxHeight={"none" as const}
                  displayMaxWidth={"100%" as const}
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0" as const}
                  displayWidth={"563px" as const}
                  loading={"lazy" as const}
                  src={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? {
                          src: "/plasmic/copy_of_fountain_listen_to_earn/images/previewed98Png.png",
                          fullWidth: 1920,
                          fullHeight: 1080,
                          aspectRatio: undefined
                        }
                      : {
                          src: "/plasmic/copy_of_fountain_listen_to_earn/images/fountainWordmark001Jpeg.jpeg",
                          fullWidth: 1920,
                          fullHeight: 1080,
                          aspectRatio: undefined
                        }
                  }
                />

                <div className={classNames(projectcss.all, sty.freeBox__vN211)}>
                  <h4
                    className={classNames(
                      projectcss.all,
                      projectcss.h4,
                      projectcss.__wab_text,
                      sty.h4__dkiPg
                    )}
                  >
                    {"Product Screens"}
                  </h4>

                  <DownloadSvgrepoComsvgIcon
                    className={classNames(projectcss.all, sty.svg__tdvIg)}
                    role={"img"}
                  />
                </div>

                <div className={classNames(projectcss.all, sty.freeBox__sXoM)}>
                  <h6
                    className={classNames(
                      projectcss.all,
                      projectcss.h6,
                      projectcss.__wab_text,
                      sty.h6__bg44F
                    )}
                  >
                    {"12 MB"}
                  </h6>
                </div>

                {(
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? true
                    : false
                ) ? (
                  <h6
                    className={classNames(
                      projectcss.all,
                      projectcss.h6,
                      projectcss.__wab_text,
                      sty.h6__tzjpH
                    )}
                  >
                    {hasVariant(globalVariants, "screen", "mobileOnly") ? (
                      <React.Fragment>
                        <React.Fragment>{""}</React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ textDecorationLine: "underline" }}
                        >
                          {"Press Inquiries"}
                        </span>
                        <React.Fragment>
                          {"\npress@fountain.fm\n\n"}
                        </React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ textDecorationLine: "underline" }}
                        >
                          {"Partnership Enquiries"}
                        </span>
                        <React.Fragment>
                          {"\npartnerships@fountain.fm\n\n"}
                        </React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ textDecorationLine: "underline" }}
                        >
                          {"Advertising Enquiries"}
                        </span>
                        <React.Fragment>
                          {"\nadvertising@fountain.fm"}
                        </React.Fragment>
                      </React.Fragment>
                    ) : (
                      <React.Fragment>
                        <React.Fragment>{""}</React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ textDecorationLine: "underline" }}
                        >
                          {"Press Inquiries"}
                        </span>
                        <React.Fragment>
                          {"\npress@fountain.fm\n\n"}
                        </React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ textDecorationLine: "underline" }}
                        >
                          {"Partnership Enquiries"}
                        </span>
                        <React.Fragment>
                          {"\npartnerships@fountain.fm\n\n"}
                        </React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ textDecorationLine: "underline" }}
                        >
                          {"Advertising Enquiries"}
                        </span>
                        <React.Fragment>
                          {"\nadvertising@fountain.fm\n"}
                        </React.Fragment>
                      </React.Fragment>
                    )}
                  </h6>
                ) : null}
              </div>
            ) : null}
            {true ? (
              <BlogPosts
                className={classNames("__wab_instance", sty.blogPosts__jZ8D)}
              />
            ) : null}
            {(
              hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
            ) ? (
              <div className={classNames(projectcss.all, sty.freeBox__mD9HD)}>
                {(
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? true
                    : true
                ) ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox___2Wx5I)}
                  >
                    {(
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? true
                        : true
                    ) ? (
                      <h3
                        className={classNames(
                          projectcss.all,
                          projectcss.h3,
                          projectcss.__wab_text,
                          sty.h3__i7AA4
                        )}
                      >
                        {hasVariant(globalVariants, "screen", "mobileOnly")
                          ? "Recent posts"
                          : "Press images"}
                      </h3>
                    ) : null}
                    {(
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? true
                        : true
                    ) ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___180Sf
                        )}
                      >
                        {(
                          hasVariant(globalVariants, "screen", "mobileOnly")
                            ? true
                            : true
                        ) ? (
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__rKml
                            )}
                          >
                            {(
                              hasVariant(globalVariants, "screen", "mobileOnly")
                                ? true
                                : true
                            ) ? (
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__tItO
                                )}
                              >
                                <p.PlasmicLink
                                  data-plasmic-name={"link"}
                                  data-plasmic-override={overrides.link}
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.a,
                                    sty.link
                                  )}
                                  component={Link}
                                  platform={"nextjs"}
                                >
                                  {(
                                    hasVariant(
                                      globalVariants,
                                      "screen",
                                      "mobileOnly"
                                    )
                                      ? true
                                      : true
                                  ) ? (
                                    <p.PlasmicImg
                                      alt={""}
                                      className={classNames(sty.img__j3H8A)}
                                      displayHeight={
                                        hasVariant(
                                          globalVariants,
                                          "screen",
                                          "mobileOnly"
                                        )
                                          ? ("210px" as const)
                                          : ("auto" as const)
                                      }
                                      displayMaxHeight={"none" as const}
                                      displayMaxWidth={"100%" as const}
                                      displayMinHeight={"0" as const}
                                      displayMinWidth={"0" as const}
                                      displayWidth={"563px" as const}
                                      loading={"lazy" as const}
                                      src={{
                                        src: "/plasmic/copy_of_fountain_listen_to_earn/images/wmn001Png.png",
                                        fullWidth: 1920,
                                        fullHeight: 1080,
                                        aspectRatio: undefined
                                      }}
                                    />
                                  ) : null}
                                </p.PlasmicLink>

                                {(
                                  hasVariant(
                                    globalVariants,
                                    "screen",
                                    "mobileOnly"
                                  )
                                    ? true
                                    : true
                                ) ? (
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__xX3Cd
                                    )}
                                  >
                                    <h4
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.h4,
                                        projectcss.__wab_text,
                                        sty.h4__hDpc0
                                      )}
                                    >
                                      {"Logo Marks"}
                                    </h4>

                                    <DownloadSvgrepoComsvgIcon
                                      className={classNames(
                                        projectcss.all,
                                        sty.svg__x2Ppj
                                      )}
                                      role={"img"}
                                    />
                                  </div>
                                ) : null}
                                {(
                                  hasVariant(
                                    globalVariants,
                                    "screen",
                                    "mobileOnly"
                                  )
                                    ? true
                                    : true
                                ) ? (
                                  <h6
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.h6,
                                      projectcss.__wab_text,
                                      sty.h6__jHiBs
                                    )}
                                  >
                                    {"720 KB"}
                                  </h6>
                                ) : null}
                              </div>
                            ) : null}
                          </div>
                        ) : null}
                        {(
                          hasVariant(globalVariants, "screen", "mobileOnly")
                            ? true
                            : true
                        ) ? (
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__oBt56
                            )}
                          >
                            {(
                              hasVariant(globalVariants, "screen", "mobileOnly")
                                ? true
                                : true
                            ) ? (
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__dvnMr
                                )}
                              >
                                <p.PlasmicImg
                                  alt={""}
                                  className={classNames(sty.img__qDnI)}
                                  displayHeight={
                                    hasVariant(
                                      globalVariants,
                                      "screen",
                                      "mobileOnly"
                                    )
                                      ? ("auto" as const)
                                      : ("317px" as const)
                                  }
                                  displayMaxHeight={"none" as const}
                                  displayMaxWidth={
                                    hasVariant(
                                      globalVariants,
                                      "screen",
                                      "mobileOnly"
                                    )
                                      ? ("100%" as const)
                                      : ("100%" as const)
                                  }
                                  displayMinHeight={"0" as const}
                                  displayMinWidth={"0" as const}
                                  displayWidth={"auto" as const}
                                  loading={
                                    hasVariant(
                                      globalVariants,
                                      "screen",
                                      "mobileOnly"
                                    )
                                      ? ("lazy" as const)
                                      : ("lazy" as const)
                                  }
                                  src={
                                    hasVariant(
                                      globalVariants,
                                      "screen",
                                      "mobileOnly"
                                    )
                                      ? {
                                          src: "/plasmic/copy_of_fountain_listen_to_earn/images/image21.jpeg",
                                          fullWidth: 1920,
                                          fullHeight: 1080,
                                          aspectRatio: undefined
                                        }
                                      : {
                                          src: "/plasmic/copy_of_fountain_listen_to_earn/images/previewed98Png.png",
                                          fullWidth: 1920,
                                          fullHeight: 1080,
                                          aspectRatio: undefined
                                        }
                                  }
                                />

                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox___8MRdS
                                  )}
                                >
                                  <h4
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.h4,
                                      projectcss.__wab_text,
                                      sty.h4__fBywR
                                    )}
                                  >
                                    {"Product Screens"}
                                  </h4>

                                  <DownloadSvgrepoComsvgIcon
                                    className={classNames(
                                      projectcss.all,
                                      sty.svg__s3Ndu
                                    )}
                                    role={"img"}
                                  />
                                </div>

                                <h6
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.h6,
                                    projectcss.__wab_text,
                                    sty.h6__rGsSf
                                  )}
                                >
                                  {"12 MB"}
                                </h6>
                              </div>
                            ) : null}
                          </div>
                        ) : null}
                      </div>
                    ) : null}
                  </div>
                ) : null}
              </div>
            ) : null}

            <BlogPosts
              className={classNames("__wab_instance", sty.blogPosts__ur3Uv)}
            />

            <Footer
              data-plasmic-name={"footer"}
              data-plasmic-override={overrides.footer}
              className={classNames("__wab_instance", sty.footer)}
            />

            <Reveal
              className={classNames("__wab_instance", sty.reveal__nEry4)}
              triggerOnce={true}
            >
              {true ? (
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__nXdtV)}
                  displayHeight={"auto" as const}
                  displayMaxHeight={"none" as const}
                  displayMaxWidth={"none" as const}
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0" as const}
                  displayWidth={"auto" as const}
                  src={"https://placekitten.com/300/200" as const}
                />
              ) : null}
            </Reveal>
          </p.Stack>
        ) : null}
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "navbar",
    "foreground9",
    "foreground8",
    "section",
    "foreground",
    "link",
    "footer"
  ],
  navbar: ["navbar"],
  foreground9: ["foreground9"],
  foreground8: ["foreground8"],
  section: ["section", "foreground"],
  foreground: ["foreground"],
  link: ["link"],
  footer: ["footer"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  navbar: typeof Navbar;
  foreground9: "div";
  foreground8: "div";
  section: "section";
  foreground: "div";
  link: "a";
  footer: typeof Footer;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  Plasmic_6Press__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: Plasmic_6Press__VariantsArgs;
    args?: Plasmic_6Press__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<Plasmic_6Press__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<Plasmic_6Press__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: Plasmic_6Press__ArgProps,
      internalVariantPropNames: Plasmic_6Press__VariantProps
    });

    return Plasmic_6Press__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "Plasmic_6Press";
  } else {
    func.displayName = `Plasmic_6Press.${nodeName}`;
  }
  return func;
}

export const Plasmic_6Press = Object.assign(
  // Top-level Plasmic_6Press renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    navbar: makeNodeComponent("navbar"),
    foreground9: makeNodeComponent("foreground9"),
    foreground8: makeNodeComponent("foreground8"),
    section: makeNodeComponent("section"),
    foreground: makeNodeComponent("foreground"),
    link: makeNodeComponent("link"),
    footer: makeNodeComponent("footer"),

    // Metadata about props expected for Plasmic_6Press
    internalVariantProps: Plasmic_6Press__VariantProps,
    internalArgProps: Plasmic_6Press__ArgProps
  }
);

export default Plasmic_6Press;
/* prettier-ignore-end */
