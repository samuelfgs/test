// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 6BobAUw5T3TCqT8ypcszbG
// Component: krEvZIR-QOuhWpu
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Button from "../../Button"; // plasmic-import: KhbeBVaAisx47/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_fountain_fm_css from "../fountain_fm/plasmic_fountain_fm.module.css"; // plasmic-import: q7mc6yKyK23FBh7x1aGwnG/projectcss
import projectcss from "./plasmic_copy_of_fountain_listen_to_earn.module.css"; // plasmic-import: 6BobAUw5T3TCqT8ypcszbG/projectcss
import sty from "./PlasmicCantFindWhatYoureLookingFor.module.css"; // plasmic-import: krEvZIR-QOuhWpu/css

import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: S2Divheo_3CFcy/icon

export type PlasmicCantFindWhatYoureLookingFor__VariantMembers = {};

export type PlasmicCantFindWhatYoureLookingFor__VariantsArgs = {};
type VariantPropType = keyof PlasmicCantFindWhatYoureLookingFor__VariantsArgs;
export const PlasmicCantFindWhatYoureLookingFor__VariantProps =
  new Array<VariantPropType>();

export type PlasmicCantFindWhatYoureLookingFor__ArgsType = {};
type ArgPropType = keyof PlasmicCantFindWhatYoureLookingFor__ArgsType;
export const PlasmicCantFindWhatYoureLookingFor__ArgProps =
  new Array<ArgPropType>();

export type PlasmicCantFindWhatYoureLookingFor__OverridesType = {
  root?: p.Flex<"div">;
  freeBox?: p.Flex<"div">;
  h4?: p.Flex<"h4">;
  button?: p.Flex<typeof Button>;
};

export interface DefaultCantFindWhatYoureLookingForProps {
  className?: string;
}

export const defaultCantFindWhatYoureLookingFor__Args: Partial<PlasmicCantFindWhatYoureLookingFor__ArgsType> =
  {};

function PlasmicCantFindWhatYoureLookingFor__RenderFunc(props: {
  variants: PlasmicCantFindWhatYoureLookingFor__VariantsArgs;
  args: PlasmicCantFindWhatYoureLookingFor__ArgsType;
  overrides: PlasmicCantFindWhatYoureLookingFor__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const args = Object.assign(
    {},
    defaultCantFindWhatYoureLookingFor__Args,
    props.args
  );
  const $props = args;
  const $ctx = ph.useDataEnv?.() || {};

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_fountain_fm_css.plasmic_tokens,
        sty.root
      )}
    >
      <p.Stack
        as={"div"}
        data-plasmic-name={"freeBox"}
        data-plasmic-override={overrides.freeBox}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox)}
      >
        <h4
          data-plasmic-name={"h4"}
          data-plasmic-override={overrides.h4}
          className={classNames(
            projectcss.all,
            projectcss.h4,
            projectcss.__wab_text,
            sty.h4
          )}
        >
          {"Can't find what you're looking for?"}
        </h4>

        <Button
          data-plasmic-name={"button"}
          data-plasmic-override={overrides.button}
          className={classNames("__wab_instance", sty.button)}
        >
          {"Contact us"}
        </Button>
      </p.Stack>
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "freeBox", "h4", "button"],
  freeBox: ["freeBox", "h4", "button"],
  h4: ["h4"],
  button: ["button"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  freeBox: "div";
  h4: "h4";
  button: typeof Button;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicCantFindWhatYoureLookingFor__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicCantFindWhatYoureLookingFor__VariantsArgs;
    args?: PlasmicCantFindWhatYoureLookingFor__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit< // Specify variants directly as props
    PlasmicCantFindWhatYoureLookingFor__VariantsArgs,
    ReservedPropsType
  > &
    // Specify args directly as props
    Omit<PlasmicCantFindWhatYoureLookingFor__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicCantFindWhatYoureLookingFor__ArgProps,
      internalVariantPropNames: PlasmicCantFindWhatYoureLookingFor__VariantProps
    });

    return PlasmicCantFindWhatYoureLookingFor__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicCantFindWhatYoureLookingFor";
  } else {
    func.displayName = `PlasmicCantFindWhatYoureLookingFor.${nodeName}`;
  }
  return func;
}

export const PlasmicCantFindWhatYoureLookingFor = Object.assign(
  // Top-level PlasmicCantFindWhatYoureLookingFor renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),
    h4: makeNodeComponent("h4"),
    button: makeNodeComponent("button"),

    // Metadata about props expected for PlasmicCantFindWhatYoureLookingFor
    internalVariantProps: PlasmicCantFindWhatYoureLookingFor__VariantProps,
    internalArgProps: PlasmicCantFindWhatYoureLookingFor__ArgProps
  }
);

export default PlasmicCantFindWhatYoureLookingFor;
/* prettier-ignore-end */
