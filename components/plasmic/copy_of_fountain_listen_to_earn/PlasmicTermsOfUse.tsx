// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 6BobAUw5T3TCqT8ypcszbG
// Component: s1uRi_bvBjbgd-1
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import BlogPosts from "../../BlogPosts"; // plasmic-import: n3aIYan7r0SEV/component
import Navbar from "../../Navbar"; // plasmic-import: uTDo8cXNPa_B1XC/component
import Footer from "../../Footer"; // plasmic-import: nmBaA0odzpiNWE/component
import { Reveal } from "@plasmicpkgs/react-awesome-reveal"; // plasmic-import: R6s1FdhksG/codeComponent

import { useScreenVariants as useScreenVariantsuXvTXvy0VuZNuyJ } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: UXvTXvy0VuZNuyJ/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_fountain_fm_css from "../fountain_fm/plasmic_fountain_fm.module.css"; // plasmic-import: q7mc6yKyK23FBh7x1aGwnG/projectcss
import projectcss from "./plasmic_copy_of_fountain_listen_to_earn.module.css"; // plasmic-import: 6BobAUw5T3TCqT8ypcszbG/projectcss
import sty from "./PlasmicTermsOfUse.module.css"; // plasmic-import: s1uRi_bvBjbgd-1/css

import Icon8Icon from "./icons/PlasmicIcon__Icon8"; // plasmic-import: a-uf39TcX85gUT/icon

export type PlasmicTermsOfUse__VariantMembers = {};

export type PlasmicTermsOfUse__VariantsArgs = {};
type VariantPropType = keyof PlasmicTermsOfUse__VariantsArgs;
export const PlasmicTermsOfUse__VariantProps = new Array<VariantPropType>();

export type PlasmicTermsOfUse__ArgsType = {};
type ArgPropType = keyof PlasmicTermsOfUse__ArgsType;
export const PlasmicTermsOfUse__ArgProps = new Array<ArgPropType>();

export type PlasmicTermsOfUse__OverridesType = {
  root?: p.Flex<"div">;
  foreground9?: p.Flex<"div">;
  foreground8?: p.Flex<"div">;
  section?: p.Flex<"section">;
  foreground?: p.Flex<"div">;
  blogPosts?: p.Flex<typeof BlogPosts>;
  navbar?: p.Flex<typeof Navbar>;
  h2?: p.Flex<"h2">;
  h6?: p.Flex<"h6">;
  footer?: p.Flex<typeof Footer>;
  reveal?: p.Flex<typeof Reveal>;
};

export interface DefaultTermsOfUseProps {}

export const defaultTermsOfUse__Args: Partial<PlasmicTermsOfUse__ArgsType> = {};

function PlasmicTermsOfUse__RenderFunc(props: {
  variants: PlasmicTermsOfUse__VariantsArgs;
  args: PlasmicTermsOfUse__ArgsType;
  overrides: PlasmicTermsOfUse__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const args = Object.assign({}, defaultTermsOfUse__Args, props.args);
  const $props = args;
  const $ctx = ph.useDataEnv?.() || {};

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsuXvTXvy0VuZNuyJ()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{"FAQ Item"}</title>
        <meta key="og:title" property="og:title" content={"FAQ Item"} />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        {true ? (
          <p.Stack
            as={"div"}
            data-plasmic-name={"root"}
            data-plasmic-override={overrides.root}
            data-plasmic-root={true}
            data-plasmic-for-node={forNode}
            hasGap={true}
            className={classNames(
              projectcss.all,
              projectcss.root_reset,
              projectcss.plasmic_default_styles,
              projectcss.plasmic_mixins,
              projectcss.plasmic_tokens,
              plasmic_fountain_fm_css.plasmic_tokens,
              sty.root
            )}
          >
            {true ? (
              <div className={classNames(projectcss.all, sty.freeBox___82I2R)}>
                {(
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? true
                    : false
                ) ? (
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__fjM45)}
                  >
                    <p.Stack
                      as={"div"}
                      data-plasmic-name={"foreground9"}
                      data-plasmic-override={overrides.foreground9}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.foreground9)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__bnyIu
                        )}
                      >
                        {"What you can do on Fountain"}
                      </div>
                    </p.Stack>

                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__sUcV)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__ypTIh
                        )}
                      >
                        <p.PlasmicImg
                          alt={""}
                          className={classNames(sty.img__erkqM)}
                          displayHeight={"60px" as const}
                          displayMaxHeight={"none" as const}
                          displayMaxWidth={"100%" as const}
                          displayMinHeight={"0" as const}
                          displayMinWidth={"0" as const}
                          displayWidth={"auto" as const}
                          loading={"lazy" as const}
                          src={{
                            src: "/plasmic/copy_of_fountain_listen_to_earn/images/image43.png",
                            fullWidth: 200,
                            fullHeight: 200,
                            aspectRatio: undefined
                          }}
                        />
                      </div>

                      {false ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__vj9Dj
                          )}
                        >
                          <Icon8Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__kdMBt
                            )}
                            role={"img"}
                          />
                        </div>
                      ) : null}

                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__f9DAe
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__iifQt
                          )}
                        >
                          {"EARN"}
                        </div>

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__g1Wlz
                          )}
                        >
                          {"Get paid to listen to podcasts"}
                        </div>
                      </p.Stack>
                    </p.Stack>

                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__dztzi)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___57MOm
                        )}
                      >
                        <p.PlasmicImg
                          alt={""}
                          className={classNames(sty.img__cf1Z0)}
                          displayHeight={"60px" as const}
                          displayMaxHeight={"none" as const}
                          displayMaxWidth={"100%" as const}
                          displayMinHeight={"0" as const}
                          displayMinWidth={"0" as const}
                          displayWidth={"auto" as const}
                          loading={"lazy" as const}
                          src={{
                            src: "/plasmic/copy_of_fountain_listen_to_earn/images/image44.png",
                            fullWidth: 200,
                            fullHeight: 200,
                            aspectRatio: undefined
                          }}
                        />
                      </div>

                      {false ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__mEOte
                          )}
                        >
                          <Icon8Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg___2Xed5
                            )}
                            role={"img"}
                          />
                        </div>
                      ) : null}

                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__fBh29
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__zun9M
                          )}
                        >
                          {"SUPPORT"}
                        </div>

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___8XYm
                          )}
                        >
                          {"Give back to podcasts you love"}
                        </div>
                      </p.Stack>
                    </p.Stack>

                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___4G142
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__rGz0H
                        )}
                      >
                        <p.PlasmicImg
                          alt={""}
                          className={classNames(sty.img__oOQka)}
                          displayHeight={"60px" as const}
                          displayMaxHeight={"none" as const}
                          displayMaxWidth={"100%" as const}
                          displayMinHeight={"0" as const}
                          displayMinWidth={"0" as const}
                          displayWidth={"auto" as const}
                          loading={"lazy" as const}
                          src={{
                            src: "/plasmic/copy_of_fountain_listen_to_earn/images/image45.png",
                            fullWidth: 200,
                            fullHeight: 200,
                            aspectRatio: undefined
                          }}
                        />
                      </div>

                      {false ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__rycLr
                          )}
                        >
                          <Icon8Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__pJeD8
                            )}
                            role={"img"}
                          />
                        </div>
                      ) : null}

                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__jrF2H
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__hdMsa
                          )}
                        >
                          {"SHARE"}
                        </div>

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__ojqNz
                          )}
                        >
                          {"Share podcasts with friends"}
                        </div>
                      </p.Stack>
                    </p.Stack>
                  </p.Stack>
                ) : null}
                {true ? (
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__tr2Mf)}
                  >
                    <p.Stack
                      as={"div"}
                      data-plasmic-name={"foreground8"}
                      data-plasmic-override={overrides.foreground8}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.foreground8)}
                    >
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___2Onug
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox___5J3Dr
                          )}
                        >
                          <p.PlasmicImg
                            alt={""}
                            className={classNames(sty.img__plc0X)}
                            displayHeight={"56px" as const}
                            displayMaxHeight={"none" as const}
                            displayMaxWidth={"none" as const}
                            displayMinHeight={"0" as const}
                            displayMinWidth={"0" as const}
                            displayWidth={"56px" as const}
                            src={
                              "https://emojipedia-us.s3.dualstack.us-west-1.amazonaws.com/thumbs/144/twitter/281/red-apple_1f34e.png" as const
                            }
                          />
                        </div>

                        {false ? (
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__ya9S
                            )}
                          >
                            <Icon8Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg__siE6B
                              )}
                              role={"img"}
                            />
                          </div>
                        ) : null}

                        <p.Stack
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__hNNre
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__eamN
                            )}
                          >
                            {"EARN"}
                          </div>

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___1ISuh
                            )}
                          >
                            {"Get paid to listen to podcasts"}
                          </div>
                        </p.Stack>
                      </p.Stack>

                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__zbMlb
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__dCbCb
                          )}
                        >
                          <p.PlasmicImg
                            alt={""}
                            className={classNames(sty.img__vD1Ue)}
                            displayHeight={"56px" as const}
                            displayMaxHeight={"none" as const}
                            displayMaxWidth={"none" as const}
                            displayMinHeight={"0" as const}
                            displayMinWidth={"0" as const}
                            displayWidth={"56px" as const}
                            src={
                              "https://emojipedia-us.s3.dualstack.us-west-1.amazonaws.com/thumbs/144/twitter/281/banana_1f34c.png" as const
                            }
                          />
                        </div>

                        {false ? (
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__v1WQv
                            )}
                          >
                            <Icon8Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg__lvXmv
                              )}
                              role={"img"}
                            />
                          </div>
                        ) : null}

                        <p.Stack
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__gwWpK
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___4QuQm
                            )}
                          >
                            {"SUPPORT"}
                          </div>

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__vfvve
                            )}
                          >
                            {"Give back to podcasts you love"}
                          </div>
                        </p.Stack>
                      </p.Stack>

                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__nzBqP
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox___0Rc1P
                          )}
                        >
                          <p.PlasmicImg
                            alt={""}
                            className={classNames(sty.img__eGfzy)}
                            displayHeight={"56px" as const}
                            displayMaxHeight={"none" as const}
                            displayMaxWidth={"none" as const}
                            displayMinHeight={"0" as const}
                            displayMinWidth={"0" as const}
                            displayWidth={"56px" as const}
                            src={
                              "https://emojipedia-us.s3.dualstack.us-west-1.amazonaws.com/thumbs/144/twitter/281/cherries_1f352.png" as const
                            }
                          />
                        </div>

                        {false ? (
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox___87197
                            )}
                          >
                            <Icon8Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg__bztow
                              )}
                              role={"img"}
                            />
                          </div>
                        ) : null}

                        <p.Stack
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__mr9Pm
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__k613S
                            )}
                          >
                            {"SHARE"}
                          </div>

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__ah8Lq
                            )}
                          >
                            {"Share podcasts with others"}
                          </div>
                        </p.Stack>
                      </p.Stack>
                    </p.Stack>
                  </p.Stack>
                ) : null}
                {true ? (
                  <section
                    data-plasmic-name={"section"}
                    data-plasmic-override={overrides.section}
                    className={classNames(projectcss.all, sty.section)}
                  >
                    <p.Stack
                      as={"div"}
                      data-plasmic-name={"foreground"}
                      data-plasmic-override={overrides.foreground}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.foreground)}
                    >
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__e9RNg
                        )}
                      >
                        <p.Stack
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__gxUz9
                          )}
                        >
                          <p.Stack
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox___95Lks
                            )}
                          >
                            {false ? (
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox___8Sz2R
                                )}
                              >
                                <Icon8Icon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__hkzjv
                                  )}
                                  role={"img"}
                                />
                              </div>
                            ) : null}

                            <p.Stack
                              as={"div"}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__hb5Ue
                              )}
                            >
                              <p.PlasmicImg
                                alt={""}
                                className={classNames(sty.img__oScHx)}
                                displayHeight={"auto" as const}
                                displayMaxHeight={"none" as const}
                                displayMaxWidth={"100%" as const}
                                displayMinHeight={"0" as const}
                                displayMinWidth={"0" as const}
                                displayWidth={"auto" as const}
                                loading={"lazy" as const}
                                src={{
                                  src: "/plasmic/copy_of_fountain_listen_to_earn/images/image25.jpeg",
                                  fullWidth: 200,
                                  fullHeight: 200,
                                  aspectRatio: undefined
                                }}
                              />

                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text___7By9C
                                )}
                              >
                                {"Earn"}
                              </div>

                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text___1RxYl
                                )}
                              >
                                {"Get paid to listen to podcasts"}
                              </div>
                            </p.Stack>
                          </p.Stack>

                          <p.Stack
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__f6NFd
                            )}
                          >
                            {false ? (
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__coAes
                                )}
                              >
                                <Icon8Icon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__dBcLg
                                  )}
                                  role={"img"}
                                />
                              </div>
                            ) : null}

                            <p.Stack
                              as={"div"}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__xXx5D
                              )}
                            >
                              <p.PlasmicImg
                                alt={""}
                                className={classNames(sty.img__w8Kcb)}
                                displayHeight={"223px" as const}
                                displayMaxHeight={"none" as const}
                                displayMaxWidth={
                                  hasVariant(
                                    globalVariants,
                                    "screen",
                                    "mobileOnly"
                                  )
                                    ? ("100%" as const)
                                    : ("100%" as const)
                                }
                                displayMinHeight={"0" as const}
                                displayMinWidth={"0" as const}
                                displayWidth={"auto" as const}
                                loading={
                                  hasVariant(
                                    globalVariants,
                                    "screen",
                                    "mobileOnly"
                                  )
                                    ? ("lazy" as const)
                                    : ("lazy" as const)
                                }
                                src={
                                  hasVariant(
                                    globalVariants,
                                    "screen",
                                    "mobileOnly"
                                  )
                                    ? {
                                        src: "/plasmic/copy_of_fountain_listen_to_earn/images/image26.jpeg",
                                        fullWidth: 200,
                                        fullHeight: 200,
                                        aspectRatio: undefined
                                      }
                                    : {
                                        src: "/plasmic/copy_of_fountain_listen_to_earn/images/image26.jpeg",
                                        fullWidth: 200,
                                        fullHeight: 200,
                                        aspectRatio: undefined
                                      }
                                }
                              />

                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text___4S60J
                                )}
                              >
                                {"Support"}
                              </div>

                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__ub5Oe
                                )}
                              >
                                {"Give back to podcasts you love"}
                              </div>
                            </p.Stack>
                          </p.Stack>

                          <p.Stack
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__zAbsK
                            )}
                          >
                            {false ? (
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__t3TxP
                                )}
                              >
                                <Icon8Icon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg___33Nos
                                  )}
                                  role={"img"}
                                />
                              </div>
                            ) : null}

                            <p.Stack
                              as={"div"}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__b3KFv
                              )}
                            >
                              <p.PlasmicImg
                                alt={""}
                                className={classNames(sty.img__lvWK)}
                                displayHeight={"222px" as const}
                                displayMaxHeight={"none" as const}
                                displayMaxWidth={"100%" as const}
                                displayMinHeight={"0" as const}
                                displayMinWidth={"0" as const}
                                displayWidth={"auto" as const}
                                loading={"lazy" as const}
                                src={{
                                  src: "/plasmic/copy_of_fountain_listen_to_earn/images/image27.jpeg",
                                  fullWidth: 200,
                                  fullHeight: 200,
                                  aspectRatio: undefined
                                }}
                              />

                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__hOuqv
                                )}
                              >
                                {"Share"}
                              </div>

                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__qkMaO
                                )}
                              >
                                {"Share podcasts with others"}
                              </div>
                            </p.Stack>
                          </p.Stack>
                        </p.Stack>
                      </p.Stack>
                    </p.Stack>
                  </section>
                ) : null}
              </div>
            ) : null}
            {true ? (
              <BlogPosts
                data-plasmic-name={"blogPosts"}
                data-plasmic-override={overrides.blogPosts}
                className={classNames("__wab_instance", sty.blogPosts)}
              />
            ) : null}

            <Navbar
              data-plasmic-name={"navbar"}
              data-plasmic-override={overrides.navbar}
              className={classNames("__wab_instance", sty.navbar)}
            />

            <div className={classNames(projectcss.all, sty.freeBox__kDiMm)}>
              {true ? (
                <div
                  className={classNames(projectcss.all, sty.freeBox___0Rj1N)}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__bhDcj)}
                  >
                    <h2
                      data-plasmic-name={"h2"}
                      data-plasmic-override={overrides.h2}
                      className={classNames(
                        projectcss.all,
                        projectcss.h2,
                        projectcss.__wab_text,
                        sty.h2
                      )}
                    >
                      {"Terms of Use"}
                    </h2>

                    <h6
                      data-plasmic-name={"h6"}
                      data-plasmic-override={overrides.h6}
                      className={classNames(
                        projectcss.all,
                        projectcss.h6,
                        projectcss.__wab_text,
                        sty.h6
                      )}
                    >
                      <React.Fragment>
                        <React.Fragment>{""}</React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ textDecorationLine: "underline" }}
                        >
                          {"1. Introduction​"}
                        </span>
                        <React.Fragment>
                          {
                            "\n1.1 These Terms affect your legal rights and obligations if you create a Fountain account so please read them carefully. If you do not agree to be bound by these Terms, do not create an account, or if you have already done so, please notify us that you have done so and we shall delete any personal data we have already collected.\n1.2 If you have any questions, you can contact us by email. You should also read our Privacy Policy which sets out how we process any personal data that you provide to us.\n1.3 We reserve the right to update these Terms from time to time at our discretion. We may do so for technical or legal reasons, or because the needs of our business have changed. If we reasonably believe that the change to the Terms is significant, we shall notify you by email. Otherwise, updated Terms will be effective as soon as they are accessible. You are responsible for regularly reviewing these Terms so that you are aware of any changes to them.\n\n"
                          }
                        </React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ textDecorationLine: "underline" }}
                        >
                          {"2. Use o"}
                        </span>
                        <React.Fragment>
                          {
                            "f the App\n2.1 You can download, view and print all content provided to you or otherwise accessible within the App for your own personal use.\n2.2 You must not, and must not permit or assist any third party to (a) use the App for any illegal or unauthorised use; (b) copy the whole or any part of the App nor arrange or create derivative works based on the App except to the extent permitted by law not capable of exclusion by agreement; (c) distribute, sell, sub-license, lease, resell or purport to assign access to the App; and/or (d) access the App only to build a competitive product or service or to build a product using similar ideas, features, functions or graphics.\n2.3 From time to time you may be entitled to unlock features of the App on payment of a fee. Payment may be made directly to us or, if permitted, via a third party payment provider. If payment is made via a third party payment provider, we do not receive your payment details. You agree that you cannot cancel the purchase of a feature for your App (and claim a refund) because the feature is immediately downloaded. Your consumer statutory rights are not affected.\n\n"
                          }
                        </React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ textDecorationLine: "underline" }}
                        >
                          {"3. Disclaimer"}
                        </span>
                        <React.Fragment>
                          {
                            "\n3.1 You agree that it is possible that your device may not hear you properly or may misunderstand what you say when using the App. You agree that we are not responsible for any inaccuracies in information or content that you may receive from your device as a result of using the App.\n3.2 In any event, all content provided through the App is for information only and you should not rely on it. To the extent permitted by law, and subject to Condition 3.3, the App is provided “as is” without any warranties or conditions of any kind in relation to the content, reliability, fitness for purpose, quality and/or functionality.\n3.3 If there is a problem with the App that damages a device or any other digital content belonging to you and this is caused by our failure to use reasonable App and care, we will either repair the damage or pay you compensation up to £50 per device. However, we will not be liable for damage which you could have avoided by following our advice to enable an update offered to you for free, or for damage caused by you failing to correctly follow our instructions or these Terms.\n3.4 Nothing in these Terms shall be construed as excluding or limiting our liability for death or personal injury caused by our negligence, for fraud or fraudulent misrepresentation or for any other liability that cannot be excluded by English law.\n\n"
                          }
                        </React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ textDecorationLine: "underline" }}
                        >
                          {"4. Intellectual Property Rights"}
                        </span>
                        <React.Fragment>
                          {
                            "\n4.1 The copyright in the App including all information, data, recordings and all source code and other software is owned by us or or licensed to us. All rights are reserved. No rights in the copyright transfer to you under these Terms.\n\n"
                          }
                        </React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ textDecorationLine: "underline" }}
                        >
                          {"5. Termination or Suspension"}
                        </span>
                        <React.Fragment>
                          {
                            "\n5.1 We reserve the right to suspend or terminate your access to the App at any time and without liability.\n5.2 If you would like us to delete your personal data from our systems too, please contact us so that we can do so.\n\n"
                          }
                        </React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ textDecorationLine: "underline" }}
                        >
                          {"6. General"}
                        </span>
                        <React.Fragment>
                          {
                            "\n6.1 These Terms and the Privacy Policy (as amended from time to time) constitute the entire agreement relating to your use of the App.\n6.2 If any provision of these Terms is held by a court of competent jurisdiction to be invalid or unenforceable, then such provision shall be construed, as nearly as possible, to reflect the intentions of the parties and all other provisions shall remain in full force and effect.\n6.3 Our failure to exercise or enforce any right or provision of these Terms shall not constitute a waiver of such right or provision.\n6.4 We may assign or otherwise transfer our rights and obligations in terms of these Terms to third parties.\n6.5 These Terms shall be governed by and construed in accordance with English law and you agree to submit to the exclusive jurisdiction of the English Courts."
                          }
                        </React.Fragment>
                      </React.Fragment>
                    </h6>
                  </div>
                </div>
              ) : null}
            </div>

            <Footer
              data-plasmic-name={"footer"}
              data-plasmic-override={overrides.footer}
              className={classNames("__wab_instance", sty.footer)}
            />

            {true ? (
              <Reveal
                data-plasmic-name={"reveal"}
                data-plasmic-override={overrides.reveal}
                className={classNames("__wab_instance", sty.reveal)}
                triggerOnce={true}
              >
                {true ? (
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__adCEz)}
                    displayHeight={"auto" as const}
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"none" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"auto" as const}
                    src={"https://placekitten.com/300/200" as const}
                  />
                ) : null}
              </Reveal>
            ) : null}
          </p.Stack>
        ) : null}
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "foreground9",
    "foreground8",
    "section",
    "foreground",
    "blogPosts",
    "navbar",
    "h2",
    "h6",
    "footer",
    "reveal"
  ],
  foreground9: ["foreground9"],
  foreground8: ["foreground8"],
  section: ["section", "foreground"],
  foreground: ["foreground"],
  blogPosts: ["blogPosts"],
  navbar: ["navbar"],
  h2: ["h2"],
  h6: ["h6"],
  footer: ["footer"],
  reveal: ["reveal"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  foreground9: "div";
  foreground8: "div";
  section: "section";
  foreground: "div";
  blogPosts: typeof BlogPosts;
  navbar: typeof Navbar;
  h2: "h2";
  h6: "h6";
  footer: typeof Footer;
  reveal: typeof Reveal;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicTermsOfUse__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicTermsOfUse__VariantsArgs;
    args?: PlasmicTermsOfUse__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicTermsOfUse__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicTermsOfUse__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicTermsOfUse__ArgProps,
      internalVariantPropNames: PlasmicTermsOfUse__VariantProps
    });

    return PlasmicTermsOfUse__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicTermsOfUse";
  } else {
    func.displayName = `PlasmicTermsOfUse.${nodeName}`;
  }
  return func;
}

export const PlasmicTermsOfUse = Object.assign(
  // Top-level PlasmicTermsOfUse renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    foreground9: makeNodeComponent("foreground9"),
    foreground8: makeNodeComponent("foreground8"),
    section: makeNodeComponent("section"),
    foreground: makeNodeComponent("foreground"),
    blogPosts: makeNodeComponent("blogPosts"),
    navbar: makeNodeComponent("navbar"),
    h2: makeNodeComponent("h2"),
    h6: makeNodeComponent("h6"),
    footer: makeNodeComponent("footer"),
    reveal: makeNodeComponent("reveal"),

    // Metadata about props expected for PlasmicTermsOfUse
    internalVariantProps: PlasmicTermsOfUse__VariantProps,
    internalArgProps: PlasmicTermsOfUse__ArgProps
  }
);

export default PlasmicTermsOfUse;
/* prettier-ignore-end */
