// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 6BobAUw5T3TCqT8ypcszbG
// Component: uTDo8cXNPa_B1XC
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { NavigationBar } from "@plasmicpkgs/plasmic-nav"; // plasmic-import: jGx9tiKJoex/codeComponent
import Button from "../../Button"; // plasmic-import: KhbeBVaAisx47/component

import { useScreenVariants as useScreenVariantsuXvTXvy0VuZNuyJ } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: UXvTXvy0VuZNuyJ/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_fountain_fm_css from "../fountain_fm/plasmic_fountain_fm.module.css"; // plasmic-import: q7mc6yKyK23FBh7x1aGwnG/projectcss
import projectcss from "./plasmic_copy_of_fountain_listen_to_earn.module.css"; // plasmic-import: 6BobAUw5T3TCqT8ypcszbG/projectcss
import sty from "./PlasmicNavbar.module.css"; // plasmic-import: uTDo8cXNPa_B1XC/css

import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: S2Divheo_3CFcy/icon

export type PlasmicNavbar__VariantMembers = {};

export type PlasmicNavbar__VariantsArgs = {};
type VariantPropType = keyof PlasmicNavbar__VariantsArgs;
export const PlasmicNavbar__VariantProps = new Array<VariantPropType>();

export type PlasmicNavbar__ArgsType = {};
type ArgPropType = keyof PlasmicNavbar__ArgsType;
export const PlasmicNavbar__ArgProps = new Array<ArgPropType>();

export type PlasmicNavbar__OverridesType = {
  root?: p.Flex<typeof NavigationBar>;
  joinFountain?: p.Flex<"a"> & Partial<LinkProps>;
};

export interface DefaultNavbarProps {
  className?: string;
}

export const defaultNavbar__Args: Partial<PlasmicNavbar__ArgsType> = {};

function PlasmicNavbar__RenderFunc(props: {
  variants: PlasmicNavbar__VariantsArgs;
  args: PlasmicNavbar__ArgsType;
  overrides: PlasmicNavbar__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const args = Object.assign({}, defaultNavbar__Args, props.args);
  const $props = args;
  const $ctx = ph.useDataEnv?.() || {};

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsuXvTXvy0VuZNuyJ()
  });

  return (
    <NavigationBar
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      brand={
        <p.PlasmicLink
          className={classNames(projectcss.all, projectcss.a, sty.link__htDkT)}
          component={Link}
          href={"/" as const}
          platform={"nextjs"}
        >
          <p.PlasmicImg
            alt={""}
            className={classNames(sty.img__uqExn)}
            displayHeight={"40px" as const}
            displayMaxHeight={"none" as const}
            displayMaxWidth={"none" as const}
            displayMinHeight={"0" as const}
            displayMinWidth={"0" as const}
            displayWidth={
              hasVariant(globalVariants, "screen", "mobileOnly")
                ? ("161px" as const)
                : ("auto" as const)
            }
            src={
              hasVariant(globalVariants, "screen", "mobileOnly")
                ? {
                    src: "/plasmic/copy_of_fountain_listen_to_earn/images/image41.png",
                    fullWidth: 1245,
                    fullHeight: 309,
                    aspectRatio: undefined
                  }
                : {
                    src: "/plasmic/copy_of_fountain_listen_to_earn/images/image41.png",
                    fullWidth: 1245,
                    fullHeight: 309,
                    aspectRatio: undefined
                  }
            }
          />
        </p.PlasmicLink>
      }
      className={classNames("__wab_instance", sty.root)}
      closeButton={
        <p.PlasmicImg
          alt={""}
          className={classNames(sty.img__zt2H6)}
          displayHeight={"auto" as const}
          displayMaxHeight={"none" as const}
          displayMaxWidth={
            hasVariant(globalVariants, "screen", "mobileOnly")
              ? ("28px" as const)
              : ("none" as const)
          }
          displayMinHeight={"0" as const}
          displayMinWidth={"0" as const}
          displayWidth={
            hasVariant(globalVariants, "screen", "mobileOnly")
              ? ("100%" as const)
              : ("auto" as const)
          }
          src={
            hasVariant(globalVariants, "screen", "mobileOnly")
              ? {
                  src: "/plasmic/copy_of_fountain_listen_to_earn/images/windowClose3Png.png",
                  fullWidth: 48,
                  fullHeight: 48,
                  aspectRatio: undefined
                }
              : ("https://static1.plasmic.app/close.svg" as const)
          }
        />
      }
      forceOpenMenu={
        hasVariant(globalVariants, "screen", "mobileOnly") ? true : false
      }
      itemsGap={8 as const}
      menuItems={
        <React.Fragment>
          <p.PlasmicLink
            className={classNames(
              projectcss.all,
              projectcss.a,
              projectcss.__wab_text,
              sty.link__csl4A
            )}
            component={Link}
            href={"/podcasters" as const}
            platform={"nextjs"}
          >
            <React.Fragment>
              <React.Fragment>{""}</React.Fragment>
              <span
                className={"plasmic_default__all plasmic_default__span"}
                style={{ color: "#FFFFFF" }}
              >
                {"Podcasters"}
              </span>
              <React.Fragment>{""}</React.Fragment>
            </React.Fragment>
          </p.PlasmicLink>

          <p.PlasmicLink
            className={classNames(
              projectcss.all,
              projectcss.a,
              projectcss.__wab_text,
              sty.link__zl4G7
            )}
            component={Link}
            href={"/faqs" as const}
            platform={"nextjs"}
          >
            <React.Fragment>
              <React.Fragment>{""}</React.Fragment>
              <span
                className={"plasmic_default__all plasmic_default__span"}
                style={{ color: "#FFFFFF" }}
              >
                {"FAQs"}
              </span>
              <React.Fragment>{""}</React.Fragment>
            </React.Fragment>
          </p.PlasmicLink>

          <p.PlasmicLink
            className={classNames(
              projectcss.all,
              projectcss.a,
              projectcss.__wab_text,
              sty.link__vcta
            )}
            component={Link}
            href={"https://explore.fountain.fm/" as const}
            platform={"nextjs"}
          >
            <React.Fragment>
              <React.Fragment>{""}</React.Fragment>
              <span
                className={"plasmic_default__all plasmic_default__span"}
                style={{ color: "#FFFFFF" }}
              >
                {"Blog"}
              </span>
              <React.Fragment>{""}</React.Fragment>
            </React.Fragment>
          </p.PlasmicLink>

          {(
            hasVariant(globalVariants, "screen", "mobileOnly") ? true : false
          ) ? (
            <p.PlasmicLink
              data-plasmic-name={"joinFountain"}
              data-plasmic-override={overrides.joinFountain}
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.joinFountain
              )}
              component={Link}
              href={
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? ("/join-fountain" as const)
                  : undefined
              }
              platform={"nextjs"}
            >
              {hasVariant(globalVariants, "screen", "mobileOnly")
                ? "Join Fountain"
                : "FAQs"}
            </p.PlasmicLink>
          ) : null}
          {(
            hasVariant(globalVariants, "screen", "mobileOnly") ? true : false
          ) ? (
            <Button
              className={classNames("__wab_instance", sty.button__zTd2B)}
              link={"/join-fountain" as const}
              shape={"rounded" as const}
              showEndIcon={true}
            >
              {"Join Fountain"}
            </Button>
          ) : null}
          {(
            hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
          ) ? (
            <p.PlasmicLink
              className={classNames(
                projectcss.all,
                projectcss.a,
                sty.link__a2QnN
              )}
              component={Link}
              platform={"nextjs"}
            >
              {(
                hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
              ) ? (
                <Button
                  className={classNames("__wab_instance", sty.button__d6DvO)}
                  link={"/join-fountain" as const}
                  shape={"rounded" as const}
                  showEndIcon={true}
                >
                  {"Join Fountain"}
                </Button>
              ) : null}
            </p.PlasmicLink>
          ) : null}
        </React.Fragment>
      }
      openButton={
        <p.PlasmicImg
          alt={""}
          className={classNames(sty.img__qMoVg)}
          displayHeight={"auto" as const}
          displayMaxHeight={"none" as const}
          displayMaxWidth={
            hasVariant(globalVariants, "screen", "mobileOnly")
              ? ("28px" as const)
              : ("none" as const)
          }
          displayMinHeight={"0" as const}
          displayMinWidth={"0" as const}
          displayWidth={
            hasVariant(globalVariants, "screen", "mobileOnly")
              ? ("100%" as const)
              : ("auto" as const)
          }
          src={
            hasVariant(globalVariants, "screen", "mobileOnly")
              ? {
                  src: "/plasmic/copy_of_fountain_listen_to_earn/images/menu3Png.png",
                  fullWidth: 48,
                  fullHeight: 48,
                  aspectRatio: undefined
                }
              : ("https://static1.plasmic.app/menu.svg" as const)
          }
        />
      }
      responsiveBreakpoint={768 as const}
    />
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "joinFountain"],
  joinFountain: ["joinFountain"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: typeof NavigationBar;
  joinFountain: "a";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicNavbar__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicNavbar__VariantsArgs;
    args?: PlasmicNavbar__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicNavbar__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicNavbar__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicNavbar__ArgProps,
      internalVariantPropNames: PlasmicNavbar__VariantProps
    });

    return PlasmicNavbar__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicNavbar";
  } else {
    func.displayName = `PlasmicNavbar.${nodeName}`;
  }
  return func;
}

export const PlasmicNavbar = Object.assign(
  // Top-level PlasmicNavbar renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    joinFountain: makeNodeComponent("joinFountain"),

    // Metadata about props expected for PlasmicNavbar
    internalVariantProps: PlasmicNavbar__VariantProps,
    internalArgProps: PlasmicNavbar__ArgProps
  }
);

export default PlasmicNavbar;
/* prettier-ignore-end */
