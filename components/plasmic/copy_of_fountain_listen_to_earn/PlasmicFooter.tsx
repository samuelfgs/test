// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 6BobAUw5T3TCqT8ypcszbG
// Component: nmBaA0odzpiNWE
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import AppStore from "../../AppStore"; // plasmic-import: liXq7CocJIAkg/component
import PlayStore from "../../PlayStore"; // plasmic-import: N1s9LeizF64I8/component
import { Embed } from "@plasmicpkgs/plasmic-basic-components"; // plasmic-import: PKldDYkH42/codeComponent

import { useScreenVariants as useScreenVariantsuXvTXvy0VuZNuyJ } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: UXvTXvy0VuZNuyJ/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_fountain_fm_css from "../fountain_fm/plasmic_fountain_fm.module.css"; // plasmic-import: q7mc6yKyK23FBh7x1aGwnG/projectcss
import projectcss from "./plasmic_copy_of_fountain_listen_to_earn.module.css"; // plasmic-import: 6BobAUw5T3TCqT8ypcszbG/projectcss
import sty from "./PlasmicFooter.module.css"; // plasmic-import: nmBaA0odzpiNWE/css

export type PlasmicFooter__VariantMembers = {};

export type PlasmicFooter__VariantsArgs = {};
type VariantPropType = keyof PlasmicFooter__VariantsArgs;
export const PlasmicFooter__VariantProps = new Array<VariantPropType>();

export type PlasmicFooter__ArgsType = {};
type ArgPropType = keyof PlasmicFooter__ArgsType;
export const PlasmicFooter__ArgProps = new Array<ArgPropType>();

export type PlasmicFooter__OverridesType = {
  root?: p.Flex<"div">;
  footerTop?: p.Flex<"div">;
  container?: p.Flex<"div">;
  columns?: p.Flex<"div">;
  appStore?: p.Flex<typeof AppStore>;
  playStore?: p.Flex<typeof PlayStore>;
  embedHtml?: p.Flex<typeof Embed>;
  container2?: p.Flex<"div">;
  text?: p.Flex<"div">;
};

export interface DefaultFooterProps {
  className?: string;
}

export const defaultFooter__Args: Partial<PlasmicFooter__ArgsType> = {};

function PlasmicFooter__RenderFunc(props: {
  variants: PlasmicFooter__VariantsArgs;
  args: PlasmicFooter__ArgsType;
  overrides: PlasmicFooter__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const args = Object.assign({}, defaultFooter__Args, props.args);
  const $props = args;
  const $ctx = ph.useDataEnv?.() || {};

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsuXvTXvy0VuZNuyJ()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_fountain_fm_css.plasmic_tokens,
        sty.root
      )}
    >
      <div
        data-plasmic-name={"footerTop"}
        data-plasmic-override={overrides.footerTop}
        className={classNames(projectcss.all, sty.footerTop)}
      >
        <div
          data-plasmic-name={"container"}
          data-plasmic-override={overrides.container}
          className={classNames(projectcss.all, sty.container)}
        >
          <div
            data-plasmic-name={"columns"}
            data-plasmic-override={overrides.columns}
            className={classNames(projectcss.all, sty.columns)}
          >
            {(
              hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
            ) ? (
              <div className={classNames(projectcss.all, sty.column__opm6)}>
                {(
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? true
                    : false
                ) ? (
                  <h5
                    className={classNames(
                      projectcss.all,
                      projectcss.h5,
                      projectcss.__wab_text,
                      sty.h5__mH3Yp
                    )}
                  >
                    {hasVariant(globalVariants, "screen", "mobileOnly")
                      ? "Join Fountain"
                      : "Fountain Labs"}
                  </h5>
                ) : null}
                {(
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? true
                    : false
                ) ? (
                  <p.PlasmicImg
                    alt={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? ("" as const)
                        : ("" as const)
                    }
                    className={classNames(sty.img__hNdt)}
                    displayHeight={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? ("auto" as const)
                        : ("40px" as const)
                    }
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? ("none" as const)
                        : ("100%" as const)
                    }
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"auto" as const}
                    loading={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? ("lazy" as const)
                        : ("lazy" as const)
                    }
                    src={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? {
                            src: "/plasmic/copy_of_fountain_listen_to_earn/images/image9.webp",
                            fullWidth: 216,
                            fullHeight: 64,
                            aspectRatio: undefined
                          }
                        : {
                            src: "/plasmic/copy_of_fountain_listen_to_earn/images/image9.webp",
                            fullWidth: 216,
                            fullHeight: 64,
                            aspectRatio: undefined
                          }
                    }
                  />
                ) : null}
                {(
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? true
                    : false
                ) ? (
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img___4U9Cw)}
                    displayHeight={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? ("auto" as const)
                        : ("40px" as const)
                    }
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? ("none" as const)
                        : ("100%" as const)
                    }
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"auto" as const}
                    loading={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? ("lazy" as const)
                        : ("lazy" as const)
                    }
                    src={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? {
                            src: "/plasmic/copy_of_fountain_listen_to_earn/images/image8.webp",
                            fullWidth: 216,
                            fullHeight: 64,
                            aspectRatio: undefined
                          }
                        : {
                            src: "/plasmic/copy_of_fountain_listen_to_earn/images/image8.webp",
                            fullWidth: 216,
                            fullHeight: 64,
                            aspectRatio: undefined
                          }
                    }
                  />
                ) : null}
                {(
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? true
                    : true
                ) ? (
                  <h5
                    className={classNames(
                      projectcss.all,
                      projectcss.h5,
                      projectcss.__wab_text,
                      sty.h5___9JkqY
                    )}
                  >
                    {hasVariant(globalVariants, "screen", "mobileOnly")
                      ? "Fountain Labs"
                      : "Join Fountain"}
                  </h5>
                ) : null}

                <div className={classNames(projectcss.all, sty.freeBox__kno9W)}>
                  <AppStore
                    data-plasmic-name={"appStore"}
                    data-plasmic-override={overrides.appStore}
                    className={classNames("__wab_instance", sty.appStore)}
                  />

                  <PlayStore
                    data-plasmic-name={"playStore"}
                    data-plasmic-override={overrides.playStore}
                    className={classNames("__wab_instance", sty.playStore)}
                  />
                </div>

                <div className={classNames(projectcss.all, sty.freeBox__aTpRm)}>
                  <p.PlasmicLink
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      sty.link__u7Kxg
                    )}
                    component={Link}
                    href={"https://twitter.com/fountain_app" as const}
                    platform={"nextjs"}
                    target={"_blank" as const}
                  >
                    <p.PlasmicLink
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        sty.link__fgOib
                      )}
                      component={Link}
                      href={
                        hasVariant(globalVariants, "screen", "mobileOnly")
                          ? ("https://twitter.com/fountain_app" as const)
                          : undefined
                      }
                      platform={"nextjs"}
                      target={
                        hasVariant(globalVariants, "screen", "mobileOnly")
                          ? ("_blank" as const)
                          : undefined
                      }
                    >
                      <Embed
                        data-plasmic-name={"embedHtml"}
                        data-plasmic-override={overrides.embedHtml}
                        className={classNames("__wab_instance", sty.embedHtml)}
                        code={
                          '<a href="https://twitter.com/fountain_app?ref_src=twsrc%5Etfw" class="twitter-follow-button" data-show-count="false">Follow @fountain_app</a><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>\n' as const
                        }
                      />
                    </p.PlasmicLink>
                  </p.PlasmicLink>
                </div>

                {(
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? true
                    : false
                ) ? (
                  <p.PlasmicImg
                    alt={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? ("" as const)
                        : ("" as const)
                    }
                    className={classNames(sty.img__jxhlR)}
                    displayHeight={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? ("40px" as const)
                        : ("40px" as const)
                    }
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? ("100%" as const)
                        : ("100%" as const)
                    }
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"auto" as const}
                    loading={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? ("lazy" as const)
                        : ("lazy" as const)
                    }
                    src={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? {
                            src: "/plasmic/copy_of_fountain_listen_to_earn/images/image9.webp",
                            fullWidth: 216,
                            fullHeight: 64,
                            aspectRatio: undefined
                          }
                        : {
                            src: "/plasmic/copy_of_fountain_listen_to_earn/images/image9.webp",
                            fullWidth: 216,
                            fullHeight: 64,
                            aspectRatio: undefined
                          }
                    }
                  />
                ) : null}
              </div>
            ) : null}

            <div className={classNames(projectcss.all, sty.column__a17Cf)}>
              <h5
                className={classNames(
                  projectcss.all,
                  projectcss.h5,
                  projectcss.__wab_text,
                  sty.h5___8IT7E
                )}
              >
                {hasVariant(globalVariants, "screen", "mobileOnly")
                  ? "Get started"
                  : "Get started"}
              </h5>

              <p.PlasmicLink
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  projectcss.__wab_text,
                  sty.link__o7Q5E
                )}
                component={Link}
                href={
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? ("https://explore.fountain.fm/2022" as const)
                    : ("/faqs" as const)
                }
                platform={"nextjs"}
              >
                {"For Listeners"}
              </p.PlasmicLink>

              <p.PlasmicLink
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  projectcss.__wab_text,
                  sty.link__q0Pew
                )}
                component={Link}
                href={
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? ("https://explore.fountain.fm/blog/podcaster-get-started" as const)
                    : ("/podcasters" as const)
                }
                platform={"nextjs"}
              >
                {"For Podcasters"}
              </p.PlasmicLink>

              <p.PlasmicLink
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  projectcss.__wab_text,
                  sty.link__eG4Mx
                )}
                component={Link}
                href={
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? ("https://explore.fountain.fm/about" as const)
                    : undefined
                }
                platform={"nextjs"}
              >
                {"FAQ"}
              </p.PlasmicLink>
            </div>

            {(
              hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
            ) ? (
              <div className={classNames(projectcss.all, sty.column__tywVf)}>
                <h5
                  className={classNames(
                    projectcss.all,
                    projectcss.h5,
                    projectcss.__wab_text,
                    sty.h5__ok4Vy
                  )}
                >
                  {hasVariant(globalVariants, "screen", "mobileOnly")
                    ? "Fountain Labs"
                    : "Fountain Labs"}
                </h5>

                <p.PlasmicLink
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link__dJtiA
                  )}
                  component={Link}
                  href={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? ("https://explore.fountain.fm/about" as const)
                      : ("/faqs/about" as const)
                  }
                  platform={"nextjs"}
                >
                  {"About"}
                </p.PlasmicLink>

                <p.PlasmicLink
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link__wslqO
                  )}
                  component={Link}
                  href={"https://explore.fountain.fm/" as const}
                  platform={"nextjs"}
                >
                  {"Blog"}
                </p.PlasmicLink>

                <p.PlasmicLink
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link__eRn9A
                  )}
                  component={Link}
                  href={"/press" as const}
                  platform={"nextjs"}
                >
                  {"Press"}
                </p.PlasmicLink>

                <p.PlasmicLink
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link__zVwTu
                  )}
                  component={Link}
                  href={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? ("mailto:hello@fountain.fm" as const)
                      : ("mailto:hello@fountain.fm" as const)
                  }
                  platform={"nextjs"}
                >
                  {"Contact"}
                </p.PlasmicLink>

                {(
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? true
                    : false
                ) ? (
                  <p.PlasmicImg
                    alt={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? ("" as const)
                        : ("" as const)
                    }
                    className={classNames(sty.img__tD4Lv)}
                    displayHeight={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? ("40px" as const)
                        : ("40px" as const)
                    }
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? ("100%" as const)
                        : ("100%" as const)
                    }
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"auto" as const}
                    loading={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? ("lazy" as const)
                        : ("lazy" as const)
                    }
                    src={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? {
                            src: "/plasmic/copy_of_fountain_listen_to_earn/images/image9.webp",
                            fullWidth: 216,
                            fullHeight: 64,
                            aspectRatio: undefined
                          }
                        : {
                            src: "/plasmic/copy_of_fountain_listen_to_earn/images/image9.webp",
                            fullWidth: 216,
                            fullHeight: 64,
                            aspectRatio: undefined
                          }
                    }
                  />
                ) : null}
              </div>
            ) : null}

            <div className={classNames(projectcss.all, sty.column__poCv4)}>
              <h5
                className={classNames(
                  projectcss.all,
                  projectcss.h5,
                  projectcss.__wab_text,
                  sty.h5__qhWqp
                )}
              >
                {"Legal"}
              </h5>

              <p.PlasmicLink
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  projectcss.__wab_text,
                  sty.link__kHr5P
                )}
                component={Link}
                href={
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? ("https://explore.fountain.fm/privacy-policy" as const)
                    : ("/privacy-policy" as const)
                }
                platform={"nextjs"}
              >
                {"Privacy Policy"}
              </p.PlasmicLink>

              <p.PlasmicLink
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  projectcss.__wab_text,
                  sty.link___1Tfqp
                )}
                component={Link}
                href={
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? ("https://explore.fountain.fm/terms-of-use" as const)
                    : ("/terms-of-use" as const)
                }
                platform={"nextjs"}
              >
                {hasVariant(globalVariants, "screen", "mobileOnly")
                  ? "Terms of Use"
                  : "Terms of Use"}
              </p.PlasmicLink>
            </div>
          </div>

          {(
            hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
          ) ? (
            <div
              data-plasmic-name={"container2"}
              data-plasmic-override={overrides.container2}
              className={classNames(projectcss.all, sty.container2)}
            >
              {(
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? true
                  : false
              ) ? (
                <p.PlasmicImg
                  alt={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? ("" as const)
                      : ("" as const)
                  }
                  className={classNames(sty.img__o5UD)}
                  displayHeight={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? ("40px" as const)
                      : ("40px" as const)
                  }
                  displayMaxHeight={"none" as const}
                  displayMaxWidth={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? ("100%" as const)
                      : ("100%" as const)
                  }
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0" as const}
                  displayWidth={"auto" as const}
                  loading={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? ("lazy" as const)
                      : ("lazy" as const)
                  }
                  src={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? {
                          src: "/plasmic/copy_of_fountain_listen_to_earn/images/image9.webp",
                          fullWidth: 216,
                          fullHeight: 64,
                          aspectRatio: undefined
                        }
                      : {
                          src: "/plasmic/copy_of_fountain_listen_to_earn/images/image9.webp",
                          fullWidth: 216,
                          fullHeight: 64,
                          aspectRatio: undefined
                        }
                  }
                />
              ) : null}
            </div>
          ) : null}
        </div>

        <div
          data-plasmic-name={"text"}
          data-plasmic-override={overrides.text}
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text
          )}
        >
          {hasVariant(globalVariants, "screen", "mobileOnly")
            ? "© Fountain 2022"
            : "© Fountain 2022"}
        </div>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "footerTop",
    "container",
    "columns",
    "appStore",
    "playStore",
    "embedHtml",
    "container2",
    "text"
  ],
  footerTop: [
    "footerTop",
    "container",
    "columns",
    "appStore",
    "playStore",
    "embedHtml",
    "container2",
    "text"
  ],
  container: [
    "container",
    "columns",
    "appStore",
    "playStore",
    "embedHtml",
    "container2"
  ],
  columns: ["columns", "appStore", "playStore", "embedHtml"],
  appStore: ["appStore"],
  playStore: ["playStore"],
  embedHtml: ["embedHtml"],
  container2: ["container2"],
  text: ["text"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  footerTop: "div";
  container: "div";
  columns: "div";
  appStore: typeof AppStore;
  playStore: typeof PlayStore;
  embedHtml: typeof Embed;
  container2: "div";
  text: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicFooter__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicFooter__VariantsArgs;
    args?: PlasmicFooter__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicFooter__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicFooter__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicFooter__ArgProps,
      internalVariantPropNames: PlasmicFooter__VariantProps
    });

    return PlasmicFooter__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicFooter";
  } else {
    func.displayName = `PlasmicFooter.${nodeName}`;
  }
  return func;
}

export const PlasmicFooter = Object.assign(
  // Top-level PlasmicFooter renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    footerTop: makeNodeComponent("footerTop"),
    container: makeNodeComponent("container"),
    columns: makeNodeComponent("columns"),
    appStore: makeNodeComponent("appStore"),
    playStore: makeNodeComponent("playStore"),
    embedHtml: makeNodeComponent("embedHtml"),
    container2: makeNodeComponent("container2"),
    text: makeNodeComponent("text"),

    // Metadata about props expected for PlasmicFooter
    internalVariantProps: PlasmicFooter__VariantProps,
    internalArgProps: PlasmicFooter__ArgProps
  }
);

export default PlasmicFooter;
/* prettier-ignore-end */
