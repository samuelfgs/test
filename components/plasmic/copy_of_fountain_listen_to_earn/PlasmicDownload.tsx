// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 6BobAUw5T3TCqT8ypcszbG
// Component: ixjnAyTaypDlz
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import HeroSection2 from "../../HeroSection2"; // plasmic-import: 0KeQsRUR59vfYY/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_fountain_fm_css from "../fountain_fm/plasmic_fountain_fm.module.css"; // plasmic-import: q7mc6yKyK23FBh7x1aGwnG/projectcss
import projectcss from "./plasmic_copy_of_fountain_listen_to_earn.module.css"; // plasmic-import: 6BobAUw5T3TCqT8ypcszbG/projectcss
import sty from "./PlasmicDownload.module.css"; // plasmic-import: ixjnAyTaypDlz/css

export type PlasmicDownload__VariantMembers = {};

export type PlasmicDownload__VariantsArgs = {};
type VariantPropType = keyof PlasmicDownload__VariantsArgs;
export const PlasmicDownload__VariantProps = new Array<VariantPropType>();

export type PlasmicDownload__ArgsType = {};
type ArgPropType = keyof PlasmicDownload__ArgsType;
export const PlasmicDownload__ArgProps = new Array<ArgPropType>();

export type PlasmicDownload__OverridesType = {
  root2?: p.Flex<typeof HeroSection2>;
};

export interface DefaultDownloadProps {
  className?: string;
}

export const defaultDownload__Args: Partial<PlasmicDownload__ArgsType> = {};

function PlasmicDownload__RenderFunc(props: {
  variants: PlasmicDownload__VariantsArgs;
  args: PlasmicDownload__ArgsType;
  overrides: PlasmicDownload__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const args = Object.assign({}, defaultDownload__Args, props.args);
  const $props = args;
  const $ctx = ph.useDataEnv?.() || {};

  return (
    <HeroSection2
      data-plasmic-name={"root2"}
      data-plasmic-override={overrides.root2}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames("__wab_instance", sty.root2)}
    />
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root2: ["root2"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root2: typeof HeroSection2;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicDownload__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicDownload__VariantsArgs;
    args?: PlasmicDownload__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicDownload__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicDownload__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicDownload__ArgProps,
      internalVariantPropNames: PlasmicDownload__VariantProps
    });

    return PlasmicDownload__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root2") {
    func.displayName = "PlasmicDownload";
  } else {
    func.displayName = `PlasmicDownload.${nodeName}`;
  }
  return func;
}

export const PlasmicDownload = Object.assign(
  // Top-level PlasmicDownload renders the root element
  makeNodeComponent("root2"),
  {
    // Helper components rendering sub-elements

    // Metadata about props expected for PlasmicDownload
    internalVariantProps: PlasmicDownload__VariantProps,
    internalArgProps: PlasmicDownload__ArgProps
  }
);

export default PlasmicDownload;
/* prettier-ignore-end */
