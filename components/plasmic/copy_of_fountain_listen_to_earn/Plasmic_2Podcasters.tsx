// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 6BobAUw5T3TCqT8ypcszbG
// Component: q8M9xBCikEZfDZ
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Navbar from "../../Navbar"; // plasmic-import: uTDo8cXNPa_B1XC/component
import Button from "../../Button"; // plasmic-import: KhbeBVaAisx47/component
import DownloadBlack from "../../DownloadBlack"; // plasmic-import: jerRxL9WZN1Zmv/component
import AppStore from "../../AppStore"; // plasmic-import: liXq7CocJIAkg/component
import { Reveal } from "@plasmicpkgs/react-awesome-reveal"; // plasmic-import: R6s1FdhksG/codeComponent
import { Embed } from "@plasmicpkgs/plasmic-basic-components"; // plasmic-import: PKldDYkH42/codeComponent
import BlogPosts from "../../BlogPosts"; // plasmic-import: n3aIYan7r0SEV/component
import Footer from "../../Footer"; // plasmic-import: nmBaA0odzpiNWE/component

import { useScreenVariants as useScreenVariantsuXvTXvy0VuZNuyJ } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: UXvTXvy0VuZNuyJ/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_fountain_fm_css from "../fountain_fm/plasmic_fountain_fm.module.css"; // plasmic-import: q7mc6yKyK23FBh7x1aGwnG/projectcss
import projectcss from "./plasmic_copy_of_fountain_listen_to_earn.module.css"; // plasmic-import: 6BobAUw5T3TCqT8ypcszbG/projectcss
import sty from "./Plasmic_2Podcasters.module.css"; // plasmic-import: q8M9xBCikEZfDZ/css

import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: S2Divheo_3CFcy/icon
import Icon16Icon from "./icons/PlasmicIcon__Icon16"; // plasmic-import: cF5YAR91eQ2yTs/icon
import Icon8Icon from "./icons/PlasmicIcon__Icon8"; // plasmic-import: a-uf39TcX85gUT/icon

export type Plasmic_2Podcasters__VariantMembers = {};

export type Plasmic_2Podcasters__VariantsArgs = {};
type VariantPropType = keyof Plasmic_2Podcasters__VariantsArgs;
export const Plasmic_2Podcasters__VariantProps = new Array<VariantPropType>();

export type Plasmic_2Podcasters__ArgsType = {};
type ArgPropType = keyof Plasmic_2Podcasters__ArgsType;
export const Plasmic_2Podcasters__ArgProps = new Array<ArgPropType>();

export type Plasmic_2Podcasters__OverridesType = {
  root?: p.Flex<"div">;
  navbar?: p.Flex<typeof Navbar>;
  heroImage?: p.Flex<"div">;
  headerCopy?: p.Flex<"div">;
  foreground?: p.Flex<"div">;
  foreground3?: p.Flex<"div">;
  foreground4?: p.Flex<"div">;
  features?: p.Flex<"div">;
  foreground6?: p.Flex<"div">;
  foreground10?: p.Flex<"div">;
  foreground8?: p.Flex<"div">;
  downloadBlack?: p.Flex<typeof DownloadBlack>;
  podcasterWallet5?: p.Flex<"div">;
  appStore?: p.Flex<typeof AppStore>;
  podcasterWalletMobile2?: p.Flex<"div">;
  reveal?: p.Flex<typeof Reveal>;
  foreground5?: p.Flex<"div">;
  foreground2?: p.Flex<"div">;
  topShows?: p.Flex<"div">;
  embedHtml?: p.Flex<typeof Embed>;
  blogPosts?: p.Flex<typeof BlogPosts>;
  footer?: p.Flex<typeof Footer>;
};

export interface Default_2PodcastersProps {}

export const default_2Podcasters__Args: Partial<Plasmic_2Podcasters__ArgsType> =
  {};

function Plasmic_2Podcasters__RenderFunc(props: {
  variants: Plasmic_2Podcasters__VariantsArgs;
  args: Plasmic_2Podcasters__ArgsType;
  overrides: Plasmic_2Podcasters__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const args = Object.assign({}, default_2Podcasters__Args, props.args);
  const $props = args;
  const $ctx = ph.useDataEnv?.() || {};

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsuXvTXvy0VuZNuyJ()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{"Fountain for Podcasters"}</title>
        <meta
          key="og:title"
          property="og:title"
          content={"Fountain for Podcasters"}
        />
        <meta
          key="description"
          property="og:description"
          name="description"
          content={"Fountain helps you turn your biggest fans into supporters "}
        />
        <meta
          key="og:image"
          property="og:image"
          content={
            "https://site-assets.plasmic.app/7fe40a9ad35761d2fd99acc3c2806186.webp"
          }
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <p.Stack
          as={"div"}
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          hasGap={true}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_fountain_fm_css.plasmic_tokens,
            sty.root
          )}
        >
          <Navbar
            data-plasmic-name={"navbar"}
            data-plasmic-override={overrides.navbar}
            className={classNames("__wab_instance", sty.navbar)}
          />

          <div
            data-plasmic-name={"heroImage"}
            data-plasmic-override={overrides.heroImage}
            className={classNames(projectcss.all, sty.heroImage)}
          >
            <div className={classNames(projectcss.all, sty.freeBox__qv6As)}>
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.columns__g1CgH)}
              >
                <div className={classNames(projectcss.all, sty.column__zQqA)}>
                  {(
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? true
                      : false
                  ) ? (
                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img__fBbYw)}
                      displayHeight={"341px" as const}
                      displayMaxHeight={"none" as const}
                      displayMaxWidth={"100%" as const}
                      displayMinHeight={"0" as const}
                      displayMinWidth={"0" as const}
                      displayWidth={"auto" as const}
                      loading={"lazy" as const}
                      src={{
                        src: "/plasmic/copy_of_fountain_listen_to_earn/images/previewed97Png.png",
                        fullWidth: 5000,
                        fullHeight: 4293,
                        aspectRatio: undefined
                      }}
                    />
                  ) : null}
                </div>

                <div className={classNames(projectcss.all, sty.column___1S3Mp)}>
                  {(
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? true
                      : true
                  ) ? (
                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img__b8U9H)}
                      displayHeight={"424px" as const}
                      displayMaxHeight={"none" as const}
                      displayMaxWidth={"100%" as const}
                      displayMinHeight={"0" as const}
                      displayMinWidth={"0" as const}
                      displayWidth={"auto" as const}
                      loading={"lazy" as const}
                      src={{
                        src: "/plasmic/copy_of_fountain_listen_to_earn/images/previewed97Png.png",
                        fullWidth: 5000,
                        fullHeight: 4293,
                        aspectRatio: undefined
                      }}
                    />
                  ) : null}
                </div>
              </p.Stack>
            </div>
          </div>

          <div
            data-plasmic-name={"headerCopy"}
            data-plasmic-override={overrides.headerCopy}
            className={classNames(projectcss.all, sty.headerCopy)}
          >
            {true ? (
              <p.Stack
                as={"section"}
                hasGap={true}
                className={classNames(projectcss.all, sty.section__hJq18)}
              >
                <p.Stack
                  as={"div"}
                  data-plasmic-name={"foreground"}
                  data-plasmic-override={overrides.foreground}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.foreground)}
                >
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__ogfHi)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__fOVzI
                      )}
                    >
                      {"Podcaster Wallet"}
                    </div>

                    <h3
                      className={classNames(
                        projectcss.all,
                        projectcss.h3,
                        projectcss.__wab_text,
                        sty.h3__jaWiI
                      )}
                    >
                      {"Earning Bitcoin made easy for every podcaster\n"}
                    </h3>

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__svffF
                      )}
                    >
                      {
                        "Getting your show on the Lightning Network and seeing all the data should be easy. However, no simple user-friendly solutions exist for podcasters today. That's why we're launching the Podcaster Wallet.\n\netc."
                      }
                    </div>

                    <Button
                      className={classNames(
                        "__wab_instance",
                        sty.button__hYwCg
                      )}
                      shape={"rounded" as const}
                      showEndIcon={true}
                    >
                      {"Get started"}
                    </Button>
                  </p.Stack>

                  <div
                    className={classNames(projectcss.all, sty.freeBox__xu7Qy)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__e5NYw)}
                    >
                      <h5
                        className={classNames(
                          projectcss.all,
                          projectcss.h5,
                          projectcss.__wab_text,
                          sty.h5__oUvhf
                        )}
                      >
                        {"Join the Lightning Network in the Fountain app"}
                      </h5>

                      <Icon16Icon
                        className={classNames(projectcss.all, sty.svg__qV60Y)}
                        role={"img"}
                      />
                    </div>

                    <div
                      className={classNames(projectcss.all, sty.freeBox__buDuJ)}
                    >
                      <h5
                        className={classNames(
                          projectcss.all,
                          projectcss.h5,
                          projectcss.__wab_text,
                          sty.h5__ly7Zx
                        )}
                      >
                        {"See your show's earnings and supporters"}
                      </h5>

                      <Icon16Icon
                        className={classNames(projectcss.all, sty.svg__mcFvI)}
                        role={"img"}
                      />
                    </div>

                    <div
                      className={classNames(projectcss.all, sty.freeBox___2Ajo)}
                    >
                      <h5
                        className={classNames(
                          projectcss.all,
                          projectcss.h5,
                          projectcss.__wab_text,
                          sty.h5__f8BD
                        )}
                      >
                        {"Read and reply to messages from all apps"}
                      </h5>

                      <Icon16Icon
                        className={classNames(projectcss.all, sty.svg__cjcEj)}
                        role={"img"}
                      />
                    </div>

                    <div
                      className={classNames(projectcss.all, sty.freeBox__sBtOc)}
                    >
                      <h5
                        className={classNames(
                          projectcss.all,
                          projectcss.h5,
                          projectcss.__wab_text,
                          sty.h5__x4FN
                        )}
                      >
                        {"Split your earnings with other users"}
                      </h5>

                      <Icon16Icon
                        className={classNames(projectcss.all, sty.svg___0Nq5I)}
                        role={"img"}
                      />
                    </div>
                  </div>
                </p.Stack>
              </p.Stack>
            ) : null}

            <div className={classNames(projectcss.all, sty.freeBox__fdBsq)}>
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox___9Mtox)}
              >
                {(
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? true
                    : true
                ) ? (
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__xrTvE)}
                  >
                    <p.Stack
                      as={"div"}
                      data-plasmic-name={"foreground3"}
                      data-plasmic-override={overrides.foreground3}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.foreground3)}
                    >
                      <h2
                        className={classNames(
                          projectcss.all,
                          projectcss.h2,
                          projectcss.__wab_text,
                          sty.h2__bnexz
                        )}
                      >
                        {
                          "Fountain helps you turn your biggest fans into supporters "
                        }
                      </h2>

                      <h5
                        className={classNames(
                          projectcss.all,
                          projectcss.h5,
                          projectcss.__wab_text,
                          sty.h5__zJlkJ
                        )}
                      >
                        {
                          "Claim your podcast on Fountain today to start receiving payments and messages from your audience - directly as they listen."
                        }
                      </h5>

                      <Button
                        className={classNames(
                          "__wab_instance",
                          sty.button__cx5Zo
                        )}
                        color={"softSand" as const}
                        shape={"rounded" as const}
                        showEndIcon={true}
                      >
                        <p.PlasmicLink
                          className={classNames(
                            projectcss.all,
                            projectcss.a,
                            sty.link__fMGu5
                          )}
                          component={Link}
                          href={"/join-fountain" as const}
                          platform={"nextjs"}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__yAthk
                            )}
                          >
                            <React.Fragment>
                              <React.Fragment>{""}</React.Fragment>
                              <span
                                className={
                                  "plasmic_default__all plasmic_default__span"
                                }
                                style={{ color: "#000000" }}
                              >
                                {"Get started"}
                              </span>
                              <React.Fragment>{""}</React.Fragment>
                            </React.Fragment>
                          </div>
                        </p.PlasmicLink>
                      </Button>
                    </p.Stack>
                  </p.Stack>
                ) : null}
                {(
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? true
                    : false
                ) ? (
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__n6Vy6)}
                  >
                    <p.Stack
                      as={"div"}
                      data-plasmic-name={"foreground4"}
                      data-plasmic-override={overrides.foreground4}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.foreground4)}
                    >
                      <h2
                        className={classNames(
                          projectcss.all,
                          projectcss.h2,
                          projectcss.__wab_text,
                          sty.h2__jaAw0
                        )}
                      >
                        {
                          "Fountain helps you turn your biggest fans into supporters "
                        }
                      </h2>

                      <h5
                        className={classNames(
                          projectcss.all,
                          projectcss.h5,
                          projectcss.__wab_text,
                          sty.h5__qJ7Z
                        )}
                      >
                        {
                          "Claim your podcast on Fountain today to start receiving payments and messages directly from your audience - as they listen."
                        }
                      </h5>

                      <Button
                        className={classNames(
                          "__wab_instance",
                          sty.button__wHIkL
                        )}
                        color={"softSand" as const}
                        shape={"rounded" as const}
                        showEndIcon={true}
                      >
                        <p.PlasmicLink
                          className={classNames(
                            projectcss.all,
                            projectcss.a,
                            sty.link__wfqse
                          )}
                          component={Link}
                          href={
                            "https://explore.fountain.fm/download-fountain" as const
                          }
                          platform={"nextjs"}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__rop3X
                            )}
                          >
                            <React.Fragment>
                              <React.Fragment>{""}</React.Fragment>
                              <span
                                className={
                                  "plasmic_default__all plasmic_default__span"
                                }
                                style={{ color: "#000000" }}
                              >
                                {"Get started"}
                              </span>
                              <React.Fragment>{""}</React.Fragment>
                            </React.Fragment>
                          </div>
                        </p.PlasmicLink>
                      </Button>
                    </p.Stack>
                  </p.Stack>
                ) : null}
              </p.Stack>
            </div>
          </div>

          <div
            data-plasmic-name={"features"}
            data-plasmic-override={overrides.features}
            className={classNames(projectcss.all, sty.features)}
          >
            {true ? (
              <p.Stack
                as={"section"}
                hasGap={true}
                className={classNames(projectcss.all, sty.section__zEtY)}
              >
                <p.Stack
                  as={"div"}
                  data-plasmic-name={"foreground6"}
                  data-plasmic-override={overrides.foreground6}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.foreground6)}
                >
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__xrWxt)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__x9FTe
                      )}
                    >
                      {"Podcaster Wallet"}
                    </div>

                    <h3
                      className={classNames(
                        projectcss.all,
                        projectcss.h3,
                        projectcss.__wab_text,
                        sty.h3__u47Dp
                      )}
                    >
                      {"Earning Bitcoin made easy for every podcaster\n"}
                    </h3>

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__hnevb
                      )}
                    >
                      {
                        "Getting your show on the Lightning Network and seeing all the data should be easy. However, no simple user-friendly solutions exist for podcasters today. That's why we're launching the Podcaster Wallet.\n\netc."
                      }
                    </div>

                    <Button
                      className={classNames(
                        "__wab_instance",
                        sty.button___18BVs
                      )}
                      shape={"rounded" as const}
                      showEndIcon={true}
                    >
                      {"Get started"}
                    </Button>
                  </p.Stack>

                  <div
                    className={classNames(projectcss.all, sty.freeBox__xTdm1)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__yyLvl)}
                    >
                      <h5
                        className={classNames(
                          projectcss.all,
                          projectcss.h5,
                          projectcss.__wab_text,
                          sty.h5__zFlz
                        )}
                      >
                        {"Join the Lightning Network in the Fountain app"}
                      </h5>

                      <Icon16Icon
                        className={classNames(projectcss.all, sty.svg__pUcwv)}
                        role={"img"}
                      />
                    </div>

                    <div
                      className={classNames(projectcss.all, sty.freeBox__q2V2O)}
                    >
                      <h5
                        className={classNames(
                          projectcss.all,
                          projectcss.h5,
                          projectcss.__wab_text,
                          sty.h5__lvbzl
                        )}
                      >
                        {"See your show's earnings and supporters"}
                      </h5>

                      <Icon16Icon
                        className={classNames(projectcss.all, sty.svg__r7FwS)}
                        role={"img"}
                      />
                    </div>

                    <div
                      className={classNames(projectcss.all, sty.freeBox__aWfhz)}
                    >
                      <h5
                        className={classNames(
                          projectcss.all,
                          projectcss.h5,
                          projectcss.__wab_text,
                          sty.h5__qw9Ju
                        )}
                      >
                        {"Read and reply to messages from all apps"}
                      </h5>

                      <Icon16Icon
                        className={classNames(projectcss.all, sty.svg__iaDjz)}
                        role={"img"}
                      />
                    </div>

                    <div
                      className={classNames(projectcss.all, sty.freeBox__jm0Dc)}
                    >
                      <h5
                        className={classNames(
                          projectcss.all,
                          projectcss.h5,
                          projectcss.__wab_text,
                          sty.h5___66PIl
                        )}
                      >
                        {"Split your earnings with other users"}
                      </h5>

                      <Icon16Icon
                        className={classNames(projectcss.all, sty.svg__z3Ft)}
                        role={"img"}
                      />
                    </div>
                  </div>
                </p.Stack>
              </p.Stack>
            ) : null}
            {true ? (
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__zb6C5)}
              >
                {(
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? true
                    : false
                ) ? (
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox___1BYbN)}
                  >
                    <p.Stack
                      as={"div"}
                      data-plasmic-name={"foreground10"}
                      data-plasmic-override={overrides.foreground10}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.foreground10)}
                    >
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__jePDe
                        )}
                      >
                        <p.Stack
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__hL8W
                          )}
                        >
                          {false ? (
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__strbh
                              )}
                            >
                              <Icon8Icon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__gnTrU
                                )}
                                role={"img"}
                              />
                            </div>
                          ) : null}

                          <p.Stack
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox___5RR
                            )}
                          >
                            <h4
                              className={classNames(
                                projectcss.all,
                                projectcss.h4,
                                projectcss.__wab_text,
                                sty.h4__h2GPo
                              )}
                            >
                              {"Get paid directly by your listeners"}
                            </h4>

                            <h6
                              className={classNames(
                                projectcss.all,
                                projectcss.h6,
                                projectcss.__wab_text,
                                sty.h6__o7Yfk
                              )}
                            >
                              {
                                "Claim your show in the Fountain app to start accepting Bitcoin Lightning payments. When they find your content valuable, they can send value back."
                              }
                            </h6>
                          </p.Stack>
                        </p.Stack>
                      </p.Stack>

                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__sJivS
                        )}
                      >
                        {false ? (
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__c8K64
                            )}
                          >
                            <Icon8Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg__pc73H
                              )}
                              role={"img"}
                            />
                          </div>
                        ) : null}

                        <p.Stack
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__oKdb2
                          )}
                        >
                          <h4
                            className={classNames(
                              projectcss.all,
                              projectcss.h4,
                              projectcss.__wab_text,
                              sty.h4__dyCe
                            )}
                          >
                            {"See who is supporting your show"}
                          </h4>

                          <h6
                            className={classNames(
                              projectcss.all,
                              projectcss.h6,
                              projectcss.__wab_text,
                              sty.h6__xWev0
                            )}
                          >
                            {
                              "See which listeners are getting value from your content. They can Boost to send a message with a payment or stream money for every minute they listen."
                            }
                          </h6>
                        </p.Stack>
                      </p.Stack>

                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__rb4Vf
                        )}
                      >
                        <p.Stack
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__bEu2V
                          )}
                        >
                          {false ? (
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__y7VWx
                              )}
                            >
                              <Icon8Icon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__ytrWk
                                )}
                                role={"img"}
                              />
                            </div>
                          ) : null}

                          <p.Stack
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__he6DZ
                            )}
                          >
                            <h4
                              className={classNames(
                                projectcss.all,
                                projectcss.h4,
                                projectcss.__wab_text,
                                sty.h4__oTEcN
                              )}
                            >
                              {"Split your income for each episode"}
                            </h4>

                            <h6
                              className={classNames(
                                projectcss.all,
                                projectcss.h6,
                                projectcss.__wab_text,
                                sty.h6__xmjzx
                              )}
                            >
                              {
                                "Share earnings from your show with co-hosts, guests and contributors. Add any Fountain user as a split or add their Lightning Node Pubkey. "
                              }
                            </h6>
                          </p.Stack>
                        </p.Stack>
                      </p.Stack>

                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__emDpD
                        )}
                      >
                        <p.Stack
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__dBg3A
                          )}
                        >
                          {false ? (
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__zwvRc
                              )}
                            >
                              <Icon8Icon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__v9Hnf
                                )}
                                role={"img"}
                              />
                            </div>
                          ) : null}

                          <p.Stack
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__xUXcb
                            )}
                          >
                            <h4
                              className={classNames(
                                projectcss.all,
                                projectcss.h4,
                                projectcss.__wab_text,
                                sty.h4___370L
                              )}
                            >
                              {"Interact with your community"}
                            </h4>

                            <h6
                              className={classNames(
                                projectcss.all,
                                projectcss.h6,
                                projectcss.__wab_text,
                                sty.h6__wkvUb
                              )}
                            >
                              {
                                "Read and reply to Boost messages on your episodes and clips. Connect with your supporters and let conversation about your content flow."
                              }
                            </h6>
                          </p.Stack>
                        </p.Stack>
                      </p.Stack>

                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__fMuC4
                        )}
                      >
                        <p.Stack
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__wrZwP
                          )}
                        >
                          {false ? (
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__aFaea
                              )}
                            >
                              <Icon8Icon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__vwQlH
                                )}
                                role={"img"}
                              />
                            </div>
                          ) : null}

                          <p.Stack
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__kdyd2
                            )}
                          >
                            <h4
                              className={classNames(
                                projectcss.all,
                                projectcss.h4,
                                projectcss.__wab_text,
                                sty.h4__lnqo0
                              )}
                            >
                              {"Pay listeners with Fountain Promotions"}
                            </h4>

                            <h6
                              className={classNames(
                                projectcss.all,
                                projectcss.h6,
                                projectcss.__wab_text,
                                sty.h6__fadU
                              )}
                            >
                              {
                                "Pay to promote your content so it gets seen and heard. Users that listen to your promoted episodes or clips get rewarded."
                              }
                            </h6>
                          </p.Stack>
                        </p.Stack>
                      </p.Stack>

                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__iKfT
                        )}
                      >
                        <p.Stack
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__ka8KS
                          )}
                        >
                          <p.Stack
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__mcdmc
                            )}
                          >
                            <h4
                              className={classNames(
                                projectcss.all,
                                projectcss.h4,
                                projectcss.__wab_text,
                                sty.h4__pnK56
                              )}
                            >
                              {"Withdraw money instantaneously"}
                            </h4>

                            <h6
                              className={classNames(
                                projectcss.all,
                                projectcss.h6,
                                projectcss.__wab_text,
                                sty.h6__lKlqj
                              )}
                            >
                              {
                                "Withdraw earnings from your Fountain wallet at any time without any fees. No more waiting around to get paid."
                              }
                            </h6>
                          </p.Stack>
                        </p.Stack>
                      </p.Stack>
                    </p.Stack>
                  </p.Stack>
                ) : null}
              </p.Stack>
            ) : null}
            {(
              hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
            ) ? (
              <p.Stack
                as={"div"}
                data-plasmic-name={"foreground8"}
                data-plasmic-override={overrides.foreground8}
                hasGap={true}
                className={classNames(projectcss.all, sty.foreground8)}
              >
                {(
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? true
                    : true
                ) ? (
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__mmuEj)}
                  >
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___3Jkj3
                      )}
                    >
                      {false ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__hwhvs
                          )}
                        >
                          <Icon8Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__q8GLv
                            )}
                            role={"img"}
                          />
                        </div>
                      ) : null}

                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___1H3JZ
                        )}
                      >
                        <h4
                          className={classNames(
                            projectcss.all,
                            projectcss.h4,
                            projectcss.__wab_text,
                            sty.h4__fAc3O
                          )}
                        >
                          {"Get paid directly by your listeners"}
                        </h4>

                        <h6
                          className={classNames(
                            projectcss.all,
                            projectcss.h6,
                            projectcss.__wab_text,
                            sty.h6__e7YLh
                          )}
                        >
                          {
                            "Claim your show in the Fountain app to start accepting Bitcoin Lightning payments. When they find your content valuable, they can send value back."
                          }
                        </h6>
                      </p.Stack>
                    </p.Stack>

                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___9Malt
                      )}
                    >
                      {false ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__b03H
                          )}
                        >
                          <Icon8Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__xoxwo
                            )}
                            role={"img"}
                          />
                        </div>
                      ) : null}

                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__x8Nmk
                        )}
                      >
                        <h4
                          className={classNames(
                            projectcss.all,
                            projectcss.h4,
                            projectcss.__wab_text,
                            sty.h4__kSnG
                          )}
                        >
                          {"Interact with your community"}
                        </h4>

                        <h6
                          className={classNames(
                            projectcss.all,
                            projectcss.h6,
                            projectcss.__wab_text,
                            sty.h6__yTAlY
                          )}
                        >
                          {
                            "Read and reply to Boost messages on your episodes and clips. Connect with your supporters and let conversation about your content flow."
                          }
                        </h6>
                      </p.Stack>
                    </p.Stack>
                  </p.Stack>
                ) : null}
                {(
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? true
                    : true
                ) ? (
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__otWbq)}
                  >
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___18IF3
                      )}
                    >
                      {false ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__wzWr
                          )}
                        >
                          <Icon8Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__dht6X
                            )}
                            role={"img"}
                          />
                        </div>
                      ) : null}

                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__epvPh
                        )}
                      >
                        <h4
                          className={classNames(
                            projectcss.all,
                            projectcss.h4,
                            projectcss.__wab_text,
                            sty.h4__yWmtR
                          )}
                        >
                          {"See who is supporting your show"}
                        </h4>

                        <h6
                          className={classNames(
                            projectcss.all,
                            projectcss.h6,
                            projectcss.__wab_text,
                            sty.h6__ugUr
                          )}
                        >
                          {
                            "See which listeners are getting value from your content. They can Boost to send a message with a payment or stream money for every minute they listen."
                          }
                        </h6>
                      </p.Stack>
                    </p.Stack>

                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__b0HmU)}
                    >
                      {false ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__oz9M0
                          )}
                        >
                          <Icon8Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__tglaf
                            )}
                            role={"img"}
                          />
                        </div>
                      ) : null}

                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__idBfg
                        )}
                      >
                        <h4
                          className={classNames(
                            projectcss.all,
                            projectcss.h4,
                            projectcss.__wab_text,
                            sty.h4__e4Z9J
                          )}
                        >
                          {"Pay listeners with Fountain Promotions"}
                        </h4>

                        <h6
                          className={classNames(
                            projectcss.all,
                            projectcss.h6,
                            projectcss.__wab_text,
                            sty.h6__kniWh
                          )}
                        >
                          {
                            "Pay to promote your content so it gets seen and heard. Users that listen to your promoted episodes or clips get rewarded."
                          }
                        </h6>
                      </p.Stack>
                    </p.Stack>
                  </p.Stack>
                ) : null}
                {(
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? true
                    : true
                ) ? (
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__jcoG)}
                  >
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__trIwk)}
                    >
                      {false ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox___40WXb
                          )}
                        >
                          <Icon8Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__p13Oc
                            )}
                            role={"img"}
                          />
                        </div>
                      ) : null}

                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__mRelf
                        )}
                      >
                        <h4
                          className={classNames(
                            projectcss.all,
                            projectcss.h4,
                            projectcss.__wab_text,
                            sty.h4__mWac0
                          )}
                        >
                          {"Split your income for each episode"}
                        </h4>

                        <h6
                          className={classNames(
                            projectcss.all,
                            projectcss.h6,
                            projectcss.__wab_text,
                            sty.h6__kgAE
                          )}
                        >
                          {
                            "Share earnings from your show with co-hosts, guests and contributors. Add any Fountain user as a split or add their Lightning Node Pubkey. "
                          }
                        </h6>
                      </p.Stack>
                    </p.Stack>

                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__yrKlp)}
                    >
                      {false ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__uloEp
                          )}
                        >
                          <Icon8Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg___1Km1Y
                            )}
                            role={"img"}
                          />
                        </div>
                      ) : null}

                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__ggzTb
                        )}
                      >
                        <h4
                          className={classNames(
                            projectcss.all,
                            projectcss.h4,
                            projectcss.__wab_text,
                            sty.h4__xhrH2
                          )}
                        >
                          {"Withdraw money instantaneously"}
                        </h4>

                        <h6
                          className={classNames(
                            projectcss.all,
                            projectcss.h6,
                            projectcss.__wab_text,
                            sty.h6__cCyuC
                          )}
                        >
                          {
                            "Withdraw earnings from your Fountain wallet at any time without any fees. No more waiting around to get paid."
                          }
                        </h6>
                      </p.Stack>
                    </p.Stack>
                  </p.Stack>
                ) : null}
                {(
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? true
                    : false
                ) ? (
                  <DownloadBlack
                    data-plasmic-name={"downloadBlack"}
                    data-plasmic-override={overrides.downloadBlack}
                    className={classNames("__wab_instance", sty.downloadBlack)}
                  />
                ) : null}
                {(
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? true
                    : false
                ) ? (
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__vqaJm)}
                  >
                    {(
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? true
                        : true
                    ) ? (
                      <h1
                        className={classNames(
                          projectcss.all,
                          projectcss.h1,
                          projectcss.__wab_text,
                          sty.h1__by9Fx
                        )}
                      >
                        {hasVariant(globalVariants, "screen", "mobileOnly")
                          ? "Download Fountain"
                          : "Download Fountain"}
                      </h1>
                    ) : null}
                    {(
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? true
                        : true
                    ) ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__k49M
                        )}
                      />
                    ) : null}
                  </p.Stack>
                ) : null}
              </p.Stack>
            ) : null}
          </div>

          {(
            hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
          ) ? (
            <div
              data-plasmic-name={"podcasterWallet5"}
              data-plasmic-override={overrides.podcasterWallet5}
              className={classNames(projectcss.all, sty.podcasterWallet5)}
            >
              {true ? (
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__bzOk5)}
                >
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__ocfDw)}
                  >
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__gUi9I)}
                    >
                      {(
                        hasVariant(globalVariants, "screen", "mobileOnly")
                          ? true
                          : false
                      ) ? (
                        <AppStore
                          data-plasmic-name={"appStore"}
                          data-plasmic-override={overrides.appStore}
                          className={classNames("__wab_instance", sty.appStore)}
                        />
                      ) : null}

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___3JyXs
                        )}
                      >
                        {"get started"}
                      </div>

                      <h3
                        className={classNames(
                          projectcss.all,
                          projectcss.h3,
                          projectcss.__wab_text,
                          sty.h3___22AwT
                        )}
                      >
                        {hasVariant(globalVariants, "screen", "mobileOnly")
                          ? "FAQs"
                          : "How to build your following on Fountain"}
                      </h3>

                      <p.PlasmicLink
                        className={classNames(
                          projectcss.all,
                          projectcss.a,
                          sty.link__bgGSv
                        )}
                        component={Link}
                        href={
                          "https://explore.fountain.fm/blog/podcaster-get-started" as const
                        }
                        platform={"nextjs"}
                        target={"_blank" as const}
                      >
                        <Button
                          className={classNames(
                            "__wab_instance",
                            sty.button__zg93Z
                          )}
                          color={"softSand" as const}
                          shape={"rounded" as const}
                          showEndIcon={true}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__zXkhu
                            )}
                          >
                            {"Read our Podcaster Guide"}
                          </div>
                        </Button>
                      </p.PlasmicLink>
                    </p.Stack>
                  </p.Stack>
                </p.Stack>
              ) : null}
            </div>
          ) : null}
          {(
            hasVariant(globalVariants, "screen", "mobileOnly") ? true : false
          ) ? (
            <div
              data-plasmic-name={"podcasterWalletMobile2"}
              data-plasmic-override={overrides.podcasterWalletMobile2}
              className={classNames(projectcss.all, sty.podcasterWalletMobile2)}
            >
              {(
                hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
              ) ? (
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__hxz0M)}
                >
                  {(
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? true
                      : true
                  ) ? (
                    <h2
                      className={classNames(
                        projectcss.all,
                        projectcss.h2,
                        projectcss.__wab_text,
                        sty.h2__byCqF
                      )}
                    >
                      {hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "FAQs"
                        : "Fountain Podcaster Wallet"}
                    </h2>
                  ) : null}

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__ut8U9
                    )}
                  >
                    {"get started"}
                  </div>

                  <div
                    className={classNames(projectcss.all, sty.freeBox__yrk0B)}
                  >
                    <h3
                      className={classNames(
                        projectcss.all,
                        projectcss.h3,
                        projectcss.__wab_text,
                        sty.h3__no0UL
                      )}
                    >
                      {hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "How to build your following on Fountain"
                        : "FAQs"}
                    </h3>

                    <p.PlasmicLink
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        sty.link__aDoab
                      )}
                      component={Link}
                      href={"https://fountain.fm/podcaster-wallet" as const}
                      platform={"nextjs"}
                    >
                      <Button
                        className={classNames(
                          "__wab_instance",
                          sty.button__cHoMo
                        )}
                        color={"softSand" as const}
                        shape={"rounded" as const}
                        showEndIcon={true}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___6WSsv
                          )}
                        >
                          {"Read our Podcaster Guide"}
                        </div>
                      </Button>
                    </p.PlasmicLink>
                  </div>

                  {(
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? true
                      : true
                  ) ? (
                    <div
                      className={classNames(projectcss.all, sty.freeBox__jySAe)}
                    >
                      {(
                        hasVariant(globalVariants, "screen", "mobileOnly")
                          ? true
                          : true
                      ) ? (
                        <Reveal
                          data-plasmic-name={"reveal"}
                          data-plasmic-override={overrides.reveal}
                          className={classNames("__wab_instance", sty.reveal)}
                          triggerOnce={true}
                        >
                          {(
                            hasVariant(globalVariants, "screen", "mobileOnly")
                              ? true
                              : true
                          ) ? (
                            <h2
                              className={classNames(
                                projectcss.all,
                                projectcss.h2,
                                projectcss.__wab_text,
                                sty.h2___4YwSj
                              )}
                            >
                              {hasVariant(
                                globalVariants,
                                "screen",
                                "mobileOnly"
                              )
                                ? "FAQs"
                                : "Recent posts"}
                            </h2>
                          ) : null}

                          <Button
                            className={classNames(
                              "__wab_instance",
                              sty.button__hBwFq
                            )}
                            shape={"rounded" as const}
                            showEndIcon={true}
                          >
                            {"Fountain Blog"}
                          </Button>
                        </Reveal>
                      ) : null}
                    </div>
                  ) : null}
                </p.Stack>
              ) : null}
            </div>
          ) : null}

          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__xblzs)}
          >
            <p.Stack
              as={"div"}
              data-plasmic-name={"foreground5"}
              data-plasmic-override={overrides.foreground5}
              hasGap={true}
              className={classNames(projectcss.all, sty.foreground5)}
            >
              <h3
                className={classNames(
                  projectcss.all,
                  projectcss.h3,
                  projectcss.__wab_text,
                  sty.h3__txBfv
                )}
              >
                {hasVariant(globalVariants, "screen", "mobileOnly")
                  ? "FAQs"
                  : "FAQs"}
              </h3>
            </p.Stack>

            <p.Stack
              as={"div"}
              data-plasmic-name={"foreground2"}
              data-plasmic-override={overrides.foreground2}
              hasGap={true}
              className={classNames(projectcss.all, sty.foreground2)}
            >
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__d0RCp)}
              >
                <div className={classNames(projectcss.all, sty.freeBox__irafP)}>
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img___8NrMi)}
                    displayHeight={"56px" as const}
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"none" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"56px" as const}
                    src={{
                      src: "/plasmic/copy_of_fountain_listen_to_earn/images/_1F3A7Colorpng.png",
                      fullWidth: 618,
                      fullHeight: 618,
                      aspectRatio: undefined
                    }}
                  />
                </div>

                {false ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox___6G2Rs)}
                  >
                    <Icon8Icon
                      className={classNames(projectcss.all, sty.svg__c4H)}
                      role={"img"}
                    />
                  </div>
                ) : null}

                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__rTqq)}
                >
                  <h5
                    className={classNames(
                      projectcss.all,
                      projectcss.h5,
                      projectcss.__wab_text,
                      sty.h5___5N9Qv
                    )}
                  >
                    {"How do I earn from my podcast?"}
                  </h5>
                </p.Stack>
              </p.Stack>

              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox___1G0S5)}
              >
                <div className={classNames(projectcss.all, sty.freeBox__fJsMx)}>
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__p6Vlk)}
                    displayHeight={"56px" as const}
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"none" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"56px" as const}
                    src={{
                      src: "/plasmic/copy_of_fountain_listen_to_earn/images/_1F511Colorpng.png",
                      fullWidth: 618,
                      fullHeight: 618,
                      aspectRatio: undefined
                    }}
                  />
                </div>

                {false ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__smUzT)}
                  >
                    <Icon8Icon
                      className={classNames(projectcss.all, sty.svg__m9QM6)}
                      role={"img"}
                    />
                  </div>
                ) : null}

                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__uAyEh)}
                >
                  <h5
                    className={classNames(
                      projectcss.all,
                      projectcss.h5,
                      projectcss.__wab_text,
                      sty.h5__hrUt8
                    )}
                  >
                    {"How do I claim my show in Fountain?"}
                  </h5>
                </p.Stack>
              </p.Stack>

              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__x0FgB)}
              >
                <div className={classNames(projectcss.all, sty.freeBox__wew2)}>
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img___1PY9F)}
                    displayHeight={"56px" as const}
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"none" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"56px" as const}
                    src={{
                      src: "/plasmic/copy_of_fountain_listen_to_earn/images/_1F4E3Colorpng.png",
                      fullWidth: 618,
                      fullHeight: 618,
                      aspectRatio: undefined
                    }}
                  />
                </div>

                {false ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__mJgC)}
                  >
                    <Icon8Icon
                      className={classNames(projectcss.all, sty.svg__ns5PQ)}
                      role={"img"}
                    />
                  </div>
                ) : null}

                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__kx9Qt)}
                >
                  <h5
                    className={classNames(
                      projectcss.all,
                      projectcss.h5,
                      projectcss.__wab_text,
                      sty.h5___3VnXo
                    )}
                  >
                    {"How do I promote my podcast?"}
                  </h5>
                </p.Stack>
              </p.Stack>

              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__eJzRb)}
              >
                <div className={classNames(projectcss.all, sty.freeBox__d4Dy6)}>
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__aDMw)}
                    displayHeight={"56px" as const}
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"none" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"56px" as const}
                    src={{
                      src: "/plasmic/copy_of_fountain_listen_to_earn/images/_1F9FeColorpng.png",
                      fullWidth: 618,
                      fullHeight: 618,
                      aspectRatio: undefined
                    }}
                  />
                </div>

                {false ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__dzL5)}
                  >
                    <Icon8Icon
                      className={classNames(projectcss.all, sty.svg__ePgIw)}
                      role={"img"}
                    />
                  </div>
                ) : null}

                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox___4EdR9)}
                >
                  <h5
                    className={classNames(
                      projectcss.all,
                      projectcss.h5,
                      projectcss.__wab_text,
                      sty.h5__vOcWi
                    )}
                  >
                    {"Is Fountain Podcaster Wallet free to use?"}
                  </h5>
                </p.Stack>
              </p.Stack>

              <Button
                className={classNames("__wab_instance", sty.button__fa9Rz)}
                shape={"rounded" as const}
                showEndIcon={true}
              >
                {"See all FAQs"}
              </Button>
            </p.Stack>
          </p.Stack>

          {(
            hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
          ) ? (
            <div
              data-plasmic-name={"topShows"}
              data-plasmic-override={overrides.topShows}
              className={classNames(projectcss.all, sty.topShows)}
            >
              {(
                hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
              ) ? (
                <h3
                  className={classNames(
                    projectcss.all,
                    projectcss.h3,
                    projectcss.__wab_text,
                    sty.h3__dgoj9
                  )}
                >
                  {hasVariant(globalVariants, "screen", "mobileOnly")
                    ? "Download Fountain"
                    : "Top shows on Fountain"}
                </h3>
              ) : null}
              {(
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? true
                  : false
              ) ? (
                <h3
                  className={classNames(
                    projectcss.all,
                    projectcss.h3,
                    projectcss.__wab_text,
                    sty.h3__xj1Wb
                  )}
                >
                  {hasVariant(globalVariants, "screen", "mobileOnly")
                    ? "Top shows on Fountain"
                    : "Top claimed shows"}
                </h3>
              ) : null}

              <div className={classNames(projectcss.all, sty.freeBox__qwvWr)}>
                <div className={classNames(projectcss.all, sty.freeBox__orEhf)}>
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__i5V8M)}
                    displayHeight={"auto" as const}
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"100%" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"auto" as const}
                    loading={"lazy" as const}
                    src={{
                      src: "/plasmic/copy_of_fountain_listen_to_earn/images/pomppodcastnewlogopng.png",
                      fullWidth: 1400,
                      fullHeight: 1400,
                      aspectRatio: undefined
                    }}
                  />
                </div>

                <div className={classNames(projectcss.all, sty.freeBox__h2OmB)}>
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__fmzB5)}
                    displayHeight={"auto" as const}
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"100%" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"auto" as const}
                    loading={"lazy" as const}
                    src={{
                      src: "/plasmic/copy_of_fountain_listen_to_earn/images/_51J6Ow25EsSl500Jpg.jpeg",
                      fullWidth: 500,
                      fullHeight: 500,
                      aspectRatio: undefined
                    }}
                  />
                </div>

                {(
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? true
                    : true
                ) ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__inEhr)}
                  >
                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img__tcAfH)}
                      displayHeight={"auto" as const}
                      displayMaxHeight={"none" as const}
                      displayMaxWidth={"100%" as const}
                      displayMinHeight={"0" as const}
                      displayMinWidth={"0" as const}
                      displayWidth={"auto" as const}
                      loading={"lazy" as const}
                      src={{
                        src: "/plasmic/copy_of_fountain_listen_to_earn/images/_21512931642199223908Fe02Fa79Cd2C8Jpeg.jpeg",
                        fullWidth: 3000,
                        fullHeight: 3000,
                        aspectRatio: undefined
                      }}
                    />
                  </div>
                ) : null}
                {(
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? true
                    : true
                ) ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox___3CZuC)}
                  >
                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img__txUw4)}
                      displayHeight={"auto" as const}
                      displayMaxHeight={"none" as const}
                      displayMaxWidth={"100%" as const}
                      displayMinHeight={"0" as const}
                      displayMinWidth={"0" as const}
                      displayWidth={"auto" as const}
                      loading={"lazy" as const}
                      src={{
                        src: "/plasmic/copy_of_fountain_listen_to_earn/images/_41V1I69NolSl5001Jpg.jpeg",
                        fullWidth: 500,
                        fullHeight: 500,
                        aspectRatio: undefined
                      }}
                    />
                  </div>
                ) : null}
              </div>

              {(
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? true
                  : false
              ) ? (
                <div
                  className={classNames(projectcss.all, sty.freeBox___2PjMo)}
                >
                  {(
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? true
                      : true
                  ) ? (
                    <div
                      className={classNames(projectcss.all, sty.freeBox__lAzWq)}
                    >
                      <p.PlasmicImg
                        alt={""}
                        className={classNames(sty.img__aHnyh)}
                        displayHeight={"auto" as const}
                        displayMaxHeight={"none" as const}
                        displayMaxWidth={"100%" as const}
                        displayMinHeight={"0" as const}
                        displayMinWidth={"0" as const}
                        displayWidth={"auto" as const}
                        loading={"lazy" as const}
                        src={{
                          src: "/plasmic/copy_of_fountain_listen_to_earn/images/pomppodcastnewlogopng.png",
                          fullWidth: 1400,
                          fullHeight: 1400,
                          aspectRatio: undefined
                        }}
                      />
                    </div>
                  ) : null}

                  <div
                    className={classNames(projectcss.all, sty.freeBox___7LgKg)}
                  >
                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img__syHc3)}
                      displayHeight={"auto" as const}
                      displayMaxHeight={"none" as const}
                      displayMaxWidth={"100%" as const}
                      displayMinHeight={"0" as const}
                      displayMinWidth={"0" as const}
                      displayWidth={"auto" as const}
                      loading={"lazy" as const}
                      src={{
                        src: "/plasmic/copy_of_fountain_listen_to_earn/images/_21512931642199223908Fe02Fa79Cd2C8Jpeg.jpeg",
                        fullWidth: 3000,
                        fullHeight: 3000,
                        aspectRatio: undefined
                      }}
                    />
                  </div>

                  <div
                    className={classNames(projectcss.all, sty.freeBox__pgPhf)}
                  >
                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img___2DfCh)}
                      displayHeight={"auto" as const}
                      displayMaxHeight={"none" as const}
                      displayMaxWidth={"100%" as const}
                      displayMinHeight={"0" as const}
                      displayMinWidth={"0" as const}
                      displayWidth={"auto" as const}
                      loading={"lazy" as const}
                      src={{
                        src: "/plasmic/copy_of_fountain_listen_to_earn/images/_41V1I69NolSl5001Jpg.jpeg",
                        fullWidth: 500,
                        fullHeight: 500,
                        aspectRatio: undefined
                      }}
                    />
                  </div>
                </div>
              ) : null}

              <div className={classNames(projectcss.all, sty.freeBox__we9Gk)}>
                <div className={classNames(projectcss.all, sty.freeBox__ztAl6)}>
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img___7HhAp)}
                    displayHeight={"auto" as const}
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"100%" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"auto" as const}
                    loading={"lazy" as const}
                    src={{
                      src: "/plasmic/copy_of_fountain_listen_to_earn/images/_1200X1200Bbjpeg.jpeg",
                      fullWidth: 1200,
                      fullHeight: 1200,
                      aspectRatio: undefined
                    }}
                  />
                </div>

                <div className={classNames(projectcss.all, sty.freeBox__q0LCd)}>
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__ht6Ul)}
                    displayHeight={"auto" as const}
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"100%" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"auto" as const}
                    loading={"lazy" as const}
                    src={{
                      src: "/plasmic/copy_of_fountain_listen_to_earn/images/_1896887816354310388574F28Dd1D60Aafjpeg.jpeg",
                      fullWidth: 3000,
                      fullHeight: 3000,
                      aspectRatio: undefined
                    }}
                  />
                </div>

                {(
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? true
                    : true
                ) ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__c4I1G)}
                  >
                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img__mhuSr)}
                      displayHeight={"auto" as const}
                      displayMaxHeight={"none" as const}
                      displayMaxWidth={"100%" as const}
                      displayMinHeight={"0" as const}
                      displayMinWidth={"0" as const}
                      displayWidth={"auto" as const}
                      loading={"lazy" as const}
                      src={{
                        src: "/plasmic/copy_of_fountain_listen_to_earn/images/httpsD3T3Ozftmdmh3IcloudfrontnetProductionPodcastUploadedNologo7971607971601650377297529D65C0E38Ef8A7Jpg.jpeg",
                        fullWidth: 1000,
                        fullHeight: 1000,
                        aspectRatio: undefined
                      }}
                    />
                  </div>
                ) : null}
                {(
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? true
                    : true
                ) ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__dn9Ip)}
                  >
                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img__yB2A)}
                      displayHeight={"auto" as const}
                      displayMaxHeight={"none" as const}
                      displayMaxWidth={"100%" as const}
                      displayMinHeight={"0" as const}
                      displayMinWidth={"0" as const}
                      displayWidth={"auto" as const}
                      loading={"lazy" as const}
                      src={{
                        src: "/plasmic/copy_of_fountain_listen_to_earn/images/stephanLiveraPodcastImgwebp.webp",
                        fullWidth: 825,
                        fullHeight: 825,
                        aspectRatio: undefined
                      }}
                    />
                  </div>
                ) : null}
              </div>

              {(
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? true
                  : false
              ) ? (
                <div className={classNames(projectcss.all, sty.freeBox__tjB1A)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__hZsmG)}
                  >
                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img___755Qp)}
                      displayHeight={"auto" as const}
                      displayMaxHeight={"none" as const}
                      displayMaxWidth={"100%" as const}
                      displayMinHeight={"0" as const}
                      displayMinWidth={"0" as const}
                      displayWidth={"auto" as const}
                      loading={"lazy" as const}
                      src={{
                        src: "/plasmic/copy_of_fountain_listen_to_earn/images/httpsD3T3Ozftmdmh3IcloudfrontnetProductionPodcastUploadedNologo7971607971601650377297529D65C0E38Ef8A7Jpg.jpeg",
                        fullWidth: 1000,
                        fullHeight: 1000,
                        aspectRatio: undefined
                      }}
                    />
                  </div>

                  <div
                    className={classNames(projectcss.all, sty.freeBox__zGNw0)}
                  >
                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img__lHz7B)}
                      displayHeight={"auto" as const}
                      displayMaxHeight={"none" as const}
                      displayMaxWidth={"100%" as const}
                      displayMinHeight={"0" as const}
                      displayMinWidth={"0" as const}
                      displayWidth={"auto" as const}
                      loading={"lazy" as const}
                      src={{
                        src: "/plasmic/copy_of_fountain_listen_to_earn/images/stephanLiveraPodcastImgwebp.webp",
                        fullWidth: 825,
                        fullHeight: 825,
                        aspectRatio: undefined
                      }}
                    />
                  </div>
                </div>
              ) : null}
            </div>
          ) : null}
          {true ? (
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__vyMeq)}
            >
              {(
                hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
              ) ? (
                <div className={classNames(projectcss.all, sty.freeBox__xjikn)}>
                  {(
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? true
                      : true
                  ) ? (
                    <h3
                      className={classNames(
                        projectcss.all,
                        projectcss.h3,
                        projectcss.__wab_text,
                        sty.h3__fDtu
                      )}
                    >
                      {hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "Download Fountain"
                        : "Join Fountain"}
                    </h3>
                  ) : null}
                  {(
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? true
                      : true
                  ) ? (
                    <div
                      className={classNames(projectcss.all, sty.freeBox__stRxU)}
                    >
                      <p.PlasmicLink
                        className={classNames(
                          projectcss.all,
                          projectcss.a,
                          sty.link__zGv3W
                        )}
                        component={Link}
                        href={
                          "https://apps.apple.com/gb/app/fountain-podcasts/id1576394424" as const
                        }
                        platform={"nextjs"}
                        target={"_blank" as const}
                      >
                        <p.PlasmicImg
                          alt={""}
                          className={classNames(sty.img__qeaDl)}
                          displayHeight={"auto" as const}
                          displayMaxHeight={"none" as const}
                          displayMaxWidth={"100%" as const}
                          displayMinHeight={"0" as const}
                          displayMinWidth={"0" as const}
                          displayWidth={"auto" as const}
                          loading={"lazy" as const}
                          src={{
                            src: "/plasmic/copy_of_fountain_listen_to_earn/images/image48.webp",
                            fullWidth: 216,
                            fullHeight: 64,
                            aspectRatio: undefined
                          }}
                        />
                      </p.PlasmicLink>

                      <p.PlasmicLink
                        className={classNames(
                          projectcss.all,
                          projectcss.a,
                          sty.link__jhgwK
                        )}
                        component={Link}
                        href={
                          "https://play.google.com/store/apps/details?id=fm.fountain.apps" as const
                        }
                        platform={"nextjs"}
                        target={"_blank" as const}
                      >
                        <p.PlasmicImg
                          alt={""}
                          className={classNames(sty.img__xvXdE)}
                          displayHeight={"auto" as const}
                          displayMaxHeight={"none" as const}
                          displayMaxWidth={"100%" as const}
                          displayMinHeight={"0" as const}
                          displayMinWidth={"0" as const}
                          displayWidth={"auto" as const}
                          loading={"lazy" as const}
                          src={{
                            src: "/plasmic/copy_of_fountain_listen_to_earn/images/image49.webp",
                            fullWidth: 216,
                            fullHeight: 64,
                            aspectRatio: undefined
                          }}
                        />
                      </p.PlasmicLink>
                    </div>
                  ) : null}
                </div>
              ) : null}
              {(
                hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
              ) ? (
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox___8Lt7J)}
                >
                  <div
                    className={classNames(projectcss.all, sty.columns__hq5Nj)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.column__m1P2I)}
                    >
                      {(
                        hasVariant(globalVariants, "screen", "mobileOnly")
                          ? true
                          : false
                      ) ? (
                        <p.PlasmicImg
                          alt={""}
                          className={classNames(sty.img__tXgWx)}
                          displayHeight={
                            hasVariant(globalVariants, "screen", "mobileOnly")
                              ? ("38.85%" as const)
                              : ("100%" as const)
                          }
                          displayMaxHeight={"none" as const}
                          displayMaxWidth={"none" as const}
                          displayMinHeight={"320px" as const}
                          displayMinWidth={"0" as const}
                          displayWidth={"100%" as const}
                          src={{
                            src: "/plasmic/copy_of_fountain_listen_to_earn/images/image54.webp",
                            fullWidth: 1080,
                            fullHeight: 608,
                            aspectRatio: undefined
                          }}
                        />
                      ) : null}
                      {(
                        hasVariant(globalVariants, "screen", "mobileOnly")
                          ? true
                          : false
                      ) ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__olin7
                          )}
                        >
                          {(
                            hasVariant(globalVariants, "screen", "mobileOnly")
                              ? true
                              : false
                          ) ? (
                            <h1
                              className={classNames(
                                projectcss.all,
                                projectcss.h1,
                                projectcss.__wab_text,
                                sty.h1__vAgxY
                              )}
                            >
                              {hasVariant(
                                globalVariants,
                                "screen",
                                "mobileOnly"
                              )
                                ? "Share podcast clips and support creators with Bitcoin."
                                : "The podcast app where it pays to listen."}
                            </h1>
                          ) : null}
                          {(
                            hasVariant(globalVariants, "screen", "mobileOnly")
                              ? true
                              : false
                          ) ? (
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__aymPl
                              )}
                            >
                              {hasVariant(
                                globalVariants,
                                "screen",
                                "mobileOnly"
                              )
                                ? "Powered by the Lightning Network ⚡"
                                : "Fountain is the only podcast app that rewards both listeners and podcasters for the value they bring to the platform."}
                            </div>
                          ) : null}

                          <h1
                            className={classNames(
                              projectcss.all,
                              projectcss.h1,
                              projectcss.__wab_text,
                              sty.h1__ughjp
                            )}
                          >
                            {hasVariant(globalVariants, "screen", "mobileOnly")
                              ? "Download Fountain"
                              : "Download Fountain"}
                          </h1>

                          {(
                            hasVariant(globalVariants, "screen", "mobileOnly")
                              ? true
                              : true
                          ) ? (
                            <p.PlasmicImg
                              alt={""}
                              className={classNames(sty.img__hDnMy)}
                              displayHeight={
                                hasVariant(
                                  globalVariants,
                                  "screen",
                                  "mobileOnly"
                                )
                                  ? ("612px" as const)
                                  : ("612px" as const)
                              }
                              displayMaxHeight={"none" as const}
                              displayMaxWidth={
                                hasVariant(
                                  globalVariants,
                                  "screen",
                                  "mobileOnly"
                                )
                                  ? ("100%" as const)
                                  : ("100%" as const)
                              }
                              displayMinHeight={"0" as const}
                              displayMinWidth={"0" as const}
                              displayWidth={"auto" as const}
                              loading={
                                hasVariant(
                                  globalVariants,
                                  "screen",
                                  "mobileOnly"
                                )
                                  ? ("lazy" as const)
                                  : ("lazy" as const)
                              }
                              src={
                                hasVariant(
                                  globalVariants,
                                  "screen",
                                  "mobileOnly"
                                )
                                  ? {
                                      src: "/plasmic/copy_of_fountain_listen_to_earn/images/image52.png",
                                      fullWidth: 492,
                                      fullHeight: 984,
                                      aspectRatio: undefined
                                    }
                                  : {
                                      src: "/plasmic/copy_of_fountain_listen_to_earn/images/image52.png",
                                      fullWidth: 492,
                                      fullHeight: 984,
                                      aspectRatio: undefined
                                    }
                              }
                            />
                          ) : null}
                          {(
                            hasVariant(globalVariants, "screen", "mobileOnly")
                              ? true
                              : false
                          ) ? (
                            <p.PlasmicImg
                              alt={""}
                              className={classNames(sty.img__ePsOo)}
                              displayHeight={
                                hasVariant(
                                  globalVariants,
                                  "screen",
                                  "mobileOnly"
                                )
                                  ? ("94px" as const)
                                  : ("94px" as const)
                              }
                              displayMaxHeight={"none" as const}
                              displayMaxWidth={
                                hasVariant(
                                  globalVariants,
                                  "screen",
                                  "mobileOnly"
                                )
                                  ? ("100%" as const)
                                  : ("100%" as const)
                              }
                              displayMinHeight={"0" as const}
                              displayMinWidth={"0" as const}
                              displayWidth={"auto" as const}
                              loading={
                                hasVariant(
                                  globalVariants,
                                  "screen",
                                  "mobileOnly"
                                )
                                  ? ("lazy" as const)
                                  : ("lazy" as const)
                              }
                              src={
                                hasVariant(
                                  globalVariants,
                                  "screen",
                                  "mobileOnly"
                                )
                                  ? {
                                      src: "/plasmic/copy_of_fountain_listen_to_earn/images/image39.png",
                                      fullWidth: 1920,
                                      fullHeight: 670,
                                      aspectRatio: undefined
                                    }
                                  : {
                                      src: "/plasmic/copy_of_fountain_listen_to_earn/images/image39.png",
                                      fullWidth: 1920,
                                      fullHeight: 670,
                                      aspectRatio: undefined
                                    }
                              }
                            />
                          ) : null}
                          {(
                            hasVariant(globalVariants, "screen", "mobileOnly")
                              ? true
                              : false
                          ) ? (
                            <p.PlasmicImg
                              alt={""}
                              className={classNames(sty.img__kbxkl)}
                              displayHeight={
                                hasVariant(
                                  globalVariants,
                                  "screen",
                                  "mobileOnly"
                                )
                                  ? ("94px" as const)
                                  : ("94px" as const)
                              }
                              displayMaxHeight={"none" as const}
                              displayMaxWidth={
                                hasVariant(
                                  globalVariants,
                                  "screen",
                                  "mobileOnly"
                                )
                                  ? ("100%" as const)
                                  : ("100%" as const)
                              }
                              displayMinHeight={"0" as const}
                              displayMinWidth={"0" as const}
                              displayWidth={"auto" as const}
                              loading={
                                hasVariant(
                                  globalVariants,
                                  "screen",
                                  "mobileOnly"
                                )
                                  ? ("lazy" as const)
                                  : ("lazy" as const)
                              }
                              src={
                                hasVariant(
                                  globalVariants,
                                  "screen",
                                  "mobileOnly"
                                )
                                  ? {
                                      src: "/plasmic/copy_of_fountain_listen_to_earn/images/image38.png",
                                      fullWidth: 1920,
                                      fullHeight: 670,
                                      aspectRatio: undefined
                                    }
                                  : {
                                      src: "/plasmic/copy_of_fountain_listen_to_earn/images/image38.png",
                                      fullWidth: 1920,
                                      fullHeight: 670,
                                      aspectRatio: undefined
                                    }
                              }
                            />
                          ) : null}
                        </div>
                      ) : null}
                      {(
                        hasVariant(globalVariants, "screen", "mobileOnly")
                          ? true
                          : false
                      ) ? (
                        <p.Stack
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__saChg
                          )}
                        >
                          <p.Stack
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__sbKck
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__m1Q2N
                              )}
                            />

                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__xz8Az
                              )}
                            >
                              {"PODCASTER GUIDE"}
                            </div>

                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__haG3G
                              )}
                            >
                              {"How to get started with Value for Value"}
                            </div>

                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___94Hav
                              )}
                            >
                              {
                                "Six steps every podcaster should follow to maximise their engagement and earnings - starting from scratch."
                              }
                            </div>

                            <Button
                              className={classNames(
                                "__wab_instance",
                                sty.button__fRtnQ
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__vgDlA
                                )}
                              >
                                {"Read more ->"}
                              </div>
                            </Button>
                          </p.Stack>
                        </p.Stack>
                      ) : null}
                      {(
                        hasVariant(globalVariants, "screen", "mobileOnly")
                          ? true
                          : false
                      ) ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__t9UxE
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__dmJmI
                            )}
                          >
                            {
                              "Is your favourite show not on Fountain yet? \nLet them know on Twitter!"
                            }
                          </div>

                          <div
                            className={classNames(
                              projectcss.all,
                              sty.columns__fm337
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.column__qauAr
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__p02B
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__w1JW1
                                  )}
                                >
                                  <React.Fragment>
                                    <React.Fragment>
                                      {
                                        "Hey [@PODCASTER] I want to support your show with Bitcoin on @fountain_app. Get set up now #satstreamer ⚡⚡⚡ "
                                      }
                                    </React.Fragment>
                                    <p.PlasmicLink
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.a,
                                        projectcss.__wab_text,
                                        projectcss.plasmic_default__inline,
                                        sty.link__mogk
                                      )}
                                      component={Link}
                                      href={
                                        "https://explore.fountain.fm/podcaster-wallet" as const
                                      }
                                      platform={"nextjs"}
                                    >
                                      {"fountain.fm/podcaster-wallet"}
                                    </p.PlasmicLink>
                                    <React.Fragment> </React.Fragment>
                                  </React.Fragment>
                                </div>
                              </div>
                            </div>
                          </div>

                          {true ? (
                            <Embed
                              data-plasmic-name={"embedHtml"}
                              data-plasmic-override={overrides.embedHtml}
                              className={classNames(
                                "__wab_instance",
                                sty.embedHtml
                              )}
                              code={
                                '<a href="https://twitter.com/share?ref_src=twsrc%5Etfw" class="twitter-share-button" data-size="large" data-text="Hey [TAG PODCASTER] I want to support your show in Bitcoin on @fountain_app. Get set up now ⚡⚡⚡" data-url="https://fountain.fm/podcaster-wallet" data-hashtags="satstreamer" data-show-count="false">Tweet</a><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>' as const
                              }
                            />
                          ) : null}
                        </div>
                      ) : null}
                    </div>
                  </div>
                </p.Stack>
              ) : null}
            </p.Stack>
          ) : null}
          {(
            hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
          ) ? (
            <div className={classNames(projectcss.all, sty.freeBox__yatq)}>
              {(
                hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
              ) ? (
                <h3
                  className={classNames(
                    projectcss.all,
                    projectcss.h3,
                    projectcss.__wab_text,
                    sty.h3__ja9Qe
                  )}
                >
                  {hasVariant(globalVariants, "screen", "mobileOnly")
                    ? "Download Fountain"
                    : "Join Fountain"}
                </h3>
              ) : null}
              {(
                hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
              ) ? (
                <div className={classNames(projectcss.all, sty.freeBox__vCl1)}>
                  <p.PlasmicLink
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      sty.link__mcxhE
                    )}
                    component={Link}
                    href={
                      "https://apps.apple.com/gb/app/fountain-podcasts/id1576394424" as const
                    }
                    platform={"nextjs"}
                    target={"_blank" as const}
                  >
                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img___3JnpQ)}
                      displayHeight={"auto" as const}
                      displayMaxHeight={"none" as const}
                      displayMaxWidth={"100%" as const}
                      displayMinHeight={"0" as const}
                      displayMinWidth={"0" as const}
                      displayWidth={"auto" as const}
                      loading={"lazy" as const}
                      src={{
                        src: "/plasmic/copy_of_fountain_listen_to_earn/images/image48.webp",
                        fullWidth: 216,
                        fullHeight: 64,
                        aspectRatio: undefined
                      }}
                    />
                  </p.PlasmicLink>

                  <p.PlasmicLink
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      sty.link__yw9I8
                    )}
                    component={Link}
                    href={
                      "https://play.google.com/store/apps/details?id=fm.fountain.apps" as const
                    }
                    platform={"nextjs"}
                    target={"_blank" as const}
                  >
                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img__blOla)}
                      displayHeight={"auto" as const}
                      displayMaxHeight={"none" as const}
                      displayMaxWidth={"100%" as const}
                      displayMinHeight={"0" as const}
                      displayMinWidth={"0" as const}
                      displayWidth={"auto" as const}
                      loading={"lazy" as const}
                      src={{
                        src: "/plasmic/copy_of_fountain_listen_to_earn/images/image49.webp",
                        fullWidth: 216,
                        fullHeight: 64,
                        aspectRatio: undefined
                      }}
                    />
                  </p.PlasmicLink>
                </div>
              ) : null}
            </div>
          ) : null}

          <BlogPosts
            data-plasmic-name={"blogPosts"}
            data-plasmic-override={overrides.blogPosts}
            className={classNames("__wab_instance", sty.blogPosts)}
          />

          <Footer
            data-plasmic-name={"footer"}
            data-plasmic-override={overrides.footer}
            className={classNames("__wab_instance", sty.footer)}
          />
        </p.Stack>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "navbar",
    "heroImage",
    "headerCopy",
    "foreground",
    "foreground3",
    "foreground4",
    "features",
    "foreground6",
    "foreground10",
    "foreground8",
    "downloadBlack",
    "podcasterWallet5",
    "appStore",
    "podcasterWalletMobile2",
    "reveal",
    "foreground5",
    "foreground2",
    "topShows",
    "embedHtml",
    "blogPosts",
    "footer"
  ],
  navbar: ["navbar"],
  heroImage: ["heroImage"],
  headerCopy: ["headerCopy", "foreground", "foreground3", "foreground4"],
  foreground: ["foreground"],
  foreground3: ["foreground3"],
  foreground4: ["foreground4"],
  features: [
    "features",
    "foreground6",
    "foreground10",
    "foreground8",
    "downloadBlack"
  ],
  foreground6: ["foreground6"],
  foreground10: ["foreground10"],
  foreground8: ["foreground8", "downloadBlack"],
  downloadBlack: ["downloadBlack"],
  podcasterWallet5: ["podcasterWallet5", "appStore"],
  appStore: ["appStore"],
  podcasterWalletMobile2: ["podcasterWalletMobile2", "reveal"],
  reveal: ["reveal"],
  foreground5: ["foreground5"],
  foreground2: ["foreground2"],
  topShows: ["topShows"],
  embedHtml: ["embedHtml"],
  blogPosts: ["blogPosts"],
  footer: ["footer"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  navbar: typeof Navbar;
  heroImage: "div";
  headerCopy: "div";
  foreground: "div";
  foreground3: "div";
  foreground4: "div";
  features: "div";
  foreground6: "div";
  foreground10: "div";
  foreground8: "div";
  downloadBlack: typeof DownloadBlack;
  podcasterWallet5: "div";
  appStore: typeof AppStore;
  podcasterWalletMobile2: "div";
  reveal: typeof Reveal;
  foreground5: "div";
  foreground2: "div";
  topShows: "div";
  embedHtml: typeof Embed;
  blogPosts: typeof BlogPosts;
  footer: typeof Footer;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  Plasmic_2Podcasters__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: Plasmic_2Podcasters__VariantsArgs;
    args?: Plasmic_2Podcasters__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<Plasmic_2Podcasters__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<Plasmic_2Podcasters__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: Plasmic_2Podcasters__ArgProps,
      internalVariantPropNames: Plasmic_2Podcasters__VariantProps
    });

    return Plasmic_2Podcasters__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "Plasmic_2Podcasters";
  } else {
    func.displayName = `Plasmic_2Podcasters.${nodeName}`;
  }
  return func;
}

export const Plasmic_2Podcasters = Object.assign(
  // Top-level Plasmic_2Podcasters renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    navbar: makeNodeComponent("navbar"),
    heroImage: makeNodeComponent("heroImage"),
    headerCopy: makeNodeComponent("headerCopy"),
    foreground: makeNodeComponent("foreground"),
    foreground3: makeNodeComponent("foreground3"),
    foreground4: makeNodeComponent("foreground4"),
    features: makeNodeComponent("features"),
    foreground6: makeNodeComponent("foreground6"),
    foreground10: makeNodeComponent("foreground10"),
    foreground8: makeNodeComponent("foreground8"),
    downloadBlack: makeNodeComponent("downloadBlack"),
    podcasterWallet5: makeNodeComponent("podcasterWallet5"),
    appStore: makeNodeComponent("appStore"),
    podcasterWalletMobile2: makeNodeComponent("podcasterWalletMobile2"),
    reveal: makeNodeComponent("reveal"),
    foreground5: makeNodeComponent("foreground5"),
    foreground2: makeNodeComponent("foreground2"),
    topShows: makeNodeComponent("topShows"),
    embedHtml: makeNodeComponent("embedHtml"),
    blogPosts: makeNodeComponent("blogPosts"),
    footer: makeNodeComponent("footer"),

    // Metadata about props expected for Plasmic_2Podcasters
    internalVariantProps: Plasmic_2Podcasters__VariantProps,
    internalArgProps: Plasmic_2Podcasters__ArgProps
  }
);

export default Plasmic_2Podcasters;
/* prettier-ignore-end */
