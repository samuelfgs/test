// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 6BobAUw5T3TCqT8ypcszbG
// Component: cRynEtU-T3wLW_z
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import BlogPosts from "../../BlogPosts"; // plasmic-import: n3aIYan7r0SEV/component
import Navbar from "../../Navbar"; // plasmic-import: uTDo8cXNPa_B1XC/component
import CantFindWhatYoureLookingFor from "../../CantFindWhatYoureLookingFor"; // plasmic-import: krEvZIR-QOuhWpu/component
import Footer from "../../Footer"; // plasmic-import: nmBaA0odzpiNWE/component
import { Reveal } from "@plasmicpkgs/react-awesome-reveal"; // plasmic-import: R6s1FdhksG/codeComponent

import { useScreenVariants as useScreenVariantsuXvTXvy0VuZNuyJ } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: UXvTXvy0VuZNuyJ/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_fountain_fm_css from "../fountain_fm/plasmic_fountain_fm.module.css"; // plasmic-import: q7mc6yKyK23FBh7x1aGwnG/projectcss
import projectcss from "./plasmic_copy_of_fountain_listen_to_earn.module.css"; // plasmic-import: 6BobAUw5T3TCqT8ypcszbG/projectcss
import sty from "./PlasmicFaqUpdateProfile.module.css"; // plasmic-import: cRynEtU-T3wLW_z/css

import Icon8Icon from "./icons/PlasmicIcon__Icon8"; // plasmic-import: a-uf39TcX85gUT/icon

export type PlasmicFaqUpdateProfile__VariantMembers = {};

export type PlasmicFaqUpdateProfile__VariantsArgs = {};
type VariantPropType = keyof PlasmicFaqUpdateProfile__VariantsArgs;
export const PlasmicFaqUpdateProfile__VariantProps =
  new Array<VariantPropType>();

export type PlasmicFaqUpdateProfile__ArgsType = {};
type ArgPropType = keyof PlasmicFaqUpdateProfile__ArgsType;
export const PlasmicFaqUpdateProfile__ArgProps = new Array<ArgPropType>();

export type PlasmicFaqUpdateProfile__OverridesType = {
  root?: p.Flex<"div">;
  foreground9?: p.Flex<"div">;
  foreground8?: p.Flex<"div">;
  section?: p.Flex<"section">;
  foreground?: p.Flex<"div">;
  blogPosts?: p.Flex<typeof BlogPosts>;
  navbar?: p.Flex<typeof Navbar>;
  h2?: p.Flex<"h2">;
  cantFindWhatYoureLookingFor?: p.Flex<typeof CantFindWhatYoureLookingFor>;
  footer?: p.Flex<typeof Footer>;
  reveal?: p.Flex<typeof Reveal>;
};

export interface DefaultFaqUpdateProfileProps {}

export const defaultFaqUpdateProfile__Args: Partial<PlasmicFaqUpdateProfile__ArgsType> =
  {};

function PlasmicFaqUpdateProfile__RenderFunc(props: {
  variants: PlasmicFaqUpdateProfile__VariantsArgs;
  args: PlasmicFaqUpdateProfile__ArgsType;
  overrides: PlasmicFaqUpdateProfile__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const args = Object.assign({}, defaultFaqUpdateProfile__Args, props.args);
  const $props = args;
  const $ctx = ph.useDataEnv?.() || {};

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsuXvTXvy0VuZNuyJ()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{"FAQ Item"}</title>
        <meta key="og:title" property="og:title" content={"FAQ Item"} />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        {true ? (
          <p.Stack
            as={"div"}
            data-plasmic-name={"root"}
            data-plasmic-override={overrides.root}
            data-plasmic-root={true}
            data-plasmic-for-node={forNode}
            hasGap={true}
            className={classNames(
              projectcss.all,
              projectcss.root_reset,
              projectcss.plasmic_default_styles,
              projectcss.plasmic_mixins,
              projectcss.plasmic_tokens,
              plasmic_fountain_fm_css.plasmic_tokens,
              sty.root
            )}
          >
            {true ? (
              <div className={classNames(projectcss.all, sty.freeBox__mE7H)}>
                {(
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? true
                    : false
                ) ? (
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__fhXu)}
                  >
                    <p.Stack
                      as={"div"}
                      data-plasmic-name={"foreground9"}
                      data-plasmic-override={overrides.foreground9}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.foreground9)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__qscVm
                        )}
                      >
                        {"What you can do on Fountain"}
                      </div>
                    </p.Stack>

                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__j1ZgC)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__wHdgd
                        )}
                      >
                        <p.PlasmicImg
                          alt={""}
                          className={classNames(sty.img__uIeoe)}
                          displayHeight={"60px" as const}
                          displayMaxHeight={"none" as const}
                          displayMaxWidth={"100%" as const}
                          displayMinHeight={"0" as const}
                          displayMinWidth={"0" as const}
                          displayWidth={"auto" as const}
                          loading={"lazy" as const}
                          src={{
                            src: "/plasmic/copy_of_fountain_listen_to_earn/images/image43.png",
                            fullWidth: 200,
                            fullHeight: 200,
                            aspectRatio: undefined
                          }}
                        />
                      </div>

                      {false ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__v4Q4Y
                          )}
                        >
                          <Icon8Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__zm715
                            )}
                            role={"img"}
                          />
                        </div>
                      ) : null}

                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__k8Dc
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__mlpFb
                          )}
                        >
                          {"EARN"}
                        </div>

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___5GFon
                          )}
                        >
                          {"Get paid to listen to podcasts"}
                        </div>
                      </p.Stack>
                    </p.Stack>

                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__dj5Dp)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__cag4J
                        )}
                      >
                        <p.PlasmicImg
                          alt={""}
                          className={classNames(sty.img__n5Q2A)}
                          displayHeight={"60px" as const}
                          displayMaxHeight={"none" as const}
                          displayMaxWidth={"100%" as const}
                          displayMinHeight={"0" as const}
                          displayMinWidth={"0" as const}
                          displayWidth={"auto" as const}
                          loading={"lazy" as const}
                          src={{
                            src: "/plasmic/copy_of_fountain_listen_to_earn/images/image44.png",
                            fullWidth: 200,
                            fullHeight: 200,
                            aspectRatio: undefined
                          }}
                        />
                      </div>

                      {false ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__gmYgh
                          )}
                        >
                          <Icon8Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__olthE
                            )}
                            role={"img"}
                          />
                        </div>
                      ) : null}

                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__sp5KA
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__aqe0T
                          )}
                        >
                          {"SUPPORT"}
                        </div>

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___71GZ
                          )}
                        >
                          {"Give back to podcasts you love"}
                        </div>
                      </p.Stack>
                    </p.Stack>

                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__f7K4H)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__hwbyy
                        )}
                      >
                        <p.PlasmicImg
                          alt={""}
                          className={classNames(sty.img__kRPwX)}
                          displayHeight={"60px" as const}
                          displayMaxHeight={"none" as const}
                          displayMaxWidth={"100%" as const}
                          displayMinHeight={"0" as const}
                          displayMinWidth={"0" as const}
                          displayWidth={"auto" as const}
                          loading={"lazy" as const}
                          src={{
                            src: "/plasmic/copy_of_fountain_listen_to_earn/images/image45.png",
                            fullWidth: 200,
                            fullHeight: 200,
                            aspectRatio: undefined
                          }}
                        />
                      </div>

                      {false ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__zLpqv
                          )}
                        >
                          <Icon8Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__iNvh
                            )}
                            role={"img"}
                          />
                        </div>
                      ) : null}

                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___8UeQd
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__q6JZ
                          )}
                        >
                          {"SHARE"}
                        </div>

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__suMcJ
                          )}
                        >
                          {"Share podcasts with friends"}
                        </div>
                      </p.Stack>
                    </p.Stack>
                  </p.Stack>
                ) : null}
                {true ? (
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__dfQl)}
                  >
                    <p.Stack
                      as={"div"}
                      data-plasmic-name={"foreground8"}
                      data-plasmic-override={overrides.foreground8}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.foreground8)}
                    >
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__jdLTp
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox___4Msho
                          )}
                        >
                          <p.PlasmicImg
                            alt={""}
                            className={classNames(sty.img___4VHe2)}
                            displayHeight={"56px" as const}
                            displayMaxHeight={"none" as const}
                            displayMaxWidth={"none" as const}
                            displayMinHeight={"0" as const}
                            displayMinWidth={"0" as const}
                            displayWidth={"56px" as const}
                            src={
                              "https://emojipedia-us.s3.dualstack.us-west-1.amazonaws.com/thumbs/144/twitter/281/red-apple_1f34e.png" as const
                            }
                          />
                        </div>

                        {false ? (
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__sA1S
                            )}
                          >
                            <Icon8Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg___5EE0Q
                              )}
                              role={"img"}
                            />
                          </div>
                        ) : null}

                        <p.Stack
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__lvqH
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__wMPnS
                            )}
                          >
                            {"EARN"}
                          </div>

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__cwyHt
                            )}
                          >
                            {"Get paid to listen to podcasts"}
                          </div>
                        </p.Stack>
                      </p.Stack>

                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__aJHsa
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__xqttV
                          )}
                        >
                          <p.PlasmicImg
                            alt={""}
                            className={classNames(sty.img__a9Pp)}
                            displayHeight={"56px" as const}
                            displayMaxHeight={"none" as const}
                            displayMaxWidth={"none" as const}
                            displayMinHeight={"0" as const}
                            displayMinWidth={"0" as const}
                            displayWidth={"56px" as const}
                            src={
                              "https://emojipedia-us.s3.dualstack.us-west-1.amazonaws.com/thumbs/144/twitter/281/banana_1f34c.png" as const
                            }
                          />
                        </div>

                        {false ? (
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__xjWzn
                            )}
                          >
                            <Icon8Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg___1X7W
                              )}
                              role={"img"}
                            />
                          </div>
                        ) : null}

                        <p.Stack
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox___7Rmmi
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___0NGeG
                            )}
                          >
                            {"SUPPORT"}
                          </div>

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__cTwVg
                            )}
                          >
                            {"Give back to podcasts you love"}
                          </div>
                        </p.Stack>
                      </p.Stack>

                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__uxmY
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__isWbS
                          )}
                        >
                          <p.PlasmicImg
                            alt={""}
                            className={classNames(sty.img___1Rf1U)}
                            displayHeight={"56px" as const}
                            displayMaxHeight={"none" as const}
                            displayMaxWidth={"none" as const}
                            displayMinHeight={"0" as const}
                            displayMinWidth={"0" as const}
                            displayWidth={"56px" as const}
                            src={
                              "https://emojipedia-us.s3.dualstack.us-west-1.amazonaws.com/thumbs/144/twitter/281/cherries_1f352.png" as const
                            }
                          />
                        </div>

                        {false ? (
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__mteAf
                            )}
                          >
                            <Icon8Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg__pJVic
                              )}
                              role={"img"}
                            />
                          </div>
                        ) : null}

                        <p.Stack
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__oDaZ
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___0PQs8
                            )}
                          >
                            {"SHARE"}
                          </div>

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__bdwA
                            )}
                          >
                            {"Share podcasts with others"}
                          </div>
                        </p.Stack>
                      </p.Stack>
                    </p.Stack>
                  </p.Stack>
                ) : null}
                {true ? (
                  <section
                    data-plasmic-name={"section"}
                    data-plasmic-override={overrides.section}
                    className={classNames(projectcss.all, sty.section)}
                  >
                    <p.Stack
                      as={"div"}
                      data-plasmic-name={"foreground"}
                      data-plasmic-override={overrides.foreground}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.foreground)}
                    >
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__ugiPx
                        )}
                      >
                        <p.Stack
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__jV3ZC
                          )}
                        >
                          <p.Stack
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__nfV8Y
                            )}
                          >
                            {false ? (
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox___001Zg
                                )}
                              >
                                <Icon8Icon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__zLTog
                                  )}
                                  role={"img"}
                                />
                              </div>
                            ) : null}

                            <p.Stack
                              as={"div"}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__p3Vpk
                              )}
                            >
                              <p.PlasmicImg
                                alt={""}
                                className={classNames(sty.img__qadm0)}
                                displayHeight={"auto" as const}
                                displayMaxHeight={"none" as const}
                                displayMaxWidth={"100%" as const}
                                displayMinHeight={"0" as const}
                                displayMinWidth={"0" as const}
                                displayWidth={"auto" as const}
                                loading={"lazy" as const}
                                src={{
                                  src: "/plasmic/copy_of_fountain_listen_to_earn/images/image25.jpeg",
                                  fullWidth: 200,
                                  fullHeight: 200,
                                  aspectRatio: undefined
                                }}
                              />

                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__b0Qf
                                )}
                              >
                                {"Earn"}
                              </div>

                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__fLNwY
                                )}
                              >
                                {"Get paid to listen to podcasts"}
                              </div>
                            </p.Stack>
                          </p.Stack>

                          <p.Stack
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox___9Tnqe
                            )}
                          >
                            {false ? (
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox___53FQr
                                )}
                              >
                                <Icon8Icon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__fLtxP
                                  )}
                                  role={"img"}
                                />
                              </div>
                            ) : null}

                            <p.Stack
                              as={"div"}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__fxut0
                              )}
                            >
                              <p.PlasmicImg
                                alt={""}
                                className={classNames(sty.img__ko5L)}
                                displayHeight={"223px" as const}
                                displayMaxHeight={"none" as const}
                                displayMaxWidth={
                                  hasVariant(
                                    globalVariants,
                                    "screen",
                                    "mobileOnly"
                                  )
                                    ? ("100%" as const)
                                    : ("100%" as const)
                                }
                                displayMinHeight={"0" as const}
                                displayMinWidth={"0" as const}
                                displayWidth={"auto" as const}
                                loading={
                                  hasVariant(
                                    globalVariants,
                                    "screen",
                                    "mobileOnly"
                                  )
                                    ? ("lazy" as const)
                                    : ("lazy" as const)
                                }
                                src={
                                  hasVariant(
                                    globalVariants,
                                    "screen",
                                    "mobileOnly"
                                  )
                                    ? {
                                        src: "/plasmic/copy_of_fountain_listen_to_earn/images/image26.jpeg",
                                        fullWidth: 200,
                                        fullHeight: 200,
                                        aspectRatio: undefined
                                      }
                                    : {
                                        src: "/plasmic/copy_of_fountain_listen_to_earn/images/image26.jpeg",
                                        fullWidth: 200,
                                        fullHeight: 200,
                                        aspectRatio: undefined
                                      }
                                }
                              />

                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__cstj2
                                )}
                              >
                                {"Support"}
                              </div>

                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__wCi7M
                                )}
                              >
                                {"Give back to podcasts you love"}
                              </div>
                            </p.Stack>
                          </p.Stack>

                          <p.Stack
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__bOou5
                            )}
                          >
                            {false ? (
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__sammc
                                )}
                              >
                                <Icon8Icon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg___7WdTi
                                  )}
                                  role={"img"}
                                />
                              </div>
                            ) : null}

                            <p.Stack
                              as={"div"}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.freeBox___9TTdY
                              )}
                            >
                              <p.PlasmicImg
                                alt={""}
                                className={classNames(sty.img__eg8Fr)}
                                displayHeight={"222px" as const}
                                displayMaxHeight={"none" as const}
                                displayMaxWidth={"100%" as const}
                                displayMinHeight={"0" as const}
                                displayMinWidth={"0" as const}
                                displayWidth={"auto" as const}
                                loading={"lazy" as const}
                                src={{
                                  src: "/plasmic/copy_of_fountain_listen_to_earn/images/image27.jpeg",
                                  fullWidth: 200,
                                  fullHeight: 200,
                                  aspectRatio: undefined
                                }}
                              />

                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__u8T7B
                                )}
                              >
                                {"Share"}
                              </div>

                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__iwnMn
                                )}
                              >
                                {"Share podcasts with others"}
                              </div>
                            </p.Stack>
                          </p.Stack>
                        </p.Stack>
                      </p.Stack>
                    </p.Stack>
                  </section>
                ) : null}
              </div>
            ) : null}
            {true ? (
              <BlogPosts
                data-plasmic-name={"blogPosts"}
                data-plasmic-override={overrides.blogPosts}
                className={classNames("__wab_instance", sty.blogPosts)}
              />
            ) : null}

            <Navbar
              data-plasmic-name={"navbar"}
              data-plasmic-override={overrides.navbar}
              className={classNames("__wab_instance", sty.navbar)}
            />

            <div className={classNames(projectcss.all, sty.freeBox___4Lv2V)}>
              {true ? (
                <div className={classNames(projectcss.all, sty.freeBox__zbS3B)}>
                  <p.PlasmicLink
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      sty.link__xz0K1
                    )}
                    component={Link}
                    href={"/faqs" as const}
                    platform={"nextjs"}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__gnnQz
                      )}
                    >
                      {"< FAQ"}
                    </div>
                  </p.PlasmicLink>

                  <div
                    className={classNames(projectcss.all, sty.freeBox__vdwUp)}
                  >
                    <h2
                      data-plasmic-name={"h2"}
                      data-plasmic-override={overrides.h2}
                      className={classNames(
                        projectcss.all,
                        projectcss.h2,
                        projectcss.__wab_text,
                        sty.h2
                      )}
                    >
                      {"How do I update my Fountain profile?"}
                    </h2>

                    <h6
                      className={classNames(
                        projectcss.all,
                        projectcss.h6,
                        projectcss.__wab_text,
                        sty.h6__vPyM
                      )}
                    >
                      {
                        "Go to your Profile and press the Edit Profile to edit your name, username, bio and add a link to your website or your social media. Click Update Profile when you’re ready to save your changes. You can also connect your Twitter account from your Profile."
                      }
                    </h6>

                    <div
                      className={classNames(projectcss.all, sty.freeBox__xwq)}
                    >
                      <h6
                        className={classNames(
                          projectcss.all,
                          projectcss.h6,
                          projectcss.__wab_text,
                          sty.h6__uOQw
                        )}
                      >
                        <React.Fragment>
                          <React.Fragment>{""}</React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{ color: "#000000", fontWeight: 700 }}
                          >
                            {"Next"}
                          </span>
                          <React.Fragment>{""}</React.Fragment>
                        </React.Fragment>
                      </h6>

                      <p.PlasmicLink
                        className={classNames(
                          projectcss.all,
                          projectcss.a,
                          sty.link__jsbm3
                        )}
                        component={Link}
                        href={"/faqs/notifications-settings" as const}
                        platform={"nextjs"}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__fzJcC
                          )}
                        >
                          {"How do I change my push notifications settings?"}
                        </div>
                      </p.PlasmicLink>
                    </div>
                  </div>
                </div>
              ) : null}
            </div>

            <CantFindWhatYoureLookingFor
              data-plasmic-name={"cantFindWhatYoureLookingFor"}
              data-plasmic-override={overrides.cantFindWhatYoureLookingFor}
              className={classNames(
                "__wab_instance",
                sty.cantFindWhatYoureLookingFor
              )}
            />

            <Footer
              data-plasmic-name={"footer"}
              data-plasmic-override={overrides.footer}
              className={classNames("__wab_instance", sty.footer)}
            />

            {true ? (
              <Reveal
                data-plasmic-name={"reveal"}
                data-plasmic-override={overrides.reveal}
                className={classNames("__wab_instance", sty.reveal)}
                triggerOnce={true}
              >
                {true ? (
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__u8MT)}
                    displayHeight={"auto" as const}
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"none" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"auto" as const}
                    src={"https://placekitten.com/300/200" as const}
                  />
                ) : null}
              </Reveal>
            ) : null}
          </p.Stack>
        ) : null}
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "foreground9",
    "foreground8",
    "section",
    "foreground",
    "blogPosts",
    "navbar",
    "h2",
    "cantFindWhatYoureLookingFor",
    "footer",
    "reveal"
  ],
  foreground9: ["foreground9"],
  foreground8: ["foreground8"],
  section: ["section", "foreground"],
  foreground: ["foreground"],
  blogPosts: ["blogPosts"],
  navbar: ["navbar"],
  h2: ["h2"],
  cantFindWhatYoureLookingFor: ["cantFindWhatYoureLookingFor"],
  footer: ["footer"],
  reveal: ["reveal"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  foreground9: "div";
  foreground8: "div";
  section: "section";
  foreground: "div";
  blogPosts: typeof BlogPosts;
  navbar: typeof Navbar;
  h2: "h2";
  cantFindWhatYoureLookingFor: typeof CantFindWhatYoureLookingFor;
  footer: typeof Footer;
  reveal: typeof Reveal;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicFaqUpdateProfile__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicFaqUpdateProfile__VariantsArgs;
    args?: PlasmicFaqUpdateProfile__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicFaqUpdateProfile__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicFaqUpdateProfile__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicFaqUpdateProfile__ArgProps,
      internalVariantPropNames: PlasmicFaqUpdateProfile__VariantProps
    });

    return PlasmicFaqUpdateProfile__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicFaqUpdateProfile";
  } else {
    func.displayName = `PlasmicFaqUpdateProfile.${nodeName}`;
  }
  return func;
}

export const PlasmicFaqUpdateProfile = Object.assign(
  // Top-level PlasmicFaqUpdateProfile renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    foreground9: makeNodeComponent("foreground9"),
    foreground8: makeNodeComponent("foreground8"),
    section: makeNodeComponent("section"),
    foreground: makeNodeComponent("foreground"),
    blogPosts: makeNodeComponent("blogPosts"),
    navbar: makeNodeComponent("navbar"),
    h2: makeNodeComponent("h2"),
    cantFindWhatYoureLookingFor: makeNodeComponent(
      "cantFindWhatYoureLookingFor"
    ),
    footer: makeNodeComponent("footer"),
    reveal: makeNodeComponent("reveal"),

    // Metadata about props expected for PlasmicFaqUpdateProfile
    internalVariantProps: PlasmicFaqUpdateProfile__VariantProps,
    internalArgProps: PlasmicFaqUpdateProfile__ArgProps
  }
);

export default PlasmicFaqUpdateProfile;
/* prettier-ignore-end */
