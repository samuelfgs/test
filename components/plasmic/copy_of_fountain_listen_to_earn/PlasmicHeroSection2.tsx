// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 6BobAUw5T3TCqT8ypcszbG
// Component: 0KeQsRUR59vfYY
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import AppStoreMobile from "../../AppStoreMobile"; // plasmic-import: ESWImwjoiMgdj/component
import PlayStoreMobile from "../../PlayStoreMobile"; // plasmic-import: uqB40iA3dWVLt/component
import AppStore from "../../AppStore"; // plasmic-import: liXq7CocJIAkg/component
import PlayStore from "../../PlayStore"; // plasmic-import: N1s9LeizF64I8/component

import { useScreenVariants as useScreenVariantsuXvTXvy0VuZNuyJ } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: UXvTXvy0VuZNuyJ/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_fountain_fm_css from "../fountain_fm/plasmic_fountain_fm.module.css"; // plasmic-import: q7mc6yKyK23FBh7x1aGwnG/projectcss
import projectcss from "./plasmic_copy_of_fountain_listen_to_earn.module.css"; // plasmic-import: 6BobAUw5T3TCqT8ypcszbG/projectcss
import sty from "./PlasmicHeroSection2.module.css"; // plasmic-import: 0KeQsRUR59vfYY/css

export type PlasmicHeroSection2__VariantMembers = {};

export type PlasmicHeroSection2__VariantsArgs = {};
type VariantPropType = keyof PlasmicHeroSection2__VariantsArgs;
export const PlasmicHeroSection2__VariantProps = new Array<VariantPropType>();

export type PlasmicHeroSection2__ArgsType = {};
type ArgPropType = keyof PlasmicHeroSection2__ArgsType;
export const PlasmicHeroSection2__ArgProps = new Array<ArgPropType>();

export type PlasmicHeroSection2__OverridesType = {
  root?: p.Flex<"div">;
  playStoreMobile?: p.Flex<typeof PlayStoreMobile>;
  appStore?: p.Flex<typeof AppStore>;
  playStore?: p.Flex<typeof PlayStore>;
};

export interface DefaultHeroSection2Props {
  className?: string;
}

export const defaultHeroSection2__Args: Partial<PlasmicHeroSection2__ArgsType> =
  {};

function PlasmicHeroSection2__RenderFunc(props: {
  variants: PlasmicHeroSection2__VariantsArgs;
  args: PlasmicHeroSection2__ArgsType;
  overrides: PlasmicHeroSection2__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const args = Object.assign({}, defaultHeroSection2__Args, props.args);
  const $props = args;
  const $ctx = ph.useDataEnv?.() || {};

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsuXvTXvy0VuZNuyJ()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_fountain_fm_css.plasmic_tokens,
        sty.root
      )}
    >
      <div className={classNames(projectcss.all, sty.freeBox___8Ob2S)}>
        {(hasVariant(globalVariants, "screen", "mobileOnly") ? true : true) ? (
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__xMfth
            )}
          >
            <React.Fragment>
              <React.Fragment>{""}</React.Fragment>
              <span
                className={"plasmic_default__all plasmic_default__span"}
                style={{ color: "#000000" }}
              >
                {"Download Fountain"}
              </span>
              <React.Fragment>{""}</React.Fragment>
            </React.Fragment>
          </div>
        ) : null}
        {(hasVariant(globalVariants, "screen", "mobileOnly") ? true : false) ? (
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__eSkmd
            )}
          >
            <React.Fragment>
              <React.Fragment>{""}</React.Fragment>
              <span
                className={"plasmic_default__all plasmic_default__span"}
                style={{ color: "#000000" }}
              >
                {"Download Fountain"}
              </span>
              <React.Fragment>{""}</React.Fragment>
            </React.Fragment>
          </div>
        ) : null}
        {(hasVariant(globalVariants, "screen", "mobileOnly") ? true : true) ? (
          <div className={classNames(projectcss.all, sty.freeBox___0Ddkz)}>
            <p.PlasmicLink
              className={classNames(
                projectcss.all,
                projectcss.a,
                sty.link__ht8OV
              )}
              component={Link}
              href={
                "https://apps.apple.com/gb/app/fountain-podcasts/id1576394424" as const
              }
              platform={"nextjs"}
              target={"_blank" as const}
            >
              <AppStoreMobile
                className={classNames(
                  "__wab_instance",
                  sty.appStoreMobile___6LVsp
                )}
              />
            </p.PlasmicLink>

            <p.PlasmicLink
              className={classNames(
                projectcss.all,
                projectcss.a,
                sty.link__cbxCp
              )}
              component={Link}
              href={
                "https://play.google.com/store/apps/details?id=fm.fountain.apps" as const
              }
              platform={"nextjs"}
              target={"_blank" as const}
            >
              <PlayStoreMobile
                data-plasmic-name={"playStoreMobile"}
                data-plasmic-override={overrides.playStoreMobile}
                className={classNames("__wab_instance", sty.playStoreMobile)}
              />
            </p.PlasmicLink>
          </div>
        ) : null}
        {(hasVariant(globalVariants, "screen", "mobileOnly") ? true : true) ? (
          <div className={classNames(projectcss.all, sty.freeBox__qqw3R)}>
            {(
              hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
            ) ? (
              <AppStore
                data-plasmic-name={"appStore"}
                data-plasmic-override={overrides.appStore}
                className={classNames("__wab_instance", sty.appStore)}
              />
            ) : null}

            <PlayStore
              data-plasmic-name={"playStore"}
              data-plasmic-override={overrides.playStore}
              className={classNames("__wab_instance", sty.playStore)}
            />

            {(
              hasVariant(globalVariants, "screen", "mobileOnly") ? true : false
            ) ? (
              <AppStoreMobile
                className={classNames(
                  "__wab_instance",
                  sty.appStoreMobile__hsEH
                )}
              />
            ) : null}
          </div>
        ) : null}
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "playStoreMobile", "appStore", "playStore"],
  playStoreMobile: ["playStoreMobile"],
  appStore: ["appStore"],
  playStore: ["playStore"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  playStoreMobile: typeof PlayStoreMobile;
  appStore: typeof AppStore;
  playStore: typeof PlayStore;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHeroSection2__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHeroSection2__VariantsArgs;
    args?: PlasmicHeroSection2__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHeroSection2__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicHeroSection2__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicHeroSection2__ArgProps,
      internalVariantPropNames: PlasmicHeroSection2__VariantProps
    });

    return PlasmicHeroSection2__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHeroSection2";
  } else {
    func.displayName = `PlasmicHeroSection2.${nodeName}`;
  }
  return func;
}

export const PlasmicHeroSection2 = Object.assign(
  // Top-level PlasmicHeroSection2 renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    playStoreMobile: makeNodeComponent("playStoreMobile"),
    appStore: makeNodeComponent("appStore"),
    playStore: makeNodeComponent("playStore"),

    // Metadata about props expected for PlasmicHeroSection2
    internalVariantProps: PlasmicHeroSection2__VariantProps,
    internalArgProps: PlasmicHeroSection2__ArgProps
  }
);

export default PlasmicHeroSection2;
/* prettier-ignore-end */
