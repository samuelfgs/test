// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 6BobAUw5T3TCqT8ypcszbG
// Component: OL6Sp9Kqp3WXBy
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Navbar from "../../Navbar"; // plasmic-import: uTDo8cXNPa_B1XC/component
import Button from "../../Button"; // plasmic-import: KhbeBVaAisx47/component
import AppStore from "../../AppStore"; // plasmic-import: liXq7CocJIAkg/component
import { Reveal } from "@plasmicpkgs/react-awesome-reveal"; // plasmic-import: R6s1FdhksG/codeComponent
import { Embed } from "@plasmicpkgs/plasmic-basic-components"; // plasmic-import: PKldDYkH42/codeComponent
import BlogPosts from "../../BlogPosts"; // plasmic-import: n3aIYan7r0SEV/component
import Footer from "../../Footer"; // plasmic-import: nmBaA0odzpiNWE/component

import { useScreenVariants as useScreenVariantsuXvTXvy0VuZNuyJ } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: UXvTXvy0VuZNuyJ/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_fountain_fm_css from "../fountain_fm/plasmic_fountain_fm.module.css"; // plasmic-import: q7mc6yKyK23FBh7x1aGwnG/projectcss
import projectcss from "./plasmic_copy_of_fountain_listen_to_earn.module.css"; // plasmic-import: 6BobAUw5T3TCqT8ypcszbG/projectcss
import sty from "./Plasmic_1Home.module.css"; // plasmic-import: OL6Sp9Kqp3WXBy/css

import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: S2Divheo_3CFcy/icon
import Icon16Icon from "./icons/PlasmicIcon__Icon16"; // plasmic-import: cF5YAR91eQ2yTs/icon
import Icon8Icon from "./icons/PlasmicIcon__Icon8"; // plasmic-import: a-uf39TcX85gUT/icon

export type Plasmic_1Home__VariantMembers = {};

export type Plasmic_1Home__VariantsArgs = {};
type VariantPropType = keyof Plasmic_1Home__VariantsArgs;
export const Plasmic_1Home__VariantProps = new Array<VariantPropType>();

export type Plasmic_1Home__ArgsType = {};
type ArgPropType = keyof Plasmic_1Home__ArgsType;
export const Plasmic_1Home__ArgProps = new Array<ArgPropType>();

export type Plasmic_1Home__OverridesType = {
  root?: p.Flex<"div">;
  navbar?: p.Flex<typeof Navbar>;
  heroMobile?: p.Flex<"div">;
  mobileHero?: p.Flex<"div">;
  heroDesktop?: p.Flex<"section">;
  support3?: p.Flex<"div">;
  support4?: p.Flex<"div">;
  row3?: p.Flex<"div">;
  h1?: p.Flex<"h1">;
  whatIsBitcoinLightning?: p.Flex<"div">;
  coreFeatures?: p.Flex<"section">;
  earn?: p.Flex<"div">;
  earn2?: p.Flex<"div">;
  row5?: p.Flex<"div">;
  support?: p.Flex<"div">;
  support2?: p.Flex<"div">;
  row2?: p.Flex<"div">;
  earn3?: p.Flex<"div">;
  earn4?: p.Flex<"div">;
  row6?: p.Flex<"div">;
  secondaryFeatures?: p.Flex<"section">;
  foreground2?: p.Flex<"div">;
  secondaryFeatures2?: p.Flex<"section">;
  foreground3?: p.Flex<"div">;
  faQs?: p.Flex<"div">;
  foreground7?: p.Flex<"div">;
  foreground10?: p.Flex<"div">;
  podcasterWallet?: p.Flex<"div">;
  columns?: p.Flex<"div">;
  embedHtml?: p.Flex<typeof Embed>;
  podcasterWalletMobile?: p.Flex<"div">;
  blogPosts?: p.Flex<typeof BlogPosts>;
  footer?: p.Flex<typeof Footer>;
};

export interface Default_1HomeProps {}

export const default_1Home__Args: Partial<Plasmic_1Home__ArgsType> = {};

function Plasmic_1Home__RenderFunc(props: {
  variants: Plasmic_1Home__VariantsArgs;
  args: Plasmic_1Home__ArgsType;
  overrides: Plasmic_1Home__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const args = Object.assign({}, default_1Home__Args, props.args);
  const $props = args;
  const $ctx = ph.useDataEnv?.() || {};

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsuXvTXvy0VuZNuyJ()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">
          {"Fountain | A more rewarding way to enjoy podcasts"}
        </title>
        <meta
          key="og:title"
          property="og:title"
          content={"Fountain | A more rewarding way to enjoy podcasts"}
        />

        <meta
          key="og:image"
          property="og:image"
          content={
            "https://site-assets.plasmic.app/9a7903ee243fc098ec5e8e98e76cb7c2.png"
          }
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        {true ? (
          <p.Stack
            as={"div"}
            data-plasmic-name={"root"}
            data-plasmic-override={overrides.root}
            data-plasmic-root={true}
            data-plasmic-for-node={forNode}
            hasGap={true}
            className={classNames(
              projectcss.all,
              projectcss.root_reset,
              projectcss.plasmic_default_styles,
              projectcss.plasmic_mixins,
              projectcss.plasmic_tokens,
              plasmic_fountain_fm_css.plasmic_tokens,
              sty.root
            )}
          >
            <Navbar
              data-plasmic-name={"navbar"}
              data-plasmic-override={overrides.navbar}
              className={classNames("__wab_instance", sty.navbar)}
            />

            {true ? (
              <div
                data-plasmic-name={"heroMobile"}
                data-plasmic-override={overrides.heroMobile}
                className={classNames(projectcss.all, sty.heroMobile)}
              >
                {(
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? true
                    : true
                ) ? (
                  <div
                    data-plasmic-name={"mobileHero"}
                    data-plasmic-override={overrides.mobileHero}
                    className={classNames(projectcss.all, sty.mobileHero)}
                  >
                    {(
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? true
                        : false
                    ) ? (
                      <h2
                        className={classNames(
                          projectcss.all,
                          projectcss.h2,
                          projectcss.__wab_text,
                          sty.h2__myxn
                        )}
                      >
                        {hasVariant(globalVariants, "screen", "mobileOnly")
                          ? "A more rewarding way to enjoy podcasts"
                          : "The podcast app where it pays to listen."}
                      </h2>
                    ) : null}

                    <h5
                      className={classNames(
                        projectcss.all,
                        projectcss.h5,
                        projectcss.__wab_text,
                        sty.h5__la7Qh
                      )}
                    >
                      {hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "The only podcast app that rewards both listeners and podcasters for the value they bring to the platform."
                        : "The podcast app where it pays to listen."}
                    </h5>

                    <p.PlasmicLink
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        sty.link__j8GvW
                      )}
                      component={Link}
                      href={
                        "https://apps.apple.com/gb/app/fountain-podcasts/id1576394424" as const
                      }
                      platform={"nextjs"}
                      target={"_blank" as const}
                    >
                      {(
                        hasVariant(globalVariants, "screen", "mobileOnly")
                          ? true
                          : false
                      ) ? (
                        <p.PlasmicImg
                          alt={""}
                          className={classNames(sty.img__qc4Nf)}
                          displayHeight={"77px" as const}
                          displayMaxHeight={"none" as const}
                          displayMaxWidth={"100%" as const}
                          displayMinHeight={"0" as const}
                          displayMinWidth={"0" as const}
                          displayWidth={"229px" as const}
                          loading={"lazy" as const}
                          src={{
                            src: "/plasmic/copy_of_fountain_listen_to_earn/images/image39.png",
                            fullWidth: 1920,
                            fullHeight: 670,
                            aspectRatio: undefined
                          }}
                        />
                      ) : null}
                    </p.PlasmicLink>

                    <p.PlasmicLink
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        sty.link__wuDkm
                      )}
                      component={Link}
                      href={
                        "https://play.google.com/store/apps/details?id=fm.fountain.apps" as const
                      }
                      platform={"nextjs"}
                      target={"_blank" as const}
                    >
                      {(
                        hasVariant(globalVariants, "screen", "mobileOnly")
                          ? true
                          : false
                      ) ? (
                        <p.PlasmicImg
                          alt={""}
                          className={classNames(sty.img___4BFww)}
                          displayHeight={"77px" as const}
                          displayMaxHeight={"none" as const}
                          displayMaxWidth={"100%" as const}
                          displayMinHeight={"0" as const}
                          displayMinWidth={"0" as const}
                          displayWidth={"228px" as const}
                          loading={"lazy" as const}
                          src={{
                            src: "/plasmic/copy_of_fountain_listen_to_earn/images/image38.png",
                            fullWidth: 1920,
                            fullHeight: 670,
                            aspectRatio: undefined
                          }}
                        />
                      ) : null}
                    </p.PlasmicLink>
                  </div>
                ) : null}
              </div>
            ) : null}
            {true ? (
              <section
                data-plasmic-name={"heroDesktop"}
                data-plasmic-override={overrides.heroDesktop}
                className={classNames(projectcss.all, sty.heroDesktop)}
              >
                {(
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? true
                    : true
                ) ? (
                  <div
                    className={classNames(projectcss.all, sty.column__mQFfu)}
                  >
                    {true ? (
                      <div
                        data-plasmic-name={"support3"}
                        data-plasmic-override={overrides.support3}
                        className={classNames(projectcss.all, sty.support3)}
                      >
                        {true ? (
                          <div
                            data-plasmic-name={"support4"}
                            data-plasmic-override={overrides.support4}
                            className={classNames(projectcss.all, sty.support4)}
                          >
                            <div
                              data-plasmic-name={"row3"}
                              data-plasmic-override={overrides.row3}
                              className={classNames(projectcss.all, sty.row3)}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.column__kJXvm
                                )}
                              >
                                {true ? (
                                  <p.Stack
                                    as={"div"}
                                    hasGap={true}
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__aKzhA
                                    )}
                                  >
                                    <h1
                                      data-plasmic-name={"h1"}
                                      data-plasmic-override={overrides.h1}
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.h1,
                                        projectcss.__wab_text,
                                        sty.h1
                                      )}
                                    >
                                      <React.Fragment>
                                        <React.Fragment>{""}</React.Fragment>
                                        <span
                                          className={
                                            "plasmic_default__all plasmic_default__span"
                                          }
                                          style={{ color: "#FFFFFF" }}
                                        >
                                          {
                                            "A more rewarding way to enjoy podcasts"
                                          }
                                        </span>
                                        <React.Fragment>{""}</React.Fragment>
                                      </React.Fragment>
                                    </h1>

                                    <h5
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.h5,
                                        projectcss.__wab_text,
                                        sty.h5__im4Ki
                                      )}
                                    >
                                      {
                                        "The only podcast app that rewards both listeners and podcasters for the value they bring to the platform."
                                      }
                                    </h5>
                                  </p.Stack>
                                ) : null}

                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox___6ZiRq
                                  )}
                                >
                                  <p.PlasmicLink
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.a,
                                      sty.link__q8HXp
                                    )}
                                    component={Link}
                                    href={
                                      "https://apps.apple.com/gb/app/fountain-podcasts/id1576394424" as const
                                    }
                                    platform={"nextjs"}
                                    target={"_blank" as const}
                                  >
                                    <p.PlasmicImg
                                      alt={""}
                                      className={classNames(sty.img__dzfA)}
                                      displayHeight={"auto" as const}
                                      displayMaxHeight={"none" as const}
                                      displayMaxWidth={"100%" as const}
                                      displayMinHeight={"0" as const}
                                      displayMinWidth={"0" as const}
                                      displayWidth={"auto" as const}
                                      loading={"lazy" as const}
                                      src={{
                                        src: "/plasmic/copy_of_fountain_listen_to_earn/images/image48.webp",
                                        fullWidth: 216,
                                        fullHeight: 64,
                                        aspectRatio: undefined
                                      }}
                                    />
                                  </p.PlasmicLink>

                                  <p.PlasmicLink
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.a,
                                      sty.link___8XTgZ
                                    )}
                                    component={Link}
                                    href={
                                      "https://play.google.com/store/apps/details?id=fm.fountain.apps" as const
                                    }
                                    platform={"nextjs"}
                                    target={"_blank" as const}
                                  >
                                    <p.PlasmicImg
                                      alt={""}
                                      className={classNames(sty.img__w64Z)}
                                      displayHeight={"auto" as const}
                                      displayMaxHeight={"none" as const}
                                      displayMaxWidth={"100%" as const}
                                      displayMinHeight={"0" as const}
                                      displayMinWidth={"0" as const}
                                      displayWidth={"auto" as const}
                                      loading={"lazy" as const}
                                      src={{
                                        src: "/plasmic/copy_of_fountain_listen_to_earn/images/image49.webp",
                                        fullWidth: 216,
                                        fullHeight: 64,
                                        aspectRatio: undefined
                                      }}
                                    />
                                  </p.PlasmicLink>
                                </div>
                              </div>
                            </div>
                          </div>
                        ) : null}
                      </div>
                    ) : null}
                  </div>
                ) : null}
              </section>
            ) : null}

            <div
              data-plasmic-name={"whatIsBitcoinLightning"}
              data-plasmic-override={overrides.whatIsBitcoinLightning}
              className={classNames(projectcss.all, sty.whatIsBitcoinLightning)}
            >
              <div className={classNames(projectcss.all, sty.column__hokub)}>
                <div className={classNames(projectcss.all, sty.freeBox__usy2D)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__oSf2C
                    )}
                  >
                    {hasVariant(globalVariants, "screen", "mobileOnly")
                      ? "Powered by The Bitcoin Lightning Network ⚡"
                      : "Powered by The Bitcoin Lightning Network ⚡"}
                  </div>

                  <p.PlasmicLink
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      sty.link__ly9YM
                    )}
                    component={Link}
                    href={"/faqs/bitcoin-lightning" as const}
                    platform={"nextjs"}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__zefwU
                      )}
                    >
                      <React.Fragment>
                        <React.Fragment>{""}</React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ textDecorationLine: "underline" }}
                        >
                          {"Learn more"}
                        </span>
                        <React.Fragment>{""}</React.Fragment>
                      </React.Fragment>
                    </div>
                  </p.PlasmicLink>
                </div>
              </div>
            </div>

            {true ? (
              <section
                data-plasmic-name={"coreFeatures"}
                data-plasmic-override={overrides.coreFeatures}
                className={classNames(projectcss.all, sty.coreFeatures)}
              >
                {true ? (
                  <div
                    className={classNames(projectcss.all, sty.column__zMxds)}
                  >
                    {true ? (
                      <div
                        data-plasmic-name={"earn"}
                        data-plasmic-override={overrides.earn}
                        className={classNames(projectcss.all, sty.earn)}
                      >
                        <div
                          data-plasmic-name={"earn2"}
                          data-plasmic-override={overrides.earn2}
                          className={classNames(projectcss.all, sty.earn2)}
                        >
                          <div
                            data-plasmic-name={"row5"}
                            data-plasmic-override={overrides.row5}
                            className={classNames(projectcss.all, sty.row5)}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.column__xYuYu
                              )}
                            >
                              <p.PlasmicImg
                                alt={""}
                                className={classNames(sty.img__kw8FO)}
                                displayHeight={
                                  hasVariant(
                                    globalVariants,
                                    "screen",
                                    "mobileOnly"
                                  )
                                    ? ("501px" as const)
                                    : ("500px" as const)
                                }
                                displayMaxHeight={"none" as const}
                                displayMaxWidth={"none" as const}
                                displayMinHeight={"0" as const}
                                displayMinWidth={"0" as const}
                                displayWidth={
                                  hasVariant(
                                    globalVariants,
                                    "screen",
                                    "mobileOnly"
                                  )
                                    ? ("365px" as const)
                                    : ("550px" as const)
                                }
                                loading={"lazy" as const}
                                src={{
                                  src: "/plasmic/copy_of_fountain_listen_to_earn/images/previewed20220618T120300481Png2.png",
                                  fullWidth: 1080,
                                  fullHeight: 1080,
                                  aspectRatio: undefined
                                }}
                              />
                            </div>

                            <div
                              className={classNames(
                                projectcss.all,
                                sty.column__lgSZw
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox___0BQku
                                )}
                              >
                                <h3
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.h3,
                                    projectcss.__wab_text,
                                    sty.h3__t1Emz
                                  )}
                                >
                                  {"Listen to earn"}
                                </h3>

                                <h5
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.h5,
                                    projectcss.__wab_text,
                                    sty.h5__sjoca
                                  )}
                                >
                                  <React.Fragment>
                                    <React.Fragment>{""}</React.Fragment>
                                    <span
                                      className={
                                        "plasmic_default__all plasmic_default__span"
                                      }
                                      style={{ color: "#000000" }}
                                    >
                                      {
                                        "Earn by listening to any of your favourite podcasts. Earn more by listening to promoted content and creating clips."
                                      }
                                    </span>
                                    <React.Fragment>{""}</React.Fragment>
                                  </React.Fragment>
                                </h5>

                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__bsZsV
                                  )}
                                >
                                  <Button
                                    className={classNames(
                                      "__wab_instance",
                                      sty.button__d2Prg
                                    )}
                                    link={"/join-fountain" as const}
                                    shape={"rounded" as const}
                                    showEndIcon={true}
                                  >
                                    {"Join Fountain"}
                                  </Button>

                                  <p.PlasmicLink
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.a,
                                      sty.link__fln7S
                                    )}
                                    component={Link}
                                    platform={"nextjs"}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__erVYq
                                      )}
                                    >
                                      <React.Fragment>
                                        <React.Fragment>{""}</React.Fragment>
                                        <span
                                          className={
                                            "plasmic_default__all plasmic_default__span"
                                          }
                                          style={{
                                            textDecorationLine: "underline"
                                          }}
                                        >
                                          {"Learn more"}
                                        </span>
                                        <React.Fragment>{""}</React.Fragment>
                                      </React.Fragment>
                                    </div>
                                  </p.PlasmicLink>
                                </div>
                              </div>
                            </div>
                          </div>
                        </div>
                      </div>
                    ) : null}
                    {true ? (
                      <div
                        data-plasmic-name={"support"}
                        data-plasmic-override={overrides.support}
                        className={classNames(projectcss.all, sty.support)}
                      >
                        {true ? (
                          <div
                            data-plasmic-name={"support2"}
                            data-plasmic-override={overrides.support2}
                            className={classNames(projectcss.all, sty.support2)}
                          >
                            <div
                              data-plasmic-name={"row2"}
                              data-plasmic-override={overrides.row2}
                              className={classNames(projectcss.all, sty.row2)}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.column__bcAH
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__zg29N
                                  )}
                                >
                                  <h3
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.h3,
                                      projectcss.__wab_text,
                                      sty.h3__erQ7E
                                    )}
                                  >
                                    {hasVariant(
                                      globalVariants,
                                      "screen",
                                      "mobileOnly"
                                    )
                                      ? "Discover and share clips"
                                      : "Discover and share clips"}
                                  </h3>

                                  <h5
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.h5,
                                      projectcss.__wab_text,
                                      sty.h5__aAez9
                                    )}
                                  >
                                    <React.Fragment>
                                      <React.Fragment>{""}</React.Fragment>
                                      <span
                                        className={
                                          "plasmic_default__all plasmic_default__span"
                                        }
                                        style={{ color: "#000000" }}
                                      >
                                        {
                                          "Create clips of the most valuable highlights from podcasts you love. Earn when other listeners like your clips."
                                        }
                                      </span>
                                      <React.Fragment>{""}</React.Fragment>
                                    </React.Fragment>
                                  </h5>

                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__uxtD
                                    )}
                                  >
                                    <Button
                                      className={classNames(
                                        "__wab_instance",
                                        sty.button__h8Tb5
                                      )}
                                      link={"/join-fountain" as const}
                                      shape={"rounded" as const}
                                      showEndIcon={true}
                                    >
                                      {"Join Fountain"}
                                    </Button>

                                    <p.PlasmicLink
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.a,
                                        sty.link___6Bbkn
                                      )}
                                      component={Link}
                                      platform={"nextjs"}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__ldyPg
                                        )}
                                      >
                                        <React.Fragment>
                                          <React.Fragment>{""}</React.Fragment>
                                          <span
                                            className={
                                              "plasmic_default__all plasmic_default__span"
                                            }
                                            style={{
                                              textDecorationLine: "underline"
                                            }}
                                          >
                                            {"Learn more"}
                                          </span>
                                          <React.Fragment>{""}</React.Fragment>
                                        </React.Fragment>
                                      </div>
                                    </p.PlasmicLink>
                                  </div>
                                </div>
                              </div>

                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.column___2OxXm
                                )}
                              >
                                {true ? (
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__dHaqi
                                    )}
                                  >
                                    {(
                                      hasVariant(
                                        globalVariants,
                                        "screen",
                                        "mobileOnly"
                                      )
                                        ? true
                                        : false
                                    ) ? (
                                      <p.PlasmicImg
                                        alt={""}
                                        className={classNames(sty.img__ewUpN)}
                                        displayHeight={
                                          hasVariant(
                                            globalVariants,
                                            "screen",
                                            "mobileOnly"
                                          )
                                            ? ("501px" as const)
                                            : ("500px" as const)
                                        }
                                        displayMaxHeight={"none" as const}
                                        displayMaxWidth={"none" as const}
                                        displayMinHeight={"0" as const}
                                        displayMinWidth={"0" as const}
                                        displayWidth={
                                          hasVariant(
                                            globalVariants,
                                            "screen",
                                            "mobileOnly"
                                          )
                                            ? ("365px" as const)
                                            : ("550px" as const)
                                        }
                                        loading={"lazy" as const}
                                        src={
                                          hasVariant(
                                            globalVariants,
                                            "screen",
                                            "mobileOnly"
                                          )
                                            ? {
                                                src: "/plasmic/copy_of_fountain_listen_to_earn/images/previewed20220618T120446015Png.png",
                                                fullWidth: 1080,
                                                fullHeight: 1080,
                                                aspectRatio: undefined
                                              }
                                            : {
                                                src: "/plasmic/copy_of_fountain_listen_to_earn/images/previewed77Png.png",
                                                fullWidth: 1080,
                                                fullHeight: 1080,
                                                aspectRatio: undefined
                                              }
                                        }
                                      />
                                    ) : null}
                                    {(
                                      hasVariant(
                                        globalVariants,
                                        "screen",
                                        "mobileOnly"
                                      )
                                        ? true
                                        : true
                                    ) ? (
                                      <p.PlasmicImg
                                        alt={""}
                                        className={classNames(sty.img__qV7Us)}
                                        displayHeight={"500px" as const}
                                        displayMaxHeight={"none" as const}
                                        displayMaxWidth={"none" as const}
                                        displayMinHeight={"0" as const}
                                        displayMinWidth={"0" as const}
                                        displayWidth={
                                          hasVariant(
                                            globalVariants,
                                            "screen",
                                            "mobileOnly"
                                          )
                                            ? ("355px" as const)
                                            : ("550px" as const)
                                        }
                                        loading={"lazy" as const}
                                        src={{
                                          src: "/plasmic/copy_of_fountain_listen_to_earn/images/previewed20220618T120446015Png2.png",
                                          fullWidth: 1080,
                                          fullHeight: 1080,
                                          aspectRatio: undefined
                                        }}
                                      />
                                    ) : null}
                                  </div>
                                ) : null}
                              </div>
                            </div>
                          </div>
                        ) : null}
                      </div>
                    ) : null}
                    {true ? (
                      <div
                        data-plasmic-name={"earn3"}
                        data-plasmic-override={overrides.earn3}
                        className={classNames(projectcss.all, sty.earn3)}
                      >
                        <div
                          data-plasmic-name={"earn4"}
                          data-plasmic-override={overrides.earn4}
                          className={classNames(projectcss.all, sty.earn4)}
                        >
                          <div
                            data-plasmic-name={"row6"}
                            data-plasmic-override={overrides.row6}
                            className={classNames(projectcss.all, sty.row6)}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.column__jbAv1
                              )}
                            >
                              <p.PlasmicImg
                                alt={""}
                                className={classNames(sty.img__ubf7)}
                                displayHeight={
                                  hasVariant(
                                    globalVariants,
                                    "screen",
                                    "mobileOnly"
                                  )
                                    ? ("501px" as const)
                                    : ("500px" as const)
                                }
                                displayMaxHeight={"none" as const}
                                displayMaxWidth={"none" as const}
                                displayMinHeight={"0" as const}
                                displayMinWidth={"0" as const}
                                displayWidth={
                                  hasVariant(
                                    globalVariants,
                                    "screen",
                                    "mobileOnly"
                                  )
                                    ? ("365px" as const)
                                    : ("550px" as const)
                                }
                                loading={"lazy" as const}
                                src={{
                                  src: "/plasmic/copy_of_fountain_listen_to_earn/images/previewed20220618T115907728Png2.png",
                                  fullWidth: 1080,
                                  fullHeight: 1080,
                                  aspectRatio: undefined
                                }}
                              />
                            </div>

                            <div
                              className={classNames(
                                projectcss.all,
                                sty.column__t3X1K
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__ytaWq
                                )}
                              >
                                <h3
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.h3,
                                    projectcss.__wab_text,
                                    sty.h3__iFYn9
                                  )}
                                >
                                  {"Show your support"}
                                </h3>

                                <h5
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.h5,
                                    projectcss.__wab_text,
                                    sty.h5__f8TQn
                                  )}
                                >
                                  <React.Fragment>
                                    <React.Fragment>{""}</React.Fragment>
                                    <span
                                      className={
                                        "plasmic_default__all plasmic_default__span"
                                      }
                                      style={{ color: "#000000" }}
                                    >
                                      {
                                        "Interact with hosts, guests and listeners with Boosts and replies. Stream sats for every minute you listen and send value back."
                                      }
                                    </span>
                                    <React.Fragment>{""}</React.Fragment>
                                  </React.Fragment>
                                </h5>

                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__tmUi1
                                  )}
                                >
                                  <Button
                                    className={classNames(
                                      "__wab_instance",
                                      sty.button__zqMxO
                                    )}
                                    link={"/join-fountain" as const}
                                    shape={"rounded" as const}
                                    showEndIcon={true}
                                  >
                                    {"Join Fountain"}
                                  </Button>

                                  <p.PlasmicLink
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.a,
                                      sty.link___3McQl
                                    )}
                                    component={Link}
                                    platform={"nextjs"}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__gQbmB
                                      )}
                                    >
                                      <React.Fragment>
                                        <React.Fragment>{""}</React.Fragment>
                                        <span
                                          className={
                                            "plasmic_default__all plasmic_default__span"
                                          }
                                          style={{
                                            textDecorationLine: "underline"
                                          }}
                                        >
                                          {"Learn more"}
                                        </span>
                                        <React.Fragment>{""}</React.Fragment>
                                      </React.Fragment>
                                    </div>
                                  </p.PlasmicLink>
                                </div>
                              </div>
                            </div>
                          </div>
                        </div>
                      </div>
                    ) : null}
                  </div>
                ) : null}
              </section>
            ) : null}
            {true ? (
              <p.Stack
                as={"section"}
                data-plasmic-name={"secondaryFeatures"}
                data-plasmic-override={overrides.secondaryFeatures}
                hasGap={true}
                className={classNames(projectcss.all, sty.secondaryFeatures)}
              >
                <p.Stack
                  as={"div"}
                  data-plasmic-name={"foreground2"}
                  data-plasmic-override={overrides.foreground2}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.foreground2)}
                >
                  <div
                    className={classNames(projectcss.all, sty.column___92Cs)}
                  >
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__yXuwY)}
                    >
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__dIndp
                        )}
                      >
                        <p.Stack
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__vy3Zf
                          )}
                        >
                          {(
                            hasVariant(globalVariants, "screen", "mobileOnly")
                              ? true
                              : false
                          ) ? (
                            <AppStore
                              className={classNames(
                                "__wab_instance",
                                sty.appStore__snYlp
                              )}
                            />
                          ) : null}

                          <h3
                            className={classNames(
                              projectcss.all,
                              projectcss.h3,
                              projectcss.__wab_text,
                              sty.h3__uvsJo
                            )}
                          >
                            {hasVariant(globalVariants, "screen", "mobileOnly")
                              ? "Flowing with features"
                              : "Flowing with features"}
                          </h3>

                          <h5
                            className={classNames(
                              projectcss.all,
                              projectcss.h5,
                              projectcss.__wab_text,
                              sty.h5__p3Dvc
                            )}
                          >
                            {
                              "Fountain has most of the essential features that every listener expects their podcast app to deliver and we're adding new ones all the time."
                            }
                          </h5>
                        </p.Stack>
                      </p.Stack>
                    </p.Stack>
                  </div>

                  <div
                    className={classNames(projectcss.all, sty.column___0YhIa)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__hfJ1D)}
                    >
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__wvj3N
                        )}
                      >
                        <h5
                          className={classNames(
                            projectcss.all,
                            projectcss.h5,
                            projectcss.__wab_text,
                            sty.h5__pcgNk
                          )}
                        >
                          {"Sleep timer"}
                        </h5>

                        <Icon16Icon
                          className={classNames(projectcss.all, sty.svg__e27IN)}
                          role={"img"}
                        />
                      </p.Stack>

                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__lh9QN
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__j0Zdc
                          )}
                        >
                          {"Chapters"}
                        </div>

                        <Icon16Icon
                          className={classNames(projectcss.all, sty.svg__l5C4Z)}
                          role={"img"}
                        />
                      </p.Stack>

                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__i3Kpw
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__wlPwm
                          )}
                        >
                          {"Offline listening"}
                        </div>

                        <Icon16Icon
                          className={classNames(projectcss.all, sty.svg__xAl2)}
                          role={"img"}
                        />
                      </p.Stack>

                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__eQLsr
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__nHrWe
                          )}
                        >
                          {"Filter tags"}
                        </div>

                        <Icon16Icon
                          className={classNames(projectcss.all, sty.svg___3PDk)}
                          role={"img"}
                        />
                      </p.Stack>

                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__etkrm
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__yk8Rm
                          )}
                        >
                          {"Notifications"}
                        </div>

                        <Icon16Icon
                          className={classNames(projectcss.all, sty.svg__yD7HJ)}
                          role={"img"}
                        />
                      </p.Stack>
                    </div>
                  </div>
                </p.Stack>
              </p.Stack>
            ) : null}
            {true ? (
              <p.Stack
                as={"section"}
                data-plasmic-name={"secondaryFeatures2"}
                data-plasmic-override={overrides.secondaryFeatures2}
                hasGap={true}
                className={classNames(projectcss.all, sty.secondaryFeatures2)}
              >
                <p.Stack
                  as={"div"}
                  data-plasmic-name={"foreground3"}
                  data-plasmic-override={overrides.foreground3}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.foreground3)}
                >
                  <div
                    className={classNames(projectcss.all, sty.column__llMsn)}
                  >
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__y4J9A)}
                    >
                      <h2
                        className={classNames(
                          projectcss.all,
                          projectcss.h2,
                          projectcss.__wab_text,
                          sty.h2__p5Ifq
                        )}
                      >
                        {"Flowing with features"}
                      </h2>

                      <h5
                        className={classNames(
                          projectcss.all,
                          projectcss.h5,
                          projectcss.__wab_text,
                          sty.h5___38SvX
                        )}
                      >
                        {
                          "As well as the payment and messaging features that Bitcoin Lightning enables, Fountain has most of the essential features that every listener expects their podcast app to deliver."
                        }
                      </h5>
                    </p.Stack>
                  </div>

                  <div
                    className={classNames(projectcss.all, sty.column__kAIvz)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__dPwX)}
                    >
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__rc7Wu
                        )}
                      >
                        <h5
                          className={classNames(
                            projectcss.all,
                            projectcss.h5,
                            projectcss.__wab_text,
                            sty.h5__ezqsr
                          )}
                        >
                          {"Sleep timer"}
                        </h5>

                        <Icon16Icon
                          className={classNames(projectcss.all, sty.svg__izin5)}
                          role={"img"}
                        />
                      </p.Stack>

                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__cOuW9
                        )}
                      >
                        <h5
                          className={classNames(
                            projectcss.all,
                            projectcss.h5,
                            projectcss.__wab_text,
                            sty.h5___72Dtg
                          )}
                        >
                          {"Chapters"}
                        </h5>

                        <Icon16Icon
                          className={classNames(projectcss.all, sty.svg__v6Ym)}
                          role={"img"}
                        />
                      </p.Stack>

                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__ht45
                        )}
                      >
                        <h5
                          className={classNames(
                            projectcss.all,
                            projectcss.h5,
                            projectcss.__wab_text,
                            sty.h5__lmL4I
                          )}
                        >
                          {"Offline listening"}
                        </h5>

                        <Icon16Icon
                          className={classNames(projectcss.all, sty.svg__rmfKy)}
                          role={"img"}
                        />
                      </p.Stack>

                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__qluzK
                        )}
                      >
                        <h5
                          className={classNames(
                            projectcss.all,
                            projectcss.h5,
                            projectcss.__wab_text,
                            sty.h5__t0Zs7
                          )}
                        >
                          {"Filter tags"}
                        </h5>

                        <Icon16Icon
                          className={classNames(projectcss.all, sty.svg__uEvqn)}
                          role={"img"}
                        />
                      </p.Stack>

                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__a6SaA
                        )}
                      >
                        <h5
                          className={classNames(
                            projectcss.all,
                            projectcss.h5,
                            projectcss.__wab_text,
                            sty.h5__wQiDk
                          )}
                        >
                          {"Notifications"}
                        </h5>

                        <Icon16Icon
                          className={classNames(projectcss.all, sty.svg__fCn9)}
                          role={"img"}
                        />
                      </p.Stack>
                    </div>
                  </div>
                </p.Stack>
              </p.Stack>
            ) : null}

            <p.Stack
              as={"div"}
              data-plasmic-name={"faQs"}
              data-plasmic-override={overrides.faQs}
              hasGap={true}
              className={classNames(projectcss.all, sty.faQs)}
            >
              <p.Stack
                as={"div"}
                data-plasmic-name={"foreground7"}
                data-plasmic-override={overrides.foreground7}
                hasGap={true}
                className={classNames(projectcss.all, sty.foreground7)}
              >
                <h3
                  className={classNames(
                    projectcss.all,
                    projectcss.h3,
                    projectcss.__wab_text,
                    sty.h3__eu1VG
                  )}
                >
                  {hasVariant(globalVariants, "screen", "mobileOnly")
                    ? "FAQs"
                    : "FAQs"}
                </h3>
              </p.Stack>

              <p.Stack
                as={"div"}
                data-plasmic-name={"foreground10"}
                data-plasmic-override={overrides.foreground10}
                hasGap={true}
                className={classNames(projectcss.all, sty.foreground10)}
              >
                <p.PlasmicLink
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link__cwat3
                  )}
                  component={Link}
                  href={"/faqs/listener-earning" as const}
                  platform={"nextjs"}
                >
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox___7Yuli)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__pGGvW)}
                    >
                      <p.PlasmicImg
                        alt={""}
                        className={classNames(sty.img__vA2S1)}
                        displayHeight={"56px" as const}
                        displayMaxHeight={"none" as const}
                        displayMaxWidth={"none" as const}
                        displayMinHeight={"0" as const}
                        displayMinWidth={"0" as const}
                        displayWidth={"56px" as const}
                        src={{
                          src: "/plasmic/copy_of_fountain_listen_to_earn/images/_1F3A7Colorpng.png",
                          fullWidth: 618,
                          fullHeight: 618,
                          aspectRatio: undefined
                        }}
                      />
                    </div>

                    {false ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__qmvr
                        )}
                      >
                        <Icon8Icon
                          className={classNames(projectcss.all, sty.svg___4I5P)}
                          role={"img"}
                        />
                      </div>
                    ) : null}

                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__zDb1H)}
                    >
                      <h5
                        className={classNames(
                          projectcss.all,
                          projectcss.h5,
                          projectcss.__wab_text,
                          sty.h5__daJVb
                        )}
                      >
                        {"How do I get paid to listen?"}
                      </h5>
                    </p.Stack>
                  </p.Stack>
                </p.PlasmicLink>

                <p.PlasmicLink
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link__lmI3T
                  )}
                  component={Link}
                  href={"/faqs/support-podcast" as const}
                  platform={"nextjs"}
                >
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__lcEuq)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__nfuCp)}
                    >
                      <p.PlasmicImg
                        alt={""}
                        className={classNames(sty.img__kOwzd)}
                        displayHeight={"56px" as const}
                        displayMaxHeight={"none" as const}
                        displayMaxWidth={"none" as const}
                        displayMinHeight={"0" as const}
                        displayMinWidth={"0" as const}
                        displayWidth={"56px" as const}
                        src={{
                          src: "/plasmic/copy_of_fountain_listen_to_earn/images/_2702Colorpng.png",
                          fullWidth: 618,
                          fullHeight: 618,
                          aspectRatio: undefined
                        }}
                      />
                    </div>

                    {false ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__bwSDv
                        )}
                      >
                        <Icon8Icon
                          className={classNames(projectcss.all, sty.svg__dhWzN)}
                          role={"img"}
                        />
                      </div>
                    ) : null}

                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__zdFg)}
                    >
                      <h5
                        className={classNames(
                          projectcss.all,
                          projectcss.h5,
                          projectcss.__wab_text,
                          sty.h5__nxpbC
                        )}
                      >
                        {"What is Value for Value?"}
                      </h5>
                    </p.Stack>
                  </p.Stack>
                </p.PlasmicLink>

                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__rh0T)}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox___9HdwZ)}
                  >
                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img__ixNAn)}
                      displayHeight={"56px" as const}
                      displayMaxHeight={"none" as const}
                      displayMaxWidth={"none" as const}
                      displayMinHeight={"0" as const}
                      displayMinWidth={"0" as const}
                      displayWidth={"56px" as const}
                      src={{
                        src: "/plasmic/copy_of_fountain_listen_to_earn/images/_1F44AColorpng.png",
                        fullWidth: 618,
                        fullHeight: 618,
                        aspectRatio: undefined
                      }}
                    />
                  </div>

                  {false ? (
                    <div
                      className={classNames(projectcss.all, sty.freeBox__s7Vid)}
                    >
                      <Icon8Icon
                        className={classNames(projectcss.all, sty.svg__h8Bcn)}
                        role={"img"}
                      />
                    </div>
                  ) : null}

                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__dQ3B)}
                  >
                    <h5
                      className={classNames(
                        projectcss.all,
                        projectcss.h5,
                        projectcss.__wab_text,
                        sty.h5__eVaPm
                      )}
                    >
                      {"How do I support a podcast on Fountain?"}
                    </h5>
                  </p.Stack>
                </p.Stack>

                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__tszky)}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox___4G22H)}
                  >
                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img__mzw1T)}
                      displayHeight={"56px" as const}
                      displayMaxHeight={"none" as const}
                      displayMaxWidth={"none" as const}
                      displayMinHeight={"0" as const}
                      displayMinWidth={"0" as const}
                      displayWidth={"56px" as const}
                      src={{
                        src: "/plasmic/copy_of_fountain_listen_to_earn/images/_26A1Colorpng.png",
                        fullWidth: 618,
                        fullHeight: 618,
                        aspectRatio: undefined
                      }}
                    />
                  </div>

                  {false ? (
                    <div
                      className={classNames(projectcss.all, sty.freeBox__k2G0P)}
                    >
                      <Icon8Icon
                        className={classNames(projectcss.all, sty.svg___6DKjp)}
                        role={"img"}
                      />
                    </div>
                  ) : null}

                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__sYaep)}
                  >
                    <h5
                      className={classNames(
                        projectcss.all,
                        projectcss.h5,
                        projectcss.__wab_text,
                        sty.h5__pr2Gq
                      )}
                    >
                      {"Is Fountain free to use for listeners?"}
                    </h5>
                  </p.Stack>
                </p.Stack>

                <Button
                  className={classNames("__wab_instance", sty.button__iW275)}
                  shape={"rounded" as const}
                  showEndIcon={true}
                >
                  {"See all FAQs"}
                </Button>
              </p.Stack>
            </p.Stack>

            {(
              hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
            ) ? (
              <div
                data-plasmic-name={"podcasterWallet"}
                data-plasmic-override={overrides.podcasterWallet}
                className={classNames(projectcss.all, sty.podcasterWallet)}
              >
                {true ? (
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__gnUgt)}
                  >
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__wAeBj)}
                    >
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___33Hqn
                        )}
                      >
                        {(
                          hasVariant(globalVariants, "screen", "mobileOnly")
                            ? true
                            : false
                        ) ? (
                          <AppStore
                            className={classNames(
                              "__wab_instance",
                              sty.appStore__hSQbm
                            )}
                          />
                        ) : null}

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__gMqmM
                          )}
                        >
                          {"FOUNTAIN PODCASTER WALLET"}
                        </div>

                        <h3
                          className={classNames(
                            projectcss.all,
                            projectcss.h3,
                            projectcss.__wab_text,
                            sty.h3__tmftm
                          )}
                        >
                          {hasVariant(globalVariants, "screen", "mobileOnly")
                            ? "FAQs"
                            : "Turn your biggest fans into supporters"}
                        </h3>

                        <h5
                          className={classNames(
                            projectcss.all,
                            projectcss.h5,
                            projectcss.__wab_text,
                            sty.h5__eb5AC
                          )}
                        >
                          {
                            "Claim your show on Fountain to start receiving payments and messages from your audience - directly as they listen."
                          }
                        </h5>

                        <p.PlasmicLink
                          className={classNames(
                            projectcss.all,
                            projectcss.a,
                            sty.link__sN5Ol
                          )}
                          component={Link}
                          href={"/podcasters" as const}
                          platform={"nextjs"}
                        >
                          <Button
                            className={classNames(
                              "__wab_instance",
                              sty.button__cetVr
                            )}
                            shape={"rounded" as const}
                            showEndIcon={true}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__zyCbl
                              )}
                            >
                              {"Learn more"}
                            </div>
                          </Button>
                        </p.PlasmicLink>
                      </p.Stack>
                    </p.Stack>

                    {(
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? true
                        : true
                    ) ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__xalWw
                        )}
                      >
                        <Reveal
                          cascade={true}
                          className={classNames(
                            "__wab_instance",
                            sty.reveal__v5LsQ
                          )}
                          direction={"up" as const}
                          triggerOnce={true}
                        >
                          <p.PlasmicImg
                            alt={""}
                            className={classNames(sty.img__xXGtp)}
                            displayHeight={"576px" as const}
                            displayMaxHeight={"none" as const}
                            displayMaxWidth={"none" as const}
                            displayMinHeight={"0" as const}
                            displayMinWidth={"0" as const}
                            displayWidth={"279px" as const}
                            loading={"lazy" as const}
                            src={{
                              src: "/plasmic/copy_of_fountain_listen_to_earn/images/image53.png",
                              fullWidth: 489,
                              fullHeight: 977,
                              aspectRatio: undefined
                            }}
                          />
                        </Reveal>
                      </div>
                    ) : null}
                  </p.Stack>
                ) : null}
              </div>
            ) : null}
            {(
              hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
            ) ? (
              <div className={classNames(projectcss.all, sty.freeBox__srERb)}>
                <h3
                  className={classNames(
                    projectcss.all,
                    projectcss.h3,
                    projectcss.__wab_text,
                    sty.h3__sDvb
                  )}
                >
                  {"Is your favourite show not on Fountain? "}
                </h3>

                <h5
                  className={classNames(
                    projectcss.all,
                    projectcss.h5,
                    projectcss.__wab_text,
                    sty.h5__pKbih
                  )}
                >
                  {"Let them know on Twitter!"}
                </h5>

                <div
                  data-plasmic-name={"columns"}
                  data-plasmic-override={overrides.columns}
                  className={classNames(projectcss.all, sty.columns)}
                >
                  <div
                    className={classNames(projectcss.all, sty.column__wPsH9)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__wtsWp)}
                    >
                      <h5
                        className={classNames(
                          projectcss.all,
                          projectcss.h5,
                          projectcss.__wab_text,
                          sty.h5__gmYf6
                        )}
                      >
                        <React.Fragment>
                          <React.Fragment>
                            {
                              "Hey [PODCASTER] \nI want to support your show with Bitcoin on @fountain_app. Get set up now "
                            }
                          </React.Fragment>
                          <p.PlasmicLink
                            className={classNames(
                              projectcss.all,
                              projectcss.a,
                              projectcss.__wab_text,
                              projectcss.plasmic_default__inline,
                              sty.link__pjTQf
                            )}
                            component={Link}
                            href={"fountain.fm/podcasters" as const}
                            platform={"nextjs"}
                          >
                            {"fountain.fm/podcasters"}
                          </p.PlasmicLink>
                          <React.Fragment>
                            {" #satstreamer ⚡⚡⚡ "}
                          </React.Fragment>
                        </React.Fragment>
                      </h5>
                    </div>

                    {true ? (
                      <Embed
                        data-plasmic-name={"embedHtml"}
                        data-plasmic-override={overrides.embedHtml}
                        className={classNames("__wab_instance", sty.embedHtml)}
                        code={
                          '<a href="https://twitter.com/share?ref_src=twsrc%5Etfw" class="twitter-share-button" data-size="large" data-text="Hey [TAG PODCASTER] I want to support your show in Bitcoin on @fountain_app. Get set up now ⚡⚡⚡" data-url="https://fountain.fm/podcaster-wallet" data-hashtags="satstreamer" data-show-count="false">Tweet</a><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>' as const
                        }
                      />
                    ) : null}
                  </div>
                </div>
              </div>
            ) : null}
            {(
              hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
            ) ? (
              <div
                data-plasmic-name={"podcasterWalletMobile"}
                data-plasmic-override={overrides.podcasterWalletMobile}
                className={classNames(
                  projectcss.all,
                  sty.podcasterWalletMobile
                )}
              >
                {(
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? true
                    : true
                ) ? (
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__gXaSl)}
                  >
                    {(
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? true
                        : false
                    ) ? (
                      <AppStore
                        className={classNames(
                          "__wab_instance",
                          sty.appStore___8UBOp
                        )}
                      />
                    ) : null}
                    {(
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? true
                        : true
                    ) ? (
                      <h2
                        className={classNames(
                          projectcss.all,
                          projectcss.h2,
                          projectcss.__wab_text,
                          sty.h2__mq4Lw
                        )}
                      >
                        {hasVariant(globalVariants, "screen", "mobileOnly")
                          ? "FAQs"
                          : "Fountain Podcaster Wallet"}
                      </h2>
                    ) : null}

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__nw6R
                      )}
                    >
                      {"FOUNTAIN PODCASTER WALLET"}
                    </div>

                    <div
                      className={classNames(projectcss.all, sty.freeBox__fiNqI)}
                    >
                      <h3
                        className={classNames(
                          projectcss.all,
                          projectcss.h3,
                          projectcss.__wab_text,
                          sty.h3__l3KnD
                        )}
                      >
                        {hasVariant(globalVariants, "screen", "mobileOnly")
                          ? "Make your biggest fans into supporters"
                          : "FAQs"}
                      </h3>

                      <h5
                        className={classNames(
                          projectcss.all,
                          projectcss.h5,
                          projectcss.__wab_text,
                          sty.h5___7GMco
                        )}
                      >
                        {
                          "Claim your show on Fountain to start receiving payments and messages from your audience - directly as they listen."
                        }
                      </h5>
                    </div>

                    {(
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? true
                        : true
                    ) ? (
                      <Reveal
                        className={classNames(
                          "__wab_instance",
                          sty.reveal__bDdwP
                        )}
                        direction={"up" as const}
                        triggerOnce={true}
                      >
                        <p.PlasmicImg
                          alt={""}
                          className={classNames(sty.img__dhauP)}
                          displayHeight={
                            hasVariant(globalVariants, "screen", "mobileOnly")
                              ? ("100%" as const)
                              : ("602px" as const)
                          }
                          displayMaxHeight={"none" as const}
                          displayMaxWidth={"100%" as const}
                          displayMinHeight={"0" as const}
                          displayMinWidth={"0" as const}
                          displayWidth={
                            hasVariant(globalVariants, "screen", "mobileOnly")
                              ? ("300px" as const)
                              : ("auto" as const)
                          }
                          loading={"lazy" as const}
                          src={{
                            src: "/plasmic/copy_of_fountain_listen_to_earn/images/image53.png",
                            fullWidth: 489,
                            fullHeight: 977,
                            aspectRatio: undefined
                          }}
                        />
                      </Reveal>
                    ) : null}

                    <p.PlasmicLink
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        sty.link___8NIq
                      )}
                      component={Link}
                      href={"https://fountain.fm/podcaster-wallet" as const}
                      platform={"nextjs"}
                    >
                      <Button
                        className={classNames(
                          "__wab_instance",
                          sty.button__sb3TV
                        )}
                        link={"/join-fountain" as const}
                        shape={"rounded" as const}
                        showEndIcon={true}
                      >
                        {"Claim your show"}
                      </Button>
                    </p.PlasmicLink>

                    {true ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___5ZjeD
                        )}
                      >
                        {(
                          hasVariant(globalVariants, "screen", "mobileOnly")
                            ? true
                            : true
                        ) ? (
                          <Reveal
                            className={classNames(
                              "__wab_instance",
                              sty.reveal__hwQhi
                            )}
                            triggerOnce={true}
                          >
                            {(
                              hasVariant(globalVariants, "screen", "mobileOnly")
                                ? true
                                : true
                            ) ? (
                              <h2
                                className={classNames(
                                  projectcss.all,
                                  projectcss.h2,
                                  projectcss.__wab_text,
                                  sty.h2__hkfK
                                )}
                              >
                                {hasVariant(
                                  globalVariants,
                                  "screen",
                                  "mobileOnly"
                                )
                                  ? "FAQs"
                                  : "Recent posts"}
                              </h2>
                            ) : null}

                            <Button
                              className={classNames(
                                "__wab_instance",
                                sty.button__hBwFq
                              )}
                              shape={"rounded" as const}
                              showEndIcon={true}
                            >
                              {"Fountain Blog"}
                            </Button>
                          </Reveal>
                        ) : null}
                      </div>
                    ) : null}
                  </p.Stack>
                ) : null}
                {(
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? true
                    : true
                ) ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__jerMd)}
                  >
                    {(
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? true
                        : true
                    ) ? (
                      <Reveal
                        className={classNames(
                          "__wab_instance",
                          sty.reveal__rNiat
                        )}
                        triggerOnce={true}
                      >
                        {(
                          hasVariant(globalVariants, "screen", "mobileOnly")
                            ? true
                            : true
                        ) ? (
                          <h2
                            className={classNames(
                              projectcss.all,
                              projectcss.h2,
                              projectcss.__wab_text,
                              sty.h2__p4QQ
                            )}
                          >
                            {hasVariant(globalVariants, "screen", "mobileOnly")
                              ? "FAQs"
                              : "Recent posts"}
                          </h2>
                        ) : null}
                      </Reveal>
                    ) : null}
                  </div>
                ) : null}
              </div>
            ) : null}

            <BlogPosts
              data-plasmic-name={"blogPosts"}
              data-plasmic-override={overrides.blogPosts}
              className={classNames("__wab_instance", sty.blogPosts)}
            />

            <Footer
              data-plasmic-name={"footer"}
              data-plasmic-override={overrides.footer}
              className={classNames("__wab_instance", sty.footer)}
            />
          </p.Stack>
        ) : null}
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "navbar",
    "heroMobile",
    "mobileHero",
    "heroDesktop",
    "support3",
    "support4",
    "row3",
    "h1",
    "whatIsBitcoinLightning",
    "coreFeatures",
    "earn",
    "earn2",
    "row5",
    "support",
    "support2",
    "row2",
    "earn3",
    "earn4",
    "row6",
    "secondaryFeatures",
    "foreground2",
    "secondaryFeatures2",
    "foreground3",
    "faQs",
    "foreground7",
    "foreground10",
    "podcasterWallet",
    "columns",
    "embedHtml",
    "podcasterWalletMobile",
    "blogPosts",
    "footer"
  ],
  navbar: ["navbar"],
  heroMobile: ["heroMobile", "mobileHero"],
  mobileHero: ["mobileHero"],
  heroDesktop: ["heroDesktop", "support3", "support4", "row3", "h1"],
  support3: ["support3", "support4", "row3", "h1"],
  support4: ["support4", "row3", "h1"],
  row3: ["row3", "h1"],
  h1: ["h1"],
  whatIsBitcoinLightning: ["whatIsBitcoinLightning"],
  coreFeatures: [
    "coreFeatures",
    "earn",
    "earn2",
    "row5",
    "support",
    "support2",
    "row2",
    "earn3",
    "earn4",
    "row6"
  ],
  earn: ["earn", "earn2", "row5"],
  earn2: ["earn2", "row5"],
  row5: ["row5"],
  support: ["support", "support2", "row2"],
  support2: ["support2", "row2"],
  row2: ["row2"],
  earn3: ["earn3", "earn4", "row6"],
  earn4: ["earn4", "row6"],
  row6: ["row6"],
  secondaryFeatures: ["secondaryFeatures", "foreground2"],
  foreground2: ["foreground2"],
  secondaryFeatures2: ["secondaryFeatures2", "foreground3"],
  foreground3: ["foreground3"],
  faQs: ["faQs", "foreground7", "foreground10"],
  foreground7: ["foreground7"],
  foreground10: ["foreground10"],
  podcasterWallet: ["podcasterWallet"],
  columns: ["columns", "embedHtml"],
  embedHtml: ["embedHtml"],
  podcasterWalletMobile: ["podcasterWalletMobile"],
  blogPosts: ["blogPosts"],
  footer: ["footer"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  navbar: typeof Navbar;
  heroMobile: "div";
  mobileHero: "div";
  heroDesktop: "section";
  support3: "div";
  support4: "div";
  row3: "div";
  h1: "h1";
  whatIsBitcoinLightning: "div";
  coreFeatures: "section";
  earn: "div";
  earn2: "div";
  row5: "div";
  support: "div";
  support2: "div";
  row2: "div";
  earn3: "div";
  earn4: "div";
  row6: "div";
  secondaryFeatures: "section";
  foreground2: "div";
  secondaryFeatures2: "section";
  foreground3: "div";
  faQs: "div";
  foreground7: "div";
  foreground10: "div";
  podcasterWallet: "div";
  columns: "div";
  embedHtml: typeof Embed;
  podcasterWalletMobile: "div";
  blogPosts: typeof BlogPosts;
  footer: typeof Footer;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  Plasmic_1Home__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: Plasmic_1Home__VariantsArgs;
    args?: Plasmic_1Home__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<Plasmic_1Home__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<Plasmic_1Home__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: Plasmic_1Home__ArgProps,
      internalVariantPropNames: Plasmic_1Home__VariantProps
    });

    return Plasmic_1Home__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "Plasmic_1Home";
  } else {
    func.displayName = `Plasmic_1Home.${nodeName}`;
  }
  return func;
}

export const Plasmic_1Home = Object.assign(
  // Top-level Plasmic_1Home renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    navbar: makeNodeComponent("navbar"),
    heroMobile: makeNodeComponent("heroMobile"),
    mobileHero: makeNodeComponent("mobileHero"),
    heroDesktop: makeNodeComponent("heroDesktop"),
    support3: makeNodeComponent("support3"),
    support4: makeNodeComponent("support4"),
    row3: makeNodeComponent("row3"),
    h1: makeNodeComponent("h1"),
    whatIsBitcoinLightning: makeNodeComponent("whatIsBitcoinLightning"),
    coreFeatures: makeNodeComponent("coreFeatures"),
    earn: makeNodeComponent("earn"),
    earn2: makeNodeComponent("earn2"),
    row5: makeNodeComponent("row5"),
    support: makeNodeComponent("support"),
    support2: makeNodeComponent("support2"),
    row2: makeNodeComponent("row2"),
    earn3: makeNodeComponent("earn3"),
    earn4: makeNodeComponent("earn4"),
    row6: makeNodeComponent("row6"),
    secondaryFeatures: makeNodeComponent("secondaryFeatures"),
    foreground2: makeNodeComponent("foreground2"),
    secondaryFeatures2: makeNodeComponent("secondaryFeatures2"),
    foreground3: makeNodeComponent("foreground3"),
    faQs: makeNodeComponent("faQs"),
    foreground7: makeNodeComponent("foreground7"),
    foreground10: makeNodeComponent("foreground10"),
    podcasterWallet: makeNodeComponent("podcasterWallet"),
    columns: makeNodeComponent("columns"),
    embedHtml: makeNodeComponent("embedHtml"),
    podcasterWalletMobile: makeNodeComponent("podcasterWalletMobile"),
    blogPosts: makeNodeComponent("blogPosts"),
    footer: makeNodeComponent("footer"),

    // Metadata about props expected for Plasmic_1Home
    internalVariantProps: Plasmic_1Home__VariantProps,
    internalArgProps: Plasmic_1Home__ArgProps
  }
);

export default Plasmic_1Home;
/* prettier-ignore-end */
