// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 6BobAUw5T3TCqT8ypcszbG
// Component: mKyuQdm9dwLGX6
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import BlogPosts from "../../BlogPosts"; // plasmic-import: n3aIYan7r0SEV/component
import Navbar from "../../Navbar"; // plasmic-import: uTDo8cXNPa_B1XC/component
import CantFindWhatYoureLookingFor from "../../CantFindWhatYoureLookingFor"; // plasmic-import: krEvZIR-QOuhWpu/component
import Footer from "../../Footer"; // plasmic-import: nmBaA0odzpiNWE/component
import { Reveal } from "@plasmicpkgs/react-awesome-reveal"; // plasmic-import: R6s1FdhksG/codeComponent

import { useScreenVariants as useScreenVariantsuXvTXvy0VuZNuyJ } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: UXvTXvy0VuZNuyJ/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_fountain_fm_css from "../fountain_fm/plasmic_fountain_fm.module.css"; // plasmic-import: q7mc6yKyK23FBh7x1aGwnG/projectcss
import projectcss from "./plasmic_copy_of_fountain_listen_to_earn.module.css"; // plasmic-import: 6BobAUw5T3TCqT8ypcszbG/projectcss
import sty from "./PlasmicFaqCreatePlaylist.module.css"; // plasmic-import: mKyuQdm9dwLGX6/css

import Icon8Icon from "./icons/PlasmicIcon__Icon8"; // plasmic-import: a-uf39TcX85gUT/icon

export type PlasmicFaqCreatePlaylist__VariantMembers = {};

export type PlasmicFaqCreatePlaylist__VariantsArgs = {};
type VariantPropType = keyof PlasmicFaqCreatePlaylist__VariantsArgs;
export const PlasmicFaqCreatePlaylist__VariantProps =
  new Array<VariantPropType>();

export type PlasmicFaqCreatePlaylist__ArgsType = {};
type ArgPropType = keyof PlasmicFaqCreatePlaylist__ArgsType;
export const PlasmicFaqCreatePlaylist__ArgProps = new Array<ArgPropType>();

export type PlasmicFaqCreatePlaylist__OverridesType = {
  root?: p.Flex<"div">;
  foreground9?: p.Flex<"div">;
  foreground8?: p.Flex<"div">;
  section?: p.Flex<"section">;
  foreground?: p.Flex<"div">;
  blogPosts?: p.Flex<typeof BlogPosts>;
  navbar?: p.Flex<typeof Navbar>;
  h2?: p.Flex<"h2">;
  cantFindWhatYoureLookingFor?: p.Flex<typeof CantFindWhatYoureLookingFor>;
  footer?: p.Flex<typeof Footer>;
  reveal?: p.Flex<typeof Reveal>;
};

export interface DefaultFaqCreatePlaylistProps {}

export const defaultFaqCreatePlaylist__Args: Partial<PlasmicFaqCreatePlaylist__ArgsType> =
  {};

function PlasmicFaqCreatePlaylist__RenderFunc(props: {
  variants: PlasmicFaqCreatePlaylist__VariantsArgs;
  args: PlasmicFaqCreatePlaylist__ArgsType;
  overrides: PlasmicFaqCreatePlaylist__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const args = Object.assign({}, defaultFaqCreatePlaylist__Args, props.args);
  const $props = args;
  const $ctx = ph.useDataEnv?.() || {};

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsuXvTXvy0VuZNuyJ()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{"FAQ Item"}</title>
        <meta key="og:title" property="og:title" content={"FAQ Item"} />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        {true ? (
          <p.Stack
            as={"div"}
            data-plasmic-name={"root"}
            data-plasmic-override={overrides.root}
            data-plasmic-root={true}
            data-plasmic-for-node={forNode}
            hasGap={true}
            className={classNames(
              projectcss.all,
              projectcss.root_reset,
              projectcss.plasmic_default_styles,
              projectcss.plasmic_mixins,
              projectcss.plasmic_tokens,
              plasmic_fountain_fm_css.plasmic_tokens,
              sty.root
            )}
          >
            {true ? (
              <div className={classNames(projectcss.all, sty.freeBox__u03De)}>
                {(
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? true
                    : false
                ) ? (
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox___3LpOi)}
                  >
                    <p.Stack
                      as={"div"}
                      data-plasmic-name={"foreground9"}
                      data-plasmic-override={overrides.foreground9}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.foreground9)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__koUhF
                        )}
                      >
                        {"What you can do on Fountain"}
                      </div>
                    </p.Stack>

                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__pShg5)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__siIR
                        )}
                      >
                        <p.PlasmicImg
                          alt={""}
                          className={classNames(sty.img__r0Mqu)}
                          displayHeight={"60px" as const}
                          displayMaxHeight={"none" as const}
                          displayMaxWidth={"100%" as const}
                          displayMinHeight={"0" as const}
                          displayMinWidth={"0" as const}
                          displayWidth={"auto" as const}
                          loading={"lazy" as const}
                          src={{
                            src: "/plasmic/copy_of_fountain_listen_to_earn/images/image43.png",
                            fullWidth: 200,
                            fullHeight: 200,
                            aspectRatio: undefined
                          }}
                        />
                      </div>

                      {false ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__v0WlR
                          )}
                        >
                          <Icon8Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__foWaE
                            )}
                            role={"img"}
                          />
                        </div>
                      ) : null}

                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___413F8
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___1F4FD
                          )}
                        >
                          {"EARN"}
                        </div>

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__uR3D
                          )}
                        >
                          {"Get paid to listen to podcasts"}
                        </div>
                      </p.Stack>
                    </p.Stack>

                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__h9Jm5)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__ei4JH
                        )}
                      >
                        <p.PlasmicImg
                          alt={""}
                          className={classNames(sty.img__lvwqh)}
                          displayHeight={"60px" as const}
                          displayMaxHeight={"none" as const}
                          displayMaxWidth={"100%" as const}
                          displayMinHeight={"0" as const}
                          displayMinWidth={"0" as const}
                          displayWidth={"auto" as const}
                          loading={"lazy" as const}
                          src={{
                            src: "/plasmic/copy_of_fountain_listen_to_earn/images/image44.png",
                            fullWidth: 200,
                            fullHeight: 200,
                            aspectRatio: undefined
                          }}
                        />
                      </div>

                      {false ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__radRp
                          )}
                        >
                          <Icon8Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__yAOb
                            )}
                            role={"img"}
                          />
                        </div>
                      ) : null}

                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__ys5KP
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__vnBut
                          )}
                        >
                          {"SUPPORT"}
                        </div>

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___3Hs8
                          )}
                        >
                          {"Give back to podcasts you love"}
                        </div>
                      </p.Stack>
                    </p.Stack>

                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__uZJi)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__agP3
                        )}
                      >
                        <p.PlasmicImg
                          alt={""}
                          className={classNames(sty.img__sgAj7)}
                          displayHeight={"60px" as const}
                          displayMaxHeight={"none" as const}
                          displayMaxWidth={"100%" as const}
                          displayMinHeight={"0" as const}
                          displayMinWidth={"0" as const}
                          displayWidth={"auto" as const}
                          loading={"lazy" as const}
                          src={{
                            src: "/plasmic/copy_of_fountain_listen_to_earn/images/image45.png",
                            fullWidth: 200,
                            fullHeight: 200,
                            aspectRatio: undefined
                          }}
                        />
                      </div>

                      {false ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__dqQxU
                          )}
                        >
                          <Icon8Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__xx1FO
                            )}
                            role={"img"}
                          />
                        </div>
                      ) : null}

                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__gHrWu
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__iQjwY
                          )}
                        >
                          {"SHARE"}
                        </div>

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__dv0Ww
                          )}
                        >
                          {"Share podcasts with friends"}
                        </div>
                      </p.Stack>
                    </p.Stack>
                  </p.Stack>
                ) : null}
                {true ? (
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__ytAvo)}
                  >
                    <p.Stack
                      as={"div"}
                      data-plasmic-name={"foreground8"}
                      data-plasmic-override={overrides.foreground8}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.foreground8)}
                    >
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___16Gt
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__aEcpr
                          )}
                        >
                          <p.PlasmicImg
                            alt={""}
                            className={classNames(sty.img__xwLQc)}
                            displayHeight={"56px" as const}
                            displayMaxHeight={"none" as const}
                            displayMaxWidth={"none" as const}
                            displayMinHeight={"0" as const}
                            displayMinWidth={"0" as const}
                            displayWidth={"56px" as const}
                            src={
                              "https://emojipedia-us.s3.dualstack.us-west-1.amazonaws.com/thumbs/144/twitter/281/red-apple_1f34e.png" as const
                            }
                          />
                        </div>

                        {false ? (
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__j86Us
                            )}
                          >
                            <Icon8Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg__mfJtc
                              )}
                              role={"img"}
                            />
                          </div>
                        ) : null}

                        <p.Stack
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__xVwl
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__uPoQx
                            )}
                          >
                            {"EARN"}
                          </div>

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___8IVx1
                            )}
                          >
                            {"Get paid to listen to podcasts"}
                          </div>
                        </p.Stack>
                      </p.Stack>

                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__jJpV
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__wdb99
                          )}
                        >
                          <p.PlasmicImg
                            alt={""}
                            className={classNames(sty.img__dYuuH)}
                            displayHeight={"56px" as const}
                            displayMaxHeight={"none" as const}
                            displayMaxWidth={"none" as const}
                            displayMinHeight={"0" as const}
                            displayMinWidth={"0" as const}
                            displayWidth={"56px" as const}
                            src={
                              "https://emojipedia-us.s3.dualstack.us-west-1.amazonaws.com/thumbs/144/twitter/281/banana_1f34c.png" as const
                            }
                          />
                        </div>

                        {false ? (
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__oTpd4
                            )}
                          >
                            <Icon8Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg__dfXvu
                              )}
                              role={"img"}
                            />
                          </div>
                        ) : null}

                        <p.Stack
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__uAq
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___4V2Mz
                            )}
                          >
                            {"SUPPORT"}
                          </div>

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__hXg3J
                            )}
                          >
                            {"Give back to podcasts you love"}
                          </div>
                        </p.Stack>
                      </p.Stack>

                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__eo63Q
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__hJvBr
                          )}
                        >
                          <p.PlasmicImg
                            alt={""}
                            className={classNames(sty.img__soqaB)}
                            displayHeight={"56px" as const}
                            displayMaxHeight={"none" as const}
                            displayMaxWidth={"none" as const}
                            displayMinHeight={"0" as const}
                            displayMinWidth={"0" as const}
                            displayWidth={"56px" as const}
                            src={
                              "https://emojipedia-us.s3.dualstack.us-west-1.amazonaws.com/thumbs/144/twitter/281/cherries_1f352.png" as const
                            }
                          />
                        </div>

                        {false ? (
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__l5Fwa
                            )}
                          >
                            <Icon8Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg__y55Qq
                              )}
                              role={"img"}
                            />
                          </div>
                        ) : null}

                        <p.Stack
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__k0V2Q
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__j3Ryx
                            )}
                          >
                            {"SHARE"}
                          </div>

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__wEpk4
                            )}
                          >
                            {"Share podcasts with others"}
                          </div>
                        </p.Stack>
                      </p.Stack>
                    </p.Stack>
                  </p.Stack>
                ) : null}
                {true ? (
                  <section
                    data-plasmic-name={"section"}
                    data-plasmic-override={overrides.section}
                    className={classNames(projectcss.all, sty.section)}
                  >
                    <p.Stack
                      as={"div"}
                      data-plasmic-name={"foreground"}
                      data-plasmic-override={overrides.foreground}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.foreground)}
                    >
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__dnwXr
                        )}
                      >
                        <p.Stack
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__crYah
                          )}
                        >
                          <p.Stack
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__rGsxf
                            )}
                          >
                            {false ? (
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__edAvC
                                )}
                              >
                                <Icon8Icon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__tgSsR
                                  )}
                                  role={"img"}
                                />
                              </div>
                            ) : null}

                            <p.Stack
                              as={"div"}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__yfHoE
                              )}
                            >
                              <p.PlasmicImg
                                alt={""}
                                className={classNames(sty.img__dgf0O)}
                                displayHeight={"auto" as const}
                                displayMaxHeight={"none" as const}
                                displayMaxWidth={"100%" as const}
                                displayMinHeight={"0" as const}
                                displayMinWidth={"0" as const}
                                displayWidth={"auto" as const}
                                loading={"lazy" as const}
                                src={{
                                  src: "/plasmic/copy_of_fountain_listen_to_earn/images/image25.jpeg",
                                  fullWidth: 200,
                                  fullHeight: 200,
                                  aspectRatio: undefined
                                }}
                              />

                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__nT3A4
                                )}
                              >
                                {"Earn"}
                              </div>

                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__hUvSv
                                )}
                              >
                                {"Get paid to listen to podcasts"}
                              </div>
                            </p.Stack>
                          </p.Stack>

                          <p.Stack
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__uZy0X
                            )}
                          >
                            {false ? (
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__y1JxX
                                )}
                              >
                                <Icon8Icon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__xlxlN
                                  )}
                                  role={"img"}
                                />
                              </div>
                            ) : null}

                            <p.Stack
                              as={"div"}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__hOpS1
                              )}
                            >
                              <p.PlasmicImg
                                alt={""}
                                className={classNames(sty.img__oImK2)}
                                displayHeight={"223px" as const}
                                displayMaxHeight={"none" as const}
                                displayMaxWidth={
                                  hasVariant(
                                    globalVariants,
                                    "screen",
                                    "mobileOnly"
                                  )
                                    ? ("100%" as const)
                                    : ("100%" as const)
                                }
                                displayMinHeight={"0" as const}
                                displayMinWidth={"0" as const}
                                displayWidth={"auto" as const}
                                loading={
                                  hasVariant(
                                    globalVariants,
                                    "screen",
                                    "mobileOnly"
                                  )
                                    ? ("lazy" as const)
                                    : ("lazy" as const)
                                }
                                src={
                                  hasVariant(
                                    globalVariants,
                                    "screen",
                                    "mobileOnly"
                                  )
                                    ? {
                                        src: "/plasmic/copy_of_fountain_listen_to_earn/images/image26.jpeg",
                                        fullWidth: 200,
                                        fullHeight: 200,
                                        aspectRatio: undefined
                                      }
                                    : {
                                        src: "/plasmic/copy_of_fountain_listen_to_earn/images/image26.jpeg",
                                        fullWidth: 200,
                                        fullHeight: 200,
                                        aspectRatio: undefined
                                      }
                                }
                              />

                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__o55S
                                )}
                              >
                                {"Support"}
                              </div>

                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__yaC9L
                                )}
                              >
                                {"Give back to podcasts you love"}
                              </div>
                            </p.Stack>
                          </p.Stack>

                          <p.Stack
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox___1O8U
                            )}
                          >
                            {false ? (
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox___59XO7
                                )}
                              >
                                <Icon8Icon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__bzEka
                                  )}
                                  role={"img"}
                                />
                              </div>
                            ) : null}

                            <p.Stack
                              as={"div"}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__sOxxY
                              )}
                            >
                              <p.PlasmicImg
                                alt={""}
                                className={classNames(sty.img__phw9L)}
                                displayHeight={"222px" as const}
                                displayMaxHeight={"none" as const}
                                displayMaxWidth={"100%" as const}
                                displayMinHeight={"0" as const}
                                displayMinWidth={"0" as const}
                                displayWidth={"auto" as const}
                                loading={"lazy" as const}
                                src={{
                                  src: "/plasmic/copy_of_fountain_listen_to_earn/images/image27.jpeg",
                                  fullWidth: 200,
                                  fullHeight: 200,
                                  aspectRatio: undefined
                                }}
                              />

                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__vpGve
                                )}
                              >
                                {"Share"}
                              </div>

                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__mq5Yq
                                )}
                              >
                                {"Share podcasts with others"}
                              </div>
                            </p.Stack>
                          </p.Stack>
                        </p.Stack>
                      </p.Stack>
                    </p.Stack>
                  </section>
                ) : null}
              </div>
            ) : null}
            {true ? (
              <BlogPosts
                data-plasmic-name={"blogPosts"}
                data-plasmic-override={overrides.blogPosts}
                className={classNames("__wab_instance", sty.blogPosts)}
              />
            ) : null}

            <Navbar
              data-plasmic-name={"navbar"}
              data-plasmic-override={overrides.navbar}
              className={classNames("__wab_instance", sty.navbar)}
            />

            <div className={classNames(projectcss.all, sty.freeBox___64FnQ)}>
              {true ? (
                <div
                  className={classNames(projectcss.all, sty.freeBox___4Za9L)}
                >
                  <p.PlasmicLink
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      sty.link__vcF1T
                    )}
                    component={Link}
                    href={"/faqs" as const}
                    platform={"nextjs"}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__ndVpz
                      )}
                    >
                      {"< FAQ"}
                    </div>
                  </p.PlasmicLink>

                  <div
                    className={classNames(projectcss.all, sty.freeBox__wMmwL)}
                  >
                    <h2
                      data-plasmic-name={"h2"}
                      data-plasmic-override={overrides.h2}
                      className={classNames(
                        projectcss.all,
                        projectcss.h2,
                        projectcss.__wab_text,
                        sty.h2
                      )}
                    >
                      {"How do I create a playlist?"}
                    </h2>

                    <h6
                      className={classNames(
                        projectcss.all,
                        projectcss.h6,
                        projectcss.__wab_text,
                        sty.h6__azf0
                      )}
                    >
                      {
                        "If you are a Fountain Premium user, you can build up an organised collection of your favourite clips. This is really useful for bookmarking content that you find valuable, either to refer back to yourself or to share with other listeners.\n\nTo create a playlist, go to your Profile and select Playlists. Choose New Playlist and give it a title and a description. If you set the playlist to public, other listeners will be able to find your playlists when searching through the Discover page. When playing a clip, press the Save button on the player and choose which playlist you want to add it to."
                      }
                    </h6>

                    <div
                      className={classNames(projectcss.all, sty.freeBox__yyve0)}
                    >
                      <h6
                        className={classNames(
                          projectcss.all,
                          projectcss.h6,
                          projectcss.__wab_text,
                          sty.h6__jm7Nq
                        )}
                      >
                        <React.Fragment>
                          <React.Fragment>{""}</React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{ color: "#000000", fontWeight: 700 }}
                          >
                            {"Next"}
                          </span>
                          <React.Fragment>{""}</React.Fragment>
                        </React.Fragment>
                      </h6>

                      <p.PlasmicLink
                        className={classNames(
                          projectcss.all,
                          projectcss.a,
                          sty.link__ju9Jq
                        )}
                        component={Link}
                        href={"/faqs/chapters" as const}
                        platform={"nextjs"}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___3YiYf
                          )}
                        >
                          {"Does Fountain support chapters?"}
                        </div>
                      </p.PlasmicLink>
                    </div>
                  </div>
                </div>
              ) : null}
            </div>

            <CantFindWhatYoureLookingFor
              data-plasmic-name={"cantFindWhatYoureLookingFor"}
              data-plasmic-override={overrides.cantFindWhatYoureLookingFor}
              className={classNames(
                "__wab_instance",
                sty.cantFindWhatYoureLookingFor
              )}
            />

            <Footer
              data-plasmic-name={"footer"}
              data-plasmic-override={overrides.footer}
              className={classNames("__wab_instance", sty.footer)}
            />

            {true ? (
              <Reveal
                data-plasmic-name={"reveal"}
                data-plasmic-override={overrides.reveal}
                className={classNames("__wab_instance", sty.reveal)}
                triggerOnce={true}
              >
                {true ? (
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__otQay)}
                    displayHeight={"auto" as const}
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"none" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"auto" as const}
                    src={"https://placekitten.com/300/200" as const}
                  />
                ) : null}
              </Reveal>
            ) : null}
          </p.Stack>
        ) : null}
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "foreground9",
    "foreground8",
    "section",
    "foreground",
    "blogPosts",
    "navbar",
    "h2",
    "cantFindWhatYoureLookingFor",
    "footer",
    "reveal"
  ],
  foreground9: ["foreground9"],
  foreground8: ["foreground8"],
  section: ["section", "foreground"],
  foreground: ["foreground"],
  blogPosts: ["blogPosts"],
  navbar: ["navbar"],
  h2: ["h2"],
  cantFindWhatYoureLookingFor: ["cantFindWhatYoureLookingFor"],
  footer: ["footer"],
  reveal: ["reveal"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  foreground9: "div";
  foreground8: "div";
  section: "section";
  foreground: "div";
  blogPosts: typeof BlogPosts;
  navbar: typeof Navbar;
  h2: "h2";
  cantFindWhatYoureLookingFor: typeof CantFindWhatYoureLookingFor;
  footer: typeof Footer;
  reveal: typeof Reveal;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicFaqCreatePlaylist__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicFaqCreatePlaylist__VariantsArgs;
    args?: PlasmicFaqCreatePlaylist__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicFaqCreatePlaylist__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicFaqCreatePlaylist__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicFaqCreatePlaylist__ArgProps,
      internalVariantPropNames: PlasmicFaqCreatePlaylist__VariantProps
    });

    return PlasmicFaqCreatePlaylist__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicFaqCreatePlaylist";
  } else {
    func.displayName = `PlasmicFaqCreatePlaylist.${nodeName}`;
  }
  return func;
}

export const PlasmicFaqCreatePlaylist = Object.assign(
  // Top-level PlasmicFaqCreatePlaylist renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    foreground9: makeNodeComponent("foreground9"),
    foreground8: makeNodeComponent("foreground8"),
    section: makeNodeComponent("section"),
    foreground: makeNodeComponent("foreground"),
    blogPosts: makeNodeComponent("blogPosts"),
    navbar: makeNodeComponent("navbar"),
    h2: makeNodeComponent("h2"),
    cantFindWhatYoureLookingFor: makeNodeComponent(
      "cantFindWhatYoureLookingFor"
    ),
    footer: makeNodeComponent("footer"),
    reveal: makeNodeComponent("reveal"),

    // Metadata about props expected for PlasmicFaqCreatePlaylist
    internalVariantProps: PlasmicFaqCreatePlaylist__VariantProps,
    internalArgProps: PlasmicFaqCreatePlaylist__ArgProps
  }
);

export default PlasmicFaqCreatePlaylist;
/* prettier-ignore-end */
