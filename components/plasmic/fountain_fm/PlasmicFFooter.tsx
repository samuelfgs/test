// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: q7mc6yKyK23FBh7x1aGwnG
// Component: gBatKe-M6V-
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import { useScreenVariants as useScreenVariantsyLYj6CrpIdr } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: yL-yj6_CrpIDR/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_fountain_fm.module.css"; // plasmic-import: q7mc6yKyK23FBh7x1aGwnG/projectcss
import sty from "./PlasmicFFooter.module.css"; // plasmic-import: gBatKe-M6V-/css

import Icon3Icon from "./icons/PlasmicIcon__Icon3"; // plasmic-import: Jc29r44_fqLxv/icon
import Icon28Icon from "./icons/PlasmicIcon__Icon28"; // plasmic-import: lWehJy1IofLRo/icon
import MediumSizeSvgrepoComsvgIcon from "./icons/PlasmicIcon__MediumSizeSvgrepoComsvg"; // plasmic-import: 9ginZCJ1g3/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: hsNZVU0FKf-nH/icon

export type PlasmicFFooter__VariantMembers = {};

export type PlasmicFFooter__VariantsArgs = {};
type VariantPropType = keyof PlasmicFFooter__VariantsArgs;
export const PlasmicFFooter__VariantProps = new Array<VariantPropType>();

export type PlasmicFFooter__ArgsType = {};
type ArgPropType = keyof PlasmicFFooter__ArgsType;
export const PlasmicFFooter__ArgProps = new Array<ArgPropType>();

export type PlasmicFFooter__OverridesType = {
  root?: p.Flex<"div">;
  img?: p.Flex<typeof p.PlasmicImg>;
};

export interface DefaultFFooterProps {
  className?: string;
}

export const defaultFFooter__Args: Partial<PlasmicFFooter__ArgsType> = {};

function PlasmicFFooter__RenderFunc(props: {
  variants: PlasmicFFooter__VariantsArgs;
  args: PlasmicFFooter__ArgsType;
  overrides: PlasmicFFooter__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const args = Object.assign({}, defaultFFooter__Args, props.args);
  const $props = args;
  const $ctx = ph.useDataEnv?.() || {};

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsyLYj6CrpIdr()
  });

  return (
    (hasVariant(globalVariants, "screen", "_414") ? true : true) ? (
      <div
        data-plasmic-name={"root"}
        data-plasmic-override={overrides.root}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        className={classNames(
          projectcss.all,
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          projectcss.plasmic_tokens,
          sty.root
        )}
      >
        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox___2Cifj)}
        >
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__aRe20)}
          >
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__eFuD)}
            >
              <p.PlasmicImg
                data-plasmic-name={"img"}
                data-plasmic-override={overrides.img}
                alt={""}
                className={classNames(sty.img)}
                displayHeight={
                  hasVariant(globalVariants, "screen", "_777")
                    ? ("36px" as const)
                    : ("40px" as const)
                }
                displayMaxHeight={"none" as const}
                displayMaxWidth={"none" as const}
                displayMinHeight={"0" as const}
                displayMinWidth={"0" as const}
                displayWidth={
                  hasVariant(globalVariants, "screen", "_777")
                    ? ("142px" as const)
                    : ("168px" as const)
                }
                src={{
                  src: "/plasmic/fountain_fm/images/fountainWordmark2002Png2.png",
                  fullWidth: 1281,
                  fullHeight: 334,
                  aspectRatio: undefined
                }}
              />

              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__tlHzt)}
              >
                {true ? (
                  <p.PlasmicLink
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      sty.link__cIzM
                    )}
                    component={Link}
                    href={"#" as const}
                    platform={"nextjs"}
                  >
                    <Icon3Icon
                      className={classNames(projectcss.all, sty.svg__d43N8)}
                      role={"img"}
                    />
                  </p.PlasmicLink>
                ) : null}

                <Icon28Icon
                  className={classNames(projectcss.all, sty.svg__fula8)}
                  role={"img"}
                />

                {(
                  hasVariant(globalVariants, "screen", "_1440") ? true : false
                ) ? (
                  <p.PlasmicIcon
                    PlasmicIconType={
                      hasVariant(globalVariants, "screen", "_1440")
                        ? MediumSizeSvgrepoComsvgIcon
                        : Icon28Icon
                    }
                    className={classNames(projectcss.all, sty.svg__wdSk)}
                    role={"img"}
                  />
                ) : null}
                {(
                  hasVariant(globalVariants, "screen", "_1440") ? true : true
                ) ? (
                  <p.PlasmicLink
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      sty.link__tGtBb
                    )}
                    component={Link}
                    platform={"nextjs"}
                  />
                ) : null}
              </p.Stack>

              {(hasVariant(globalVariants, "screen", "_1440") ? true : true) ? (
                <svg
                  className={classNames(projectcss.all, sty.svg__opaFg)}
                  role={"img"}
                />
              ) : null}
            </p.Stack>
          </p.Stack>

          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__n39Oq)}
          >
            <h3
              className={classNames(
                projectcss.all,
                projectcss.h3,
                projectcss.__wab_text,
                sty.h3__k328J
              )}
            >
              {hasVariant(globalVariants, "screen", "_777")
                ? "Get started"
                : "Getting started"}
            </h3>

            <p.Stack
              as={p.PlasmicLink}
              hasGap={true}
              className={classNames(
                projectcss.all,
                projectcss.a,
                sty.link__jZaZo
              )}
              component={Link}
              platform={"nextjs"}
            >
              {false ? (
                <IconIcon
                  className={classNames(projectcss.all, sty.svg__iaiP9)}
                  role={"img"}
                />
              ) : null}

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__nEWnu
                )}
              >
                {"For listeners"}
              </div>

              {false ? (
                <IconIcon
                  className={classNames(projectcss.all, sty.svg___5C1SC)}
                  role={"img"}
                />
              ) : null}
            </p.Stack>

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___78YuZ
              )}
            >
              {"For podcasters"}
            </div>

            <p.Stack
              as={p.PlasmicLink}
              hasGap={true}
              className={classNames(
                projectcss.all,
                projectcss.a,
                sty.link__xCn3E
              )}
              component={Link}
              platform={"nextjs"}
            >
              {false ? (
                <IconIcon
                  className={classNames(projectcss.all, sty.svg___5NkE1)}
                  role={"img"}
                />
              ) : null}
              {false ? (
                <IconIcon
                  className={classNames(projectcss.all, sty.svg__jsbrp)}
                  role={"img"}
                />
              ) : null}
            </p.Stack>
          </p.Stack>

          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__iEZz)}
          >
            <h3
              className={classNames(
                projectcss.all,
                projectcss.h3,
                projectcss.__wab_text,
                sty.h3__p2Bm
              )}
            >
              {"Legal"}
            </h3>

            <p.Stack
              as={p.PlasmicLink}
              hasGap={true}
              className={classNames(
                projectcss.all,
                projectcss.a,
                sty.link__moUv
              )}
              component={Link}
              platform={"nextjs"}
            >
              {false ? (
                <IconIcon
                  className={classNames(projectcss.all, sty.svg__xpWwZ)}
                  role={"img"}
                />
              ) : null}

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__iFdte
                )}
              >
                {hasVariant(globalVariants, "screen", "_1440")
                  ? "Terms of use"
                  : "Documentation"}
              </div>

              {false ? (
                <IconIcon
                  className={classNames(projectcss.all, sty.svg__lPg0F)}
                  role={"img"}
                />
              ) : null}
            </p.Stack>

            <p.Stack
              as={p.PlasmicLink}
              hasGap={true}
              className={classNames(
                projectcss.all,
                projectcss.a,
                sty.link___5Rmu4
              )}
              component={Link}
              platform={"nextjs"}
            >
              {false ? (
                <IconIcon
                  className={classNames(projectcss.all, sty.svg__m05W)}
                  role={"img"}
                />
              ) : null}

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__bCigN
                )}
              >
                {hasVariant(globalVariants, "screen", "_1440")
                  ? "Privacy policy"
                  : "FAQs"}
              </div>

              {false ? (
                <IconIcon
                  className={classNames(projectcss.all, sty.svg__zdmNv)}
                  role={"img"}
                />
              ) : null}
            </p.Stack>

            <p.Stack
              as={p.PlasmicLink}
              hasGap={true}
              className={classNames(
                projectcss.all,
                projectcss.a,
                sty.link___5PAb1
              )}
              component={Link}
              platform={"nextjs"}
            >
              {false ? (
                <IconIcon
                  className={classNames(projectcss.all, sty.svg__h5Zrw)}
                  role={"img"}
                />
              ) : null}
              {(hasVariant(globalVariants, "screen", "_1440") ? true : true) ? (
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__mxMxj
                  )}
                >
                  {"Status"}
                </div>
              ) : null}
              {false ? (
                <IconIcon
                  className={classNames(projectcss.all, sty.svg__xpkAq)}
                  role={"img"}
                />
              ) : null}
            </p.Stack>
          </p.Stack>

          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__w6D0V)}
          >
            <h3
              className={classNames(
                projectcss.all,
                projectcss.h3,
                projectcss.__wab_text,
                sty.h3__ytA5B
              )}
            >
              {"Company"}
            </h3>

            <p.Stack
              as={p.PlasmicLink}
              hasGap={true}
              className={classNames(
                projectcss.all,
                projectcss.a,
                sty.link___16120
              )}
              component={Link}
              platform={"nextjs"}
            >
              {false ? (
                <IconIcon
                  className={classNames(projectcss.all, sty.svg__ni0AI)}
                  role={"img"}
                />
              ) : null}

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___7GsBk
                )}
              >
                {"About"}
              </div>

              {false ? (
                <IconIcon
                  className={classNames(projectcss.all, sty.svg___5BetR)}
                  role={"img"}
                />
              ) : null}
            </p.Stack>

            <p.Stack
              as={p.PlasmicLink}
              hasGap={true}
              className={classNames(
                projectcss.all,
                projectcss.a,
                sty.link__virEc
              )}
              component={Link}
              platform={"nextjs"}
            >
              {false ? (
                <IconIcon
                  className={classNames(projectcss.all, sty.svg___1TjDz)}
                  role={"img"}
                />
              ) : null}

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__mmJxY
                )}
              >
                {hasVariant(globalVariants, "screen", "_1440")
                  ? "Contact"
                  : "Contact us"}
              </div>

              {false ? (
                <IconIcon
                  className={classNames(projectcss.all, sty.svg__s7W6)}
                  role={"img"}
                />
              ) : null}
            </p.Stack>

            {(hasVariant(globalVariants, "screen", "_1440") ? true : false) ? (
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__xSqi8
                )}
              >
                {hasVariant(globalVariants, "screen", "_1440")
                  ? "Blog"
                  : "Contact us"}
              </div>
            ) : null}
            {(hasVariant(globalVariants, "screen", "_1440") ? true : false) ? (
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___2C1PY
                )}
              >
                {hasVariant(globalVariants, "screen", "_1440")
                  ? "Shop"
                  : "Contact us"}
              </div>
            ) : null}

            <p.Stack
              as={p.PlasmicLink}
              hasGap={true}
              className={classNames(
                projectcss.all,
                projectcss.a,
                sty.link__tE8P3
              )}
              component={Link}
              platform={"nextjs"}
            >
              {false ? (
                <IconIcon
                  className={classNames(projectcss.all, sty.svg__x3VyE)}
                  role={"img"}
                />
              ) : null}
              {(hasVariant(globalVariants, "screen", "_1440") ? true : true) ? (
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__kkCbp
                  )}
                >
                  {"Careers"}
                </div>
              ) : null}
              {false ? (
                <IconIcon
                  className={classNames(projectcss.all, sty.svg__bead6)}
                  role={"img"}
                />
              ) : null}
            </p.Stack>

            <p.Stack
              as={p.PlasmicLink}
              hasGap={true}
              className={classNames(
                projectcss.all,
                projectcss.a,
                sty.link__iHnTn
              )}
              component={Link}
              platform={"nextjs"}
            >
              {false ? (
                <IconIcon
                  className={classNames(projectcss.all, sty.svg___4VfTb)}
                  role={"img"}
                />
              ) : null}
              {(hasVariant(globalVariants, "screen", "_1440") ? true : true) ? (
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___4Sbyl
                  )}
                >
                  {"Media"}
                </div>
              ) : null}
              {false ? (
                <IconIcon
                  className={classNames(projectcss.all, sty.svg__ko7D7)}
                  role={"img"}
                />
              ) : null}
            </p.Stack>
          </p.Stack>
        </p.Stack>

        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__fyLs2
          )}
        >
          {"© Fountain 2022"}
        </div>
      </div>
    ) : null
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "img"],
  img: ["img"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  img: typeof p.PlasmicImg;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicFFooter__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicFFooter__VariantsArgs;
    args?: PlasmicFFooter__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicFFooter__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicFFooter__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicFFooter__ArgProps,
      internalVariantPropNames: PlasmicFFooter__VariantProps
    });

    return PlasmicFFooter__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicFFooter";
  } else {
    func.displayName = `PlasmicFFooter.${nodeName}`;
  }
  return func;
}

export const PlasmicFFooter = Object.assign(
  // Top-level PlasmicFFooter renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    img: makeNodeComponent("img"),

    // Metadata about props expected for PlasmicFFooter
    internalVariantProps: PlasmicFFooter__VariantProps,
    internalArgProps: PlasmicFFooter__ArgProps
  }
);

export default PlasmicFFooter;
/* prettier-ignore-end */
